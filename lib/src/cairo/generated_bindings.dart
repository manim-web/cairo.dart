// cairo - a vector graphics library with display and print output
//
// Copyright © 2002 University of Southern California
// Copyright © 2005 Red Hat, Inc.
//
// This library is free software; you can redistribute it and/or
// modify it either under the terms of the GNU Lesser General Public
// License version 2.1 as published by the Free Software Foundation
// (the "LGPL") or, at your option, under the terms of the Mozilla
// Public License Version 1.1 (the "MPL"). If you do not alter this
// notice, a recipient may use your version of this file under either
// the MPL or the LGPL.
//
// You should have received a copy of the LGPL along with this library
// in the file COPYING-LGPL-2.1; if not, write to the Free Software
// Foundation, Inc., 51 Franklin Street, Suite 500, Boston, MA 02110-1335, USA
// You should have received a copy of the MPL along with this library
// in the file COPYING-MPL-1.1
//
// The contents of this file are subject to the Mozilla Public License
// Version 1.1 (the "License"); you may not use this file except in
// compliance with the License. You may obtain a copy of the License at
// http://www.mozilla.org/MPL/
//
// This software is distributed on an "AS IS" basis, WITHOUT WARRANTY
// OF ANY KIND, either express or implied. See the LGPL or the MPL for
// the specific language governing rights and limitations.
//
// The Original Code is the cairo graphics library.
//
// The Initial Developer of the Original Code is University of Southern
// California.
//
// Contributor(s):
//	Carl D. Worth <cworth@cworth.org>

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

/// Cairo Dart bindings
class Cairo {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  Cairo(ffi.DynamicLibrary dynamicLibrary) : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  Cairo.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void _Exit(
    int __status,
  ) {
    return __Exit(
      __status,
    );
  }

  late final __ExitPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int32)>>('_Exit');
  late final __Exit = __ExitPtr.asFunction<void Function(int)>();

  double __acos(
    double __x,
  ) {
    return ___acos(
      __x,
    );
  }

  late final ___acosPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('__acos');
  late final ___acos = ___acosPtr.asFunction<double Function(double)>();

  double __acosf(
    double __x,
  ) {
    return ___acosf(
      __x,
    );
  }

  late final ___acosfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('__acosf');
  late final ___acosf = ___acosfPtr.asFunction<double Function(double)>();

  double __acosh(
    double __x,
  ) {
    return ___acosh(
      __x,
    );
  }

  late final ___acoshPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('__acosh');
  late final ___acosh = ___acoshPtr.asFunction<double Function(double)>();

  double __acoshf(
    double __x,
  ) {
    return ___acoshf(
      __x,
    );
  }

  late final ___acoshfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('__acoshf');
  late final ___acoshf = ___acoshfPtr.asFunction<double Function(double)>();

  double __asin(
    double __x,
  ) {
    return ___asin(
      __x,
    );
  }

  late final ___asinPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('__asin');
  late final ___asin = ___asinPtr.asFunction<double Function(double)>();

  double __asinf(
    double __x,
  ) {
    return ___asinf(
      __x,
    );
  }

  late final ___asinfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('__asinf');
  late final ___asinf = ___asinfPtr.asFunction<double Function(double)>();

  double __asinh(
    double __x,
  ) {
    return ___asinh(
      __x,
    );
  }

  late final ___asinhPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('__asinh');
  late final ___asinh = ___asinhPtr.asFunction<double Function(double)>();

  double __asinhf(
    double __x,
  ) {
    return ___asinhf(
      __x,
    );
  }

  late final ___asinhfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('__asinhf');
  late final ___asinhf = ___asinhfPtr.asFunction<double Function(double)>();

  double __atan(
    double __x,
  ) {
    return ___atan(
      __x,
    );
  }

  late final ___atanPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('__atan');
  late final ___atan = ___atanPtr.asFunction<double Function(double)>();

  double __atan2(
    double __y,
    double __x,
  ) {
    return ___atan2(
      __y,
      __x,
    );
  }

  late final ___atan2Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          '__atan2');
  late final ___atan2 =
      ___atan2Ptr.asFunction<double Function(double, double)>();

  double __atan2f(
    double __y,
    double __x,
  ) {
    return ___atan2f(
      __y,
      __x,
    );
  }

  late final ___atan2fPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>(
          '__atan2f');
  late final ___atan2f =
      ___atan2fPtr.asFunction<double Function(double, double)>();

  double __atanf(
    double __x,
  ) {
    return ___atanf(
      __x,
    );
  }

  late final ___atanfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('__atanf');
  late final ___atanf = ___atanfPtr.asFunction<double Function(double)>();

  double __atanh(
    double __x,
  ) {
    return ___atanh(
      __x,
    );
  }

  late final ___atanhPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('__atanh');
  late final ___atanh = ___atanhPtr.asFunction<double Function(double)>();

  double __atanhf(
    double __x,
  ) {
    return ___atanhf(
      __x,
    );
  }

  late final ___atanhfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('__atanhf');
  late final ___atanhf = ___atanhfPtr.asFunction<double Function(double)>();

  double __cbrt(
    double __x,
  ) {
    return ___cbrt(
      __x,
    );
  }

  late final ___cbrtPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('__cbrt');
  late final ___cbrt = ___cbrtPtr.asFunction<double Function(double)>();

  double __cbrtf(
    double __x,
  ) {
    return ___cbrtf(
      __x,
    );
  }

  late final ___cbrtfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('__cbrtf');
  late final ___cbrtf = ___cbrtfPtr.asFunction<double Function(double)>();

  double __ceil(
    double __x,
  ) {
    return ___ceil(
      __x,
    );
  }

  late final ___ceilPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('__ceil');
  late final ___ceil = ___ceilPtr.asFunction<double Function(double)>();

  double __ceilf(
    double __x,
  ) {
    return ___ceilf(
      __x,
    );
  }

  late final ___ceilfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('__ceilf');
  late final ___ceilf = ___ceilfPtr.asFunction<double Function(double)>();

  double __copysign(
    double __x,
    double __y,
  ) {
    return ___copysign(
      __x,
      __y,
    );
  }

  late final ___copysignPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          '__copysign');
  late final ___copysign =
      ___copysignPtr.asFunction<double Function(double, double)>();

  double __copysignf(
    double __x,
    double __y,
  ) {
    return ___copysignf(
      __x,
      __y,
    );
  }

  late final ___copysignfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>(
          '__copysignf');
  late final ___copysignf =
      ___copysignfPtr.asFunction<double Function(double, double)>();

  double __cos(
    double __x,
  ) {
    return ___cos(
      __x,
    );
  }

  late final ___cosPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('__cos');
  late final ___cos = ___cosPtr.asFunction<double Function(double)>();

  double __cosf(
    double __x,
  ) {
    return ___cosf(
      __x,
    );
  }

  late final ___cosfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('__cosf');
  late final ___cosf = ___cosfPtr.asFunction<double Function(double)>();

  double __cosh(
    double __x,
  ) {
    return ___cosh(
      __x,
    );
  }

  late final ___coshPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('__cosh');
  late final ___cosh = ___coshPtr.asFunction<double Function(double)>();

  double __coshf(
    double __x,
  ) {
    return ___coshf(
      __x,
    );
  }

  late final ___coshfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('__coshf');
  late final ___coshf = ___coshfPtr.asFunction<double Function(double)>();

  int __ctype_get_mb_cur_max() {
    return ___ctype_get_mb_cur_max();
  }

  late final ___ctype_get_mb_cur_maxPtr =
      _lookup<ffi.NativeFunction<size_t Function()>>('__ctype_get_mb_cur_max');
  late final ___ctype_get_mb_cur_max =
      ___ctype_get_mb_cur_maxPtr.asFunction<int Function()>();

  double __drem(
    double __x,
    double __y,
  ) {
    return ___drem(
      __x,
      __y,
    );
  }

  late final ___dremPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          '__drem');
  late final ___drem = ___dremPtr.asFunction<double Function(double, double)>();

  double __dremf(
    double __x,
    double __y,
  ) {
    return ___dremf(
      __x,
      __y,
    );
  }

  late final ___dremfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>(
          '__dremf');
  late final ___dremf =
      ___dremfPtr.asFunction<double Function(double, double)>();

  double __erf(
    double arg0,
  ) {
    return ___erf(
      arg0,
    );
  }

  late final ___erfPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('__erf');
  late final ___erf = ___erfPtr.asFunction<double Function(double)>();

  double __erfc(
    double arg0,
  ) {
    return ___erfc(
      arg0,
    );
  }

  late final ___erfcPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('__erfc');
  late final ___erfc = ___erfcPtr.asFunction<double Function(double)>();

  double __erfcf(
    double arg0,
  ) {
    return ___erfcf(
      arg0,
    );
  }

  late final ___erfcfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('__erfcf');
  late final ___erfcf = ___erfcfPtr.asFunction<double Function(double)>();

  double __erff(
    double arg0,
  ) {
    return ___erff(
      arg0,
    );
  }

  late final ___erffPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('__erff');
  late final ___erff = ___erffPtr.asFunction<double Function(double)>();

  double __exp(
    double __x,
  ) {
    return ___exp(
      __x,
    );
  }

  late final ___expPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('__exp');
  late final ___exp = ___expPtr.asFunction<double Function(double)>();

  double __exp2(
    double __x,
  ) {
    return ___exp2(
      __x,
    );
  }

  late final ___exp2Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('__exp2');
  late final ___exp2 = ___exp2Ptr.asFunction<double Function(double)>();

  double __exp2f(
    double __x,
  ) {
    return ___exp2f(
      __x,
    );
  }

  late final ___exp2fPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('__exp2f');
  late final ___exp2f = ___exp2fPtr.asFunction<double Function(double)>();

  double __expf(
    double __x,
  ) {
    return ___expf(
      __x,
    );
  }

  late final ___expfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('__expf');
  late final ___expf = ___expfPtr.asFunction<double Function(double)>();

  double __expm1(
    double __x,
  ) {
    return ___expm1(
      __x,
    );
  }

  late final ___expm1Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('__expm1');
  late final ___expm1 = ___expm1Ptr.asFunction<double Function(double)>();

  double __expm1f(
    double __x,
  ) {
    return ___expm1f(
      __x,
    );
  }

  late final ___expm1fPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('__expm1f');
  late final ___expm1f = ___expm1fPtr.asFunction<double Function(double)>();

  double __fabs(
    double __x,
  ) {
    return ___fabs(
      __x,
    );
  }

  late final ___fabsPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('__fabs');
  late final ___fabs = ___fabsPtr.asFunction<double Function(double)>();

  double __fabsf(
    double __x,
  ) {
    return ___fabsf(
      __x,
    );
  }

  late final ___fabsfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('__fabsf');
  late final ___fabsf = ___fabsfPtr.asFunction<double Function(double)>();

  double __fdim(
    double __x,
    double __y,
  ) {
    return ___fdim(
      __x,
      __y,
    );
  }

  late final ___fdimPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          '__fdim');
  late final ___fdim = ___fdimPtr.asFunction<double Function(double, double)>();

  double __fdimf(
    double __x,
    double __y,
  ) {
    return ___fdimf(
      __x,
      __y,
    );
  }

  late final ___fdimfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>(
          '__fdimf');
  late final ___fdimf =
      ___fdimfPtr.asFunction<double Function(double, double)>();

  int __finite(
    double __value,
  ) {
    return ___finite(
      __value,
    );
  }

  late final ___finitePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Double)>>('__finite');
  late final ___finite = ___finitePtr.asFunction<int Function(double)>();

  int __finitef(
    double __value,
  ) {
    return ___finitef(
      __value,
    );
  }

  late final ___finitefPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Float)>>('__finitef');
  late final ___finitef = ___finitefPtr.asFunction<int Function(double)>();

  double __floor(
    double __x,
  ) {
    return ___floor(
      __x,
    );
  }

  late final ___floorPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('__floor');
  late final ___floor = ___floorPtr.asFunction<double Function(double)>();

  double __floorf(
    double __x,
  ) {
    return ___floorf(
      __x,
    );
  }

  late final ___floorfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('__floorf');
  late final ___floorf = ___floorfPtr.asFunction<double Function(double)>();

  double __fma(
    double __x,
    double __y,
    double __z,
  ) {
    return ___fma(
      __x,
      __y,
      __z,
    );
  }

  late final ___fmaPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Double, ffi.Double, ffi.Double)>>('__fma');
  late final ___fma =
      ___fmaPtr.asFunction<double Function(double, double, double)>();

  double __fmaf(
    double __x,
    double __y,
    double __z,
  ) {
    return ___fmaf(
      __x,
      __y,
      __z,
    );
  }

  late final ___fmafPtr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(ffi.Float, ffi.Float, ffi.Float)>>('__fmaf');
  late final ___fmaf =
      ___fmafPtr.asFunction<double Function(double, double, double)>();

  double __fmax(
    double __x,
    double __y,
  ) {
    return ___fmax(
      __x,
      __y,
    );
  }

  late final ___fmaxPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          '__fmax');
  late final ___fmax = ___fmaxPtr.asFunction<double Function(double, double)>();

  double __fmaxf(
    double __x,
    double __y,
  ) {
    return ___fmaxf(
      __x,
      __y,
    );
  }

  late final ___fmaxfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>(
          '__fmaxf');
  late final ___fmaxf =
      ___fmaxfPtr.asFunction<double Function(double, double)>();

  double __fmin(
    double __x,
    double __y,
  ) {
    return ___fmin(
      __x,
      __y,
    );
  }

  late final ___fminPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          '__fmin');
  late final ___fmin = ___fminPtr.asFunction<double Function(double, double)>();

  double __fminf(
    double __x,
    double __y,
  ) {
    return ___fminf(
      __x,
      __y,
    );
  }

  late final ___fminfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>(
          '__fminf');
  late final ___fminf =
      ___fminfPtr.asFunction<double Function(double, double)>();

  double __fmod(
    double __x,
    double __y,
  ) {
    return ___fmod(
      __x,
      __y,
    );
  }

  late final ___fmodPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          '__fmod');
  late final ___fmod = ___fmodPtr.asFunction<double Function(double, double)>();

  double __fmodf(
    double __x,
    double __y,
  ) {
    return ___fmodf(
      __x,
      __y,
    );
  }

  late final ___fmodfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>(
          '__fmodf');
  late final ___fmodf =
      ___fmodfPtr.asFunction<double Function(double, double)>();

  int __fpclassify(
    double __value,
  ) {
    return ___fpclassify(
      __value,
    );
  }

  late final ___fpclassifyPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Double)>>(
          '__fpclassify');
  late final ___fpclassify =
      ___fpclassifyPtr.asFunction<int Function(double)>();

  int __fpclassifyf(
    double __value,
  ) {
    return ___fpclassifyf(
      __value,
    );
  }

  late final ___fpclassifyfPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Float)>>(
          '__fpclassifyf');
  late final ___fpclassifyf =
      ___fpclassifyfPtr.asFunction<int Function(double)>();

  double __frexp(
    double __x,
    ffi.Pointer<ffi.Int32> __exponent,
  ) {
    return ___frexp(
      __x,
      __exponent,
    );
  }

  late final ___frexpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Double, ffi.Pointer<ffi.Int32>)>>('__frexp');
  late final ___frexp =
      ___frexpPtr.asFunction<double Function(double, ffi.Pointer<ffi.Int32>)>();

  double __frexpf(
    double __x,
    ffi.Pointer<ffi.Int32> __exponent,
  ) {
    return ___frexpf(
      __x,
      __exponent,
    );
  }

  late final ___frexpfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(ffi.Float, ffi.Pointer<ffi.Int32>)>>('__frexpf');
  late final ___frexpf = ___frexpfPtr
      .asFunction<double Function(double, ffi.Pointer<ffi.Int32>)>();

  double __gamma(
    double arg0,
  ) {
    return ___gamma(
      arg0,
    );
  }

  late final ___gammaPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('__gamma');
  late final ___gamma = ___gammaPtr.asFunction<double Function(double)>();

  double __gammaf(
    double arg0,
  ) {
    return ___gammaf(
      arg0,
    );
  }

  late final ___gammafPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('__gammaf');
  late final ___gammaf = ___gammafPtr.asFunction<double Function(double)>();

  int __getdelim(
    ffi.Pointer<ffi.Pointer<ffi.Int8>> __lineptr,
    ffi.Pointer<size_t> __n,
    int __delimiter,
    ffi.Pointer<FILE> __stream,
  ) {
    return ___getdelim(
      __lineptr,
      __n,
      __delimiter,
      __stream,
    );
  }

  late final ___getdelimPtr = _lookup<
      ffi.NativeFunction<
          __ssize_t Function(
              ffi.Pointer<ffi.Pointer<ffi.Int8>>,
              ffi.Pointer<size_t>,
              ffi.Int32,
              ffi.Pointer<FILE>)>>('__getdelim');
  late final ___getdelim = ___getdelimPtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Int8>>, ffi.Pointer<size_t>, int,
          ffi.Pointer<FILE>)>();

  double __hypot(
    double __x,
    double __y,
  ) {
    return ___hypot(
      __x,
      __y,
    );
  }

  late final ___hypotPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          '__hypot');
  late final ___hypot =
      ___hypotPtr.asFunction<double Function(double, double)>();

  double __hypotf(
    double __x,
    double __y,
  ) {
    return ___hypotf(
      __x,
      __y,
    );
  }

  late final ___hypotfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>(
          '__hypotf');
  late final ___hypotf =
      ___hypotfPtr.asFunction<double Function(double, double)>();

  int __ilogb(
    double __x,
  ) {
    return ___ilogb(
      __x,
    );
  }

  late final ___ilogbPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Double)>>('__ilogb');
  late final ___ilogb = ___ilogbPtr.asFunction<int Function(double)>();

  int __ilogbf(
    double __x,
  ) {
    return ___ilogbf(
      __x,
    );
  }

  late final ___ilogbfPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Float)>>('__ilogbf');
  late final ___ilogbf = ___ilogbfPtr.asFunction<int Function(double)>();

  int __iseqsig(
    double __x,
    double __y,
  ) {
    return ___iseqsig(
      __x,
      __y,
    );
  }

  late final ___iseqsigPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Double, ffi.Double)>>(
          '__iseqsig');
  late final ___iseqsig =
      ___iseqsigPtr.asFunction<int Function(double, double)>();

  int __iseqsigf(
    double __x,
    double __y,
  ) {
    return ___iseqsigf(
      __x,
      __y,
    );
  }

  late final ___iseqsigfPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Float, ffi.Float)>>(
          '__iseqsigf');
  late final ___iseqsigf =
      ___iseqsigfPtr.asFunction<int Function(double, double)>();

  int __isinf(
    double __value,
  ) {
    return ___isinf(
      __value,
    );
  }

  late final ___isinfPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Double)>>('__isinf');
  late final ___isinf = ___isinfPtr.asFunction<int Function(double)>();

  int __isinff(
    double __value,
  ) {
    return ___isinff(
      __value,
    );
  }

  late final ___isinffPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Float)>>('__isinff');
  late final ___isinff = ___isinffPtr.asFunction<int Function(double)>();

  int __isnan(
    double __value,
  ) {
    return ___isnan(
      __value,
    );
  }

  late final ___isnanPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Double)>>('__isnan');
  late final ___isnan = ___isnanPtr.asFunction<int Function(double)>();

  int __isnanf(
    double __value,
  ) {
    return ___isnanf(
      __value,
    );
  }

  late final ___isnanfPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Float)>>('__isnanf');
  late final ___isnanf = ___isnanfPtr.asFunction<int Function(double)>();

  int __issignaling(
    double __value,
  ) {
    return ___issignaling(
      __value,
    );
  }

  late final ___issignalingPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Double)>>(
          '__issignaling');
  late final ___issignaling =
      ___issignalingPtr.asFunction<int Function(double)>();

  int __issignalingf(
    double __value,
  ) {
    return ___issignalingf(
      __value,
    );
  }

  late final ___issignalingfPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Float)>>(
          '__issignalingf');
  late final ___issignalingf =
      ___issignalingfPtr.asFunction<int Function(double)>();

  double __j0(
    double arg0,
  ) {
    return ___j0(
      arg0,
    );
  }

  late final ___j0Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('__j0');
  late final ___j0 = ___j0Ptr.asFunction<double Function(double)>();

  double __j0f(
    double arg0,
  ) {
    return ___j0f(
      arg0,
    );
  }

  late final ___j0fPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('__j0f');
  late final ___j0f = ___j0fPtr.asFunction<double Function(double)>();

  double __j1(
    double arg0,
  ) {
    return ___j1(
      arg0,
    );
  }

  late final ___j1Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('__j1');
  late final ___j1 = ___j1Ptr.asFunction<double Function(double)>();

  double __j1f(
    double arg0,
  ) {
    return ___j1f(
      arg0,
    );
  }

  late final ___j1fPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('__j1f');
  late final ___j1f = ___j1fPtr.asFunction<double Function(double)>();

  double __jn(
    int arg0,
    double arg1,
  ) {
    return ___jn(
      arg0,
      arg1,
    );
  }

  late final ___jnPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Int32, ffi.Double)>>(
          '__jn');
  late final ___jn = ___jnPtr.asFunction<double Function(int, double)>();

  double __jnf(
    int arg0,
    double arg1,
  ) {
    return ___jnf(
      arg0,
      arg1,
    );
  }

  late final ___jnfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Int32, ffi.Float)>>(
          '__jnf');
  late final ___jnf = ___jnfPtr.asFunction<double Function(int, double)>();

  double __ldexp(
    double __x,
    int __exponent,
  ) {
    return ___ldexp(
      __x,
      __exponent,
    );
  }

  late final ___ldexpPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Int32)>>(
          '__ldexp');
  late final ___ldexp = ___ldexpPtr.asFunction<double Function(double, int)>();

  double __ldexpf(
    double __x,
    int __exponent,
  ) {
    return ___ldexpf(
      __x,
      __exponent,
    );
  }

  late final ___ldexpfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Int32)>>(
          '__ldexpf');
  late final ___ldexpf =
      ___ldexpfPtr.asFunction<double Function(double, int)>();

  double __lgamma(
    double arg0,
  ) {
    return ___lgamma(
      arg0,
    );
  }

  late final ___lgammaPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('__lgamma');
  late final ___lgamma = ___lgammaPtr.asFunction<double Function(double)>();

  double __lgamma_r(
    double arg0,
    ffi.Pointer<ffi.Int32> __signgamp,
  ) {
    return ___lgamma_r(
      arg0,
      __signgamp,
    );
  }

  late final ___lgamma_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Double, ffi.Pointer<ffi.Int32>)>>('__lgamma_r');
  late final ___lgamma_r = ___lgamma_rPtr
      .asFunction<double Function(double, ffi.Pointer<ffi.Int32>)>();

  double __lgammaf(
    double arg0,
  ) {
    return ___lgammaf(
      arg0,
    );
  }

  late final ___lgammafPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('__lgammaf');
  late final ___lgammaf = ___lgammafPtr.asFunction<double Function(double)>();

  double __lgammaf_r(
    double arg0,
    ffi.Pointer<ffi.Int32> __signgamp,
  ) {
    return ___lgammaf_r(
      arg0,
      __signgamp,
    );
  }

  late final ___lgammaf_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(
              ffi.Float, ffi.Pointer<ffi.Int32>)>>('__lgammaf_r');
  late final ___lgammaf_r = ___lgammaf_rPtr
      .asFunction<double Function(double, ffi.Pointer<ffi.Int32>)>();

  int __llrint(
    double __x,
  ) {
    return ___llrint(
      __x,
    );
  }

  late final ___llrintPtr =
      _lookup<ffi.NativeFunction<ffi.Int64 Function(ffi.Double)>>('__llrint');
  late final ___llrint = ___llrintPtr.asFunction<int Function(double)>();

  int __llrintf(
    double __x,
  ) {
    return ___llrintf(
      __x,
    );
  }

  late final ___llrintfPtr =
      _lookup<ffi.NativeFunction<ffi.Int64 Function(ffi.Float)>>('__llrintf');
  late final ___llrintf = ___llrintfPtr.asFunction<int Function(double)>();

  int __llround(
    double __x,
  ) {
    return ___llround(
      __x,
    );
  }

  late final ___llroundPtr =
      _lookup<ffi.NativeFunction<ffi.Int64 Function(ffi.Double)>>('__llround');
  late final ___llround = ___llroundPtr.asFunction<int Function(double)>();

  int __llroundf(
    double __x,
  ) {
    return ___llroundf(
      __x,
    );
  }

  late final ___llroundfPtr =
      _lookup<ffi.NativeFunction<ffi.Int64 Function(ffi.Float)>>('__llroundf');
  late final ___llroundf = ___llroundfPtr.asFunction<int Function(double)>();

  double __log(
    double __x,
  ) {
    return ___log(
      __x,
    );
  }

  late final ___logPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('__log');
  late final ___log = ___logPtr.asFunction<double Function(double)>();

  double __log10(
    double __x,
  ) {
    return ___log10(
      __x,
    );
  }

  late final ___log10Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('__log10');
  late final ___log10 = ___log10Ptr.asFunction<double Function(double)>();

  double __log10f(
    double __x,
  ) {
    return ___log10f(
      __x,
    );
  }

  late final ___log10fPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('__log10f');
  late final ___log10f = ___log10fPtr.asFunction<double Function(double)>();

  double __log1p(
    double __x,
  ) {
    return ___log1p(
      __x,
    );
  }

  late final ___log1pPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('__log1p');
  late final ___log1p = ___log1pPtr.asFunction<double Function(double)>();

  double __log1pf(
    double __x,
  ) {
    return ___log1pf(
      __x,
    );
  }

  late final ___log1pfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('__log1pf');
  late final ___log1pf = ___log1pfPtr.asFunction<double Function(double)>();

  double __log2(
    double __x,
  ) {
    return ___log2(
      __x,
    );
  }

  late final ___log2Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('__log2');
  late final ___log2 = ___log2Ptr.asFunction<double Function(double)>();

  double __log2f(
    double __x,
  ) {
    return ___log2f(
      __x,
    );
  }

  late final ___log2fPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('__log2f');
  late final ___log2f = ___log2fPtr.asFunction<double Function(double)>();

  double __logb(
    double __x,
  ) {
    return ___logb(
      __x,
    );
  }

  late final ___logbPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('__logb');
  late final ___logb = ___logbPtr.asFunction<double Function(double)>();

  double __logbf(
    double __x,
  ) {
    return ___logbf(
      __x,
    );
  }

  late final ___logbfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('__logbf');
  late final ___logbf = ___logbfPtr.asFunction<double Function(double)>();

  double __logf(
    double __x,
  ) {
    return ___logf(
      __x,
    );
  }

  late final ___logfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('__logf');
  late final ___logf = ___logfPtr.asFunction<double Function(double)>();

  int __lrint(
    double __x,
  ) {
    return ___lrint(
      __x,
    );
  }

  late final ___lrintPtr =
      _lookup<ffi.NativeFunction<ffi.Int64 Function(ffi.Double)>>('__lrint');
  late final ___lrint = ___lrintPtr.asFunction<int Function(double)>();

  int __lrintf(
    double __x,
  ) {
    return ___lrintf(
      __x,
    );
  }

  late final ___lrintfPtr =
      _lookup<ffi.NativeFunction<ffi.Int64 Function(ffi.Float)>>('__lrintf');
  late final ___lrintf = ___lrintfPtr.asFunction<int Function(double)>();

  int __lround(
    double __x,
  ) {
    return ___lround(
      __x,
    );
  }

  late final ___lroundPtr =
      _lookup<ffi.NativeFunction<ffi.Int64 Function(ffi.Double)>>('__lround');
  late final ___lround = ___lroundPtr.asFunction<int Function(double)>();

  int __lroundf(
    double __x,
  ) {
    return ___lroundf(
      __x,
    );
  }

  late final ___lroundfPtr =
      _lookup<ffi.NativeFunction<ffi.Int64 Function(ffi.Float)>>('__lroundf');
  late final ___lroundf = ___lroundfPtr.asFunction<int Function(double)>();

  double __modf(
    double __x,
    ffi.Pointer<ffi.Double> __iptr,
  ) {
    return ___modf(
      __x,
      __iptr,
    );
  }

  late final ___modfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Double, ffi.Pointer<ffi.Double>)>>('__modf');
  late final ___modf =
      ___modfPtr.asFunction<double Function(double, ffi.Pointer<ffi.Double>)>();

  double __modff(
    double __x,
    ffi.Pointer<ffi.Float> __iptr,
  ) {
    return ___modff(
      __x,
      __iptr,
    );
  }

  late final ___modffPtr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(ffi.Float, ffi.Pointer<ffi.Float>)>>('__modff');
  late final ___modff =
      ___modffPtr.asFunction<double Function(double, ffi.Pointer<ffi.Float>)>();

  double __nan(
    ffi.Pointer<ffi.Int8> __tagb,
  ) {
    return ___nan(
      __tagb,
    );
  }

  late final ___nanPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Pointer<ffi.Int8>)>>(
          '__nan');
  late final ___nan =
      ___nanPtr.asFunction<double Function(ffi.Pointer<ffi.Int8>)>();

  double __nanf(
    ffi.Pointer<ffi.Int8> __tagb,
  ) {
    return ___nanf(
      __tagb,
    );
  }

  late final ___nanfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Pointer<ffi.Int8>)>>(
          '__nanf');
  late final ___nanf =
      ___nanfPtr.asFunction<double Function(ffi.Pointer<ffi.Int8>)>();

  double __nearbyint(
    double __x,
  ) {
    return ___nearbyint(
      __x,
    );
  }

  late final ___nearbyintPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>(
          '__nearbyint');
  late final ___nearbyint =
      ___nearbyintPtr.asFunction<double Function(double)>();

  double __nearbyintf(
    double __x,
  ) {
    return ___nearbyintf(
      __x,
    );
  }

  late final ___nearbyintfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>(
          '__nearbyintf');
  late final ___nearbyintf =
      ___nearbyintfPtr.asFunction<double Function(double)>();

  double __nextafter(
    double __x,
    double __y,
  ) {
    return ___nextafter(
      __x,
      __y,
    );
  }

  late final ___nextafterPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          '__nextafter');
  late final ___nextafter =
      ___nextafterPtr.asFunction<double Function(double, double)>();

  double __nextafterf(
    double __x,
    double __y,
  ) {
    return ___nextafterf(
      __x,
      __y,
    );
  }

  late final ___nextafterfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>(
          '__nextafterf');
  late final ___nextafterf =
      ___nextafterfPtr.asFunction<double Function(double, double)>();

  int __overflow(
    ffi.Pointer<FILE> arg0,
    int arg1,
  ) {
    return ___overflow(
      arg0,
      arg1,
    );
  }

  late final ___overflowPtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<FILE>, ffi.Int32)>>(
      '__overflow');
  late final ___overflow =
      ___overflowPtr.asFunction<int Function(ffi.Pointer<FILE>, int)>();

  double __pow(
    double __x,
    double __y,
  ) {
    return ___pow(
      __x,
      __y,
    );
  }

  late final ___powPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          '__pow');
  late final ___pow = ___powPtr.asFunction<double Function(double, double)>();

  double __powf(
    double __x,
    double __y,
  ) {
    return ___powf(
      __x,
      __y,
    );
  }

  late final ___powfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>(
          '__powf');
  late final ___powf = ___powfPtr.asFunction<double Function(double, double)>();

  double __remainder(
    double __x,
    double __y,
  ) {
    return ___remainder(
      __x,
      __y,
    );
  }

  late final ___remainderPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          '__remainder');
  late final ___remainder =
      ___remainderPtr.asFunction<double Function(double, double)>();

  double __remainderf(
    double __x,
    double __y,
  ) {
    return ___remainderf(
      __x,
      __y,
    );
  }

  late final ___remainderfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>(
          '__remainderf');
  late final ___remainderf =
      ___remainderfPtr.asFunction<double Function(double, double)>();

  double __remquo(
    double __x,
    double __y,
    ffi.Pointer<ffi.Int32> __quo,
  ) {
    return ___remquo(
      __x,
      __y,
      __quo,
    );
  }

  late final ___remquoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Double, ffi.Double, ffi.Pointer<ffi.Int32>)>>('__remquo');
  late final ___remquo = ___remquoPtr
      .asFunction<double Function(double, double, ffi.Pointer<ffi.Int32>)>();

  double __remquof(
    double __x,
    double __y,
    ffi.Pointer<ffi.Int32> __quo,
  ) {
    return ___remquof(
      __x,
      __y,
      __quo,
    );
  }

  late final ___remquofPtr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(
              ffi.Float, ffi.Float, ffi.Pointer<ffi.Int32>)>>('__remquof');
  late final ___remquof = ___remquofPtr
      .asFunction<double Function(double, double, ffi.Pointer<ffi.Int32>)>();

  double __rint(
    double __x,
  ) {
    return ___rint(
      __x,
    );
  }

  late final ___rintPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('__rint');
  late final ___rint = ___rintPtr.asFunction<double Function(double)>();

  double __rintf(
    double __x,
  ) {
    return ___rintf(
      __x,
    );
  }

  late final ___rintfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('__rintf');
  late final ___rintf = ___rintfPtr.asFunction<double Function(double)>();

  double __round(
    double __x,
  ) {
    return ___round(
      __x,
    );
  }

  late final ___roundPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('__round');
  late final ___round = ___roundPtr.asFunction<double Function(double)>();

  double __roundf(
    double __x,
  ) {
    return ___roundf(
      __x,
    );
  }

  late final ___roundfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('__roundf');
  late final ___roundf = ___roundfPtr.asFunction<double Function(double)>();

  double __scalb(
    double __x,
    double __n,
  ) {
    return ___scalb(
      __x,
      __n,
    );
  }

  late final ___scalbPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          '__scalb');
  late final ___scalb =
      ___scalbPtr.asFunction<double Function(double, double)>();

  double __scalbf(
    double __x,
    double __n,
  ) {
    return ___scalbf(
      __x,
      __n,
    );
  }

  late final ___scalbfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>(
          '__scalbf');
  late final ___scalbf =
      ___scalbfPtr.asFunction<double Function(double, double)>();

  double __scalbln(
    double __x,
    int __n,
  ) {
    return ___scalbln(
      __x,
      __n,
    );
  }

  late final ___scalblnPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Int64)>>(
          '__scalbln');
  late final ___scalbln =
      ___scalblnPtr.asFunction<double Function(double, int)>();

  double __scalblnf(
    double __x,
    int __n,
  ) {
    return ___scalblnf(
      __x,
      __n,
    );
  }

  late final ___scalblnfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Int64)>>(
          '__scalblnf');
  late final ___scalblnf =
      ___scalblnfPtr.asFunction<double Function(double, int)>();

  double __scalbn(
    double __x,
    int __n,
  ) {
    return ___scalbn(
      __x,
      __n,
    );
  }

  late final ___scalbnPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Int32)>>(
          '__scalbn');
  late final ___scalbn =
      ___scalbnPtr.asFunction<double Function(double, int)>();

  double __scalbnf(
    double __x,
    int __n,
  ) {
    return ___scalbnf(
      __x,
      __n,
    );
  }

  late final ___scalbnfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Int32)>>(
          '__scalbnf');
  late final ___scalbnf =
      ___scalbnfPtr.asFunction<double Function(double, int)>();

  int __signbit(
    double __value,
  ) {
    return ___signbit(
      __value,
    );
  }

  late final ___signbitPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Double)>>('__signbit');
  late final ___signbit = ___signbitPtr.asFunction<int Function(double)>();

  int __signbitf(
    double __value,
  ) {
    return ___signbitf(
      __value,
    );
  }

  late final ___signbitfPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Float)>>('__signbitf');
  late final ___signbitf = ___signbitfPtr.asFunction<int Function(double)>();

  double __significand(
    double __x,
  ) {
    return ___significand(
      __x,
    );
  }

  late final ___significandPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>(
          '__significand');
  late final ___significand =
      ___significandPtr.asFunction<double Function(double)>();

  double __significandf(
    double __x,
  ) {
    return ___significandf(
      __x,
    );
  }

  late final ___significandfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>(
          '__significandf');
  late final ___significandf =
      ___significandfPtr.asFunction<double Function(double)>();

  double __sin(
    double __x,
  ) {
    return ___sin(
      __x,
    );
  }

  late final ___sinPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('__sin');
  late final ___sin = ___sinPtr.asFunction<double Function(double)>();

  double __sinf(
    double __x,
  ) {
    return ___sinf(
      __x,
    );
  }

  late final ___sinfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('__sinf');
  late final ___sinf = ___sinfPtr.asFunction<double Function(double)>();

  double __sinh(
    double __x,
  ) {
    return ___sinh(
      __x,
    );
  }

  late final ___sinhPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('__sinh');
  late final ___sinh = ___sinhPtr.asFunction<double Function(double)>();

  double __sinhf(
    double __x,
  ) {
    return ___sinhf(
      __x,
    );
  }

  late final ___sinhfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('__sinhf');
  late final ___sinhf = ___sinhfPtr.asFunction<double Function(double)>();

  double __sqrt(
    double __x,
  ) {
    return ___sqrt(
      __x,
    );
  }

  late final ___sqrtPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('__sqrt');
  late final ___sqrt = ___sqrtPtr.asFunction<double Function(double)>();

  double __sqrtf(
    double __x,
  ) {
    return ___sqrtf(
      __x,
    );
  }

  late final ___sqrtfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('__sqrtf');
  late final ___sqrtf = ___sqrtfPtr.asFunction<double Function(double)>();

  ffi.Pointer<ffi.Int8> __stpcpy(
    ffi.Pointer<ffi.Int8> __dest,
    ffi.Pointer<ffi.Int8> __src,
  ) {
    return ___stpcpy(
      __dest,
      __src,
    );
  }

  late final ___stpcpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>>('__stpcpy');
  late final ___stpcpy = ___stpcpyPtr.asFunction<
      ffi.Pointer<ffi.Int8> Function(
          ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>();

  ffi.Pointer<ffi.Int8> __stpncpy(
    ffi.Pointer<ffi.Int8> __dest,
    ffi.Pointer<ffi.Int8> __src,
    int __n,
  ) {
    return ___stpncpy(
      __dest,
      __src,
      __n,
    );
  }

  late final ___stpncpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>, size_t)>>('__stpncpy');
  late final ___stpncpy = ___stpncpyPtr.asFunction<
      ffi.Pointer<ffi.Int8> Function(
          ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>, int)>();

  ffi.Pointer<ffi.Int8> __strtok_r(
    ffi.Pointer<ffi.Int8> __s,
    ffi.Pointer<ffi.Int8> __delim,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> __save_ptr,
  ) {
    return ___strtok_r(
      __s,
      __delim,
      __save_ptr,
    );
  }

  late final ___strtok_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Pointer<ffi.Int8>>)>>('__strtok_r');
  late final ___strtok_r = ___strtok_rPtr.asFunction<
      ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ffi.Int8>,
          ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Pointer<ffi.Int8>>)>();

  double __tan(
    double __x,
  ) {
    return ___tan(
      __x,
    );
  }

  late final ___tanPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('__tan');
  late final ___tan = ___tanPtr.asFunction<double Function(double)>();

  double __tanf(
    double __x,
  ) {
    return ___tanf(
      __x,
    );
  }

  late final ___tanfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('__tanf');
  late final ___tanf = ___tanfPtr.asFunction<double Function(double)>();

  double __tanh(
    double __x,
  ) {
    return ___tanh(
      __x,
    );
  }

  late final ___tanhPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('__tanh');
  late final ___tanh = ___tanhPtr.asFunction<double Function(double)>();

  double __tanhf(
    double __x,
  ) {
    return ___tanhf(
      __x,
    );
  }

  late final ___tanhfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('__tanhf');
  late final ___tanhf = ___tanhfPtr.asFunction<double Function(double)>();

  double __tgamma(
    double arg0,
  ) {
    return ___tgamma(
      arg0,
    );
  }

  late final ___tgammaPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('__tgamma');
  late final ___tgamma = ___tgammaPtr.asFunction<double Function(double)>();

  double __tgammaf(
    double arg0,
  ) {
    return ___tgammaf(
      arg0,
    );
  }

  late final ___tgammafPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('__tgammaf');
  late final ___tgammaf = ___tgammafPtr.asFunction<double Function(double)>();

  double __trunc(
    double __x,
  ) {
    return ___trunc(
      __x,
    );
  }

  late final ___truncPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('__trunc');
  late final ___trunc = ___truncPtr.asFunction<double Function(double)>();

  double __truncf(
    double __x,
  ) {
    return ___truncf(
      __x,
    );
  }

  late final ___truncfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('__truncf');
  late final ___truncf = ___truncfPtr.asFunction<double Function(double)>();

  int __uflow(
    ffi.Pointer<FILE> arg0,
  ) {
    return ___uflow(
      arg0,
    );
  }

  late final ___uflowPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<FILE>)>>(
          '__uflow');
  late final ___uflow =
      ___uflowPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  double __y0(
    double arg0,
  ) {
    return ___y0(
      arg0,
    );
  }

  late final ___y0Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('__y0');
  late final ___y0 = ___y0Ptr.asFunction<double Function(double)>();

  double __y0f(
    double arg0,
  ) {
    return ___y0f(
      arg0,
    );
  }

  late final ___y0fPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('__y0f');
  late final ___y0f = ___y0fPtr.asFunction<double Function(double)>();

  double __y1(
    double arg0,
  ) {
    return ___y1(
      arg0,
    );
  }

  late final ___y1Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('__y1');
  late final ___y1 = ___y1Ptr.asFunction<double Function(double)>();

  double __y1f(
    double arg0,
  ) {
    return ___y1f(
      arg0,
    );
  }

  late final ___y1fPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('__y1f');
  late final ___y1f = ___y1fPtr.asFunction<double Function(double)>();

  double __yn(
    int arg0,
    double arg1,
  ) {
    return ___yn(
      arg0,
      arg1,
    );
  }

  late final ___ynPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Int32, ffi.Double)>>(
          '__yn');
  late final ___yn = ___ynPtr.asFunction<double Function(int, double)>();

  double __ynf(
    int arg0,
    double arg1,
  ) {
    return ___ynf(
      arg0,
      arg1,
    );
  }

  late final ___ynfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Int32, ffi.Float)>>(
          '__ynf');
  late final ___ynf = ___ynfPtr.asFunction<double Function(int, double)>();

  ffi.Pointer<cairo_surface_t> _cairo_boilerplate_get_image_surface(
    ffi.Pointer<cairo_surface_t> src,
    int page,
    int width,
    int height,
  ) {
    return __cairo_boilerplate_get_image_surface(
      src,
      page,
      width,
      height,
    );
  }

  late final __cairo_boilerplate_get_image_surfacePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<cairo_surface_t> Function(
              ffi.Pointer<cairo_surface_t>,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32)>>('_cairo_boilerplate_get_image_surface');
  late final __cairo_boilerplate_get_image_surface =
      __cairo_boilerplate_get_image_surfacePtr.asFunction<
          ffi.Pointer<cairo_surface_t> Function(
              ffi.Pointer<cairo_surface_t>, int, int, int)>();

  int a64l(
    ffi.Pointer<ffi.Int8> __s,
  ) {
    return _a64l(
      __s,
    );
  }

  late final _a64lPtr =
      _lookup<ffi.NativeFunction<ffi.Int64 Function(ffi.Pointer<ffi.Int8>)>>(
          'a64l');
  late final _a64l = _a64lPtr.asFunction<int Function(ffi.Pointer<ffi.Int8>)>();

  void abort() {
    return _abort();
  }

  late final _abortPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('abort');
  late final _abort = _abortPtr.asFunction<void Function()>();

  int abs(
    int __x,
  ) {
    return _abs(
      __x,
    );
  }

  late final _absPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32)>>('abs');
  late final _abs = _absPtr.asFunction<int Function(int)>();

  double acos(
    double __x,
  ) {
    return _acos(
      __x,
    );
  }

  late final _acosPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('acos');
  late final _acos = _acosPtr.asFunction<double Function(double)>();

  double acosf(
    double __x,
  ) {
    return _acosf(
      __x,
    );
  }

  late final _acosfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('acosf');
  late final _acosf = _acosfPtr.asFunction<double Function(double)>();

  double acosh(
    double __x,
  ) {
    return _acosh(
      __x,
    );
  }

  late final _acoshPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('acosh');
  late final _acosh = _acoshPtr.asFunction<double Function(double)>();

  double acoshf(
    double __x,
  ) {
    return _acoshf(
      __x,
    );
  }

  late final _acoshfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('acoshf');
  late final _acoshf = _acoshfPtr.asFunction<double Function(double)>();

  ffi.Pointer<ffi.Void> aligned_alloc(
    int __alignment,
    int __size,
  ) {
    return _aligned_alloc(
      __alignment,
      __size,
    );
  }

  late final _aligned_allocPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(size_t, size_t)>>(
      'aligned_alloc');
  late final _aligned_alloc =
      _aligned_allocPtr.asFunction<ffi.Pointer<ffi.Void> Function(int, int)>();

  ffi.Pointer<ffi.Void> alloca(
    int __size,
  ) {
    return _alloca(
      __size,
    );
  }

  late final _allocaPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(size_t)>>(
          'alloca');
  late final _alloca =
      _allocaPtr.asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  double asin(
    double __x,
  ) {
    return _asin(
      __x,
    );
  }

  late final _asinPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('asin');
  late final _asin = _asinPtr.asFunction<double Function(double)>();

  double asinf(
    double __x,
  ) {
    return _asinf(
      __x,
    );
  }

  late final _asinfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('asinf');
  late final _asinf = _asinfPtr.asFunction<double Function(double)>();

  double asinh(
    double __x,
  ) {
    return _asinh(
      __x,
    );
  }

  late final _asinhPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('asinh');
  late final _asinh = _asinhPtr.asFunction<double Function(double)>();

  double asinhf(
    double __x,
  ) {
    return _asinhf(
      __x,
    );
  }

  late final _asinhfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('asinhf');
  late final _asinhf = _asinhfPtr.asFunction<double Function(double)>();

  int at_quick_exit(
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> __func,
  ) {
    return _at_quick_exit(
      __func,
    );
  }

  late final _at_quick_exitPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>>(
      'at_quick_exit');
  late final _at_quick_exit = _at_quick_exitPtr.asFunction<
      int Function(ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>();

  double atan(
    double __x,
  ) {
    return _atan(
      __x,
    );
  }

  late final _atanPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('atan');
  late final _atan = _atanPtr.asFunction<double Function(double)>();

  double atan2(
    double __y,
    double __x,
  ) {
    return _atan2(
      __y,
      __x,
    );
  }

  late final _atan2Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'atan2');
  late final _atan2 = _atan2Ptr.asFunction<double Function(double, double)>();

  double atan2f(
    double __y,
    double __x,
  ) {
    return _atan2f(
      __y,
      __x,
    );
  }

  late final _atan2fPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>(
          'atan2f');
  late final _atan2f = _atan2fPtr.asFunction<double Function(double, double)>();

  double atanf(
    double __x,
  ) {
    return _atanf(
      __x,
    );
  }

  late final _atanfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('atanf');
  late final _atanf = _atanfPtr.asFunction<double Function(double)>();

  double atanh(
    double __x,
  ) {
    return _atanh(
      __x,
    );
  }

  late final _atanhPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('atanh');
  late final _atanh = _atanhPtr.asFunction<double Function(double)>();

  double atanhf(
    double __x,
  ) {
    return _atanhf(
      __x,
    );
  }

  late final _atanhfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('atanhf');
  late final _atanhf = _atanhfPtr.asFunction<double Function(double)>();

  int atexit(
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> __func,
  ) {
    return _atexit(
      __func,
    );
  }

  late final _atexitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>>('atexit');
  late final _atexit = _atexitPtr.asFunction<
      int Function(ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>();

  double atof(
    ffi.Pointer<ffi.Int8> __nptr,
  ) {
    return _atof(
      __nptr,
    );
  }

  late final _atofPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Pointer<ffi.Int8>)>>(
          'atof');
  late final _atof =
      _atofPtr.asFunction<double Function(ffi.Pointer<ffi.Int8>)>();

  int atoi(
    ffi.Pointer<ffi.Int8> __nptr,
  ) {
    return _atoi(
      __nptr,
    );
  }

  late final _atoiPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Int8>)>>(
          'atoi');
  late final _atoi = _atoiPtr.asFunction<int Function(ffi.Pointer<ffi.Int8>)>();

  int atol(
    ffi.Pointer<ffi.Int8> __nptr,
  ) {
    return _atol(
      __nptr,
    );
  }

  late final _atolPtr =
      _lookup<ffi.NativeFunction<ffi.Int64 Function(ffi.Pointer<ffi.Int8>)>>(
          'atol');
  late final _atol = _atolPtr.asFunction<int Function(ffi.Pointer<ffi.Int8>)>();

  int atoll(
    ffi.Pointer<ffi.Int8> __nptr,
  ) {
    return _atoll(
      __nptr,
    );
  }

  late final _atollPtr =
      _lookup<ffi.NativeFunction<ffi.Int64 Function(ffi.Pointer<ffi.Int8>)>>(
          'atoll');
  late final _atoll =
      _atollPtr.asFunction<int Function(ffi.Pointer<ffi.Int8>)>();

  int bcmp(
    ffi.Pointer<ffi.Void> __s1,
    ffi.Pointer<ffi.Void> __s2,
    int __n,
  ) {
    return _bcmp(
      __s1,
      __s2,
      __n,
    );
  }

  late final _bcmpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, size_t)>>('bcmp');
  late final _bcmp = _bcmpPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  void bcopy(
    ffi.Pointer<ffi.Void> __src,
    ffi.Pointer<ffi.Void> __dest,
    int __n,
  ) {
    return _bcopy(
      __src,
      __dest,
      __n,
    );
  }

  late final _bcopyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, size_t)>>('bcopy');
  late final _bcopy = _bcopyPtr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Void> bsearch(
    ffi.Pointer<ffi.Void> __key,
    ffi.Pointer<ffi.Void> __base,
    int __nmemb,
    int __size,
    __compar_fn_t __compar,
  ) {
    return _bsearch(
      __key,
      __base,
      __nmemb,
      __size,
      __compar,
    );
  }

  late final _bsearchPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              size_t,
              size_t,
              __compar_fn_t)>>('bsearch');
  late final _bsearch = _bsearchPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Void>, int, int, __compar_fn_t)>();

  void bzero(
    ffi.Pointer<ffi.Void> __s,
    int __n,
  ) {
    return _bzero(
      __s,
      __n,
    );
  }

  late final _bzeroPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>, size_t)>>(
      'bzero');
  late final _bzero =
      _bzeroPtr.asFunction<void Function(ffi.Pointer<ffi.Void>, int)>();

  void cairo_append_path(
    ffi.Pointer<cairo_t> cr,
    ffi.Pointer<cairo_path_t> path,
  ) {
    return _cairo_append_path(
      cr,
      path,
    );
  }

  late final _cairo_append_pathPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<cairo_t>,
              ffi.Pointer<cairo_path_t>)>>('cairo_append_path');
  late final _cairo_append_path = _cairo_append_pathPtr.asFunction<
      void Function(ffi.Pointer<cairo_t>, ffi.Pointer<cairo_path_t>)>();

  void cairo_arc(
    ffi.Pointer<cairo_t> cr,
    double xc,
    double yc,
    double radius,
    double angle1,
    double angle2,
  ) {
    return _cairo_arc(
      cr,
      xc,
      yc,
      radius,
      angle1,
      angle2,
    );
  }

  late final _cairo_arcPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<cairo_t>, ffi.Double, ffi.Double,
              ffi.Double, ffi.Double, ffi.Double)>>('cairo_arc');
  late final _cairo_arc = _cairo_arcPtr.asFunction<
      void Function(
          ffi.Pointer<cairo_t>, double, double, double, double, double)>();

  void cairo_arc_negative(
    ffi.Pointer<cairo_t> cr,
    double xc,
    double yc,
    double radius,
    double angle1,
    double angle2,
  ) {
    return _cairo_arc_negative(
      cr,
      xc,
      yc,
      radius,
      angle1,
      angle2,
    );
  }

  late final _cairo_arc_negativePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<cairo_t>, ffi.Double, ffi.Double,
              ffi.Double, ffi.Double, ffi.Double)>>('cairo_arc_negative');
  late final _cairo_arc_negative = _cairo_arc_negativePtr.asFunction<
      void Function(
          ffi.Pointer<cairo_t>, double, double, double, double, double)>();

  int cairo_boilerplate_content(
    int content,
  ) {
    return _cairo_boilerplate_content(
      content,
    );
  }

  late final _cairo_boilerplate_contentPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32)>>(
          'cairo_boilerplate_content');
  late final _cairo_boilerplate_content =
      _cairo_boilerplate_contentPtr.asFunction<int Function(int)>();

  ffi.Pointer<ffi.Int8> cairo_boilerplate_content_name(
    int content,
  ) {
    return _cairo_boilerplate_content_name(
      content,
    );
  }

  late final _cairo_boilerplate_content_namePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int8> Function(ffi.Int32)>>(
          'cairo_boilerplate_content_name');
  late final _cairo_boilerplate_content_name =
      _cairo_boilerplate_content_namePtr
          .asFunction<ffi.Pointer<ffi.Int8> Function(int)>();

  ffi.Pointer<cairo_surface_t> cairo_boilerplate_convert_to_image(
    ffi.Pointer<ffi.Int8> filename,
    int page,
  ) {
    return _cairo_boilerplate_convert_to_image(
      filename,
      page,
    );
  }

  late final _cairo_boilerplate_convert_to_imagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<cairo_surface_t> Function(ffi.Pointer<ffi.Int8>,
              ffi.Int32)>>('cairo_boilerplate_convert_to_image');
  late final _cairo_boilerplate_convert_to_image =
      _cairo_boilerplate_convert_to_imagePtr.asFunction<
          ffi.Pointer<cairo_surface_t> Function(ffi.Pointer<ffi.Int8>, int)>();

  void cairo_boilerplate_fini() {
    return _cairo_boilerplate_fini();
  }

  late final _cairo_boilerplate_finiPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'cairo_boilerplate_fini');
  late final _cairo_boilerplate_fini =
      _cairo_boilerplate_finiPtr.asFunction<void Function()>();

  int cairo_boilerplate_format_from_content(
    int content,
  ) {
    return _cairo_boilerplate_format_from_content(
      content,
    );
  }

  late final _cairo_boilerplate_format_from_contentPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32)>>(
          'cairo_boilerplate_format_from_content');
  late final _cairo_boilerplate_format_from_content =
      _cairo_boilerplate_format_from_contentPtr.asFunction<int Function(int)>();

  void cairo_boilerplate_free_targets(
    ffi.Pointer<ffi.Pointer<cairo_boilerplate_target_t>> targets,
  ) {
    return _cairo_boilerplate_free_targets(
      targets,
    );
  }

  late final _cairo_boilerplate_free_targetsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<ffi.Pointer<cairo_boilerplate_target_t>>)>>(
      'cairo_boilerplate_free_targets');
  late final _cairo_boilerplate_free_targets =
      _cairo_boilerplate_free_targetsPtr.asFunction<
          void Function(
              ffi.Pointer<ffi.Pointer<cairo_boilerplate_target_t>>)>();

  ffi.Pointer<cairo_surface_t> cairo_boilerplate_get_image_surface_from_png(
    ffi.Pointer<ffi.Int8> filename,
    int width,
    int height,
    int flatten,
  ) {
    return _cairo_boilerplate_get_image_surface_from_png(
      filename,
      width,
      height,
      flatten,
    );
  }

  late final _cairo_boilerplate_get_image_surface_from_pngPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<cairo_surface_t> Function(
              ffi.Pointer<ffi.Int8>,
              ffi.Int32,
              ffi.Int32,
              cairo_bool_t)>>('cairo_boilerplate_get_image_surface_from_png');
  late final _cairo_boilerplate_get_image_surface_from_png =
      _cairo_boilerplate_get_image_surface_from_pngPtr.asFunction<
          ffi.Pointer<cairo_surface_t> Function(
              ffi.Pointer<ffi.Int8>, int, int, int)>();

  ffi.Pointer<cairo_boilerplate_target_t> cairo_boilerplate_get_image_target(
    int content,
  ) {
    return _cairo_boilerplate_get_image_target(
      content,
    );
  }

  late final _cairo_boilerplate_get_image_targetPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<cairo_boilerplate_target_t> Function(
              ffi.Int32)>>('cairo_boilerplate_get_image_target');
  late final _cairo_boilerplate_get_image_target =
      _cairo_boilerplate_get_image_targetPtr
          .asFunction<ffi.Pointer<cairo_boilerplate_target_t> Function(int)>();

  ffi.Pointer<cairo_boilerplate_target_t> cairo_boilerplate_get_target_by_name(
    ffi.Pointer<ffi.Int8> name,
    int content,
  ) {
    return _cairo_boilerplate_get_target_by_name(
      name,
      content,
    );
  }

  late final _cairo_boilerplate_get_target_by_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<cairo_boilerplate_target_t> Function(
              ffi.Pointer<ffi.Int8>,
              ffi.Int32)>>('cairo_boilerplate_get_target_by_name');
  late final _cairo_boilerplate_get_target_by_name =
      _cairo_boilerplate_get_target_by_namePtr.asFunction<
          ffi.Pointer<cairo_boilerplate_target_t> Function(
              ffi.Pointer<ffi.Int8>, int)>();

  ffi.Pointer<ffi.Pointer<cairo_boilerplate_target_t>>
      cairo_boilerplate_get_targets(
    ffi.Pointer<ffi.Int32> num_targets,
    ffi.Pointer<cairo_bool_t> limited_targets,
  ) {
    return _cairo_boilerplate_get_targets(
      num_targets,
      limited_targets,
    );
  }

  late final _cairo_boilerplate_get_targetsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Pointer<cairo_boilerplate_target_t>> Function(
              ffi.Pointer<ffi.Int32>,
              ffi.Pointer<cairo_bool_t>)>>('cairo_boilerplate_get_targets');
  late final _cairo_boilerplate_get_targets =
      _cairo_boilerplate_get_targetsPtr.asFunction<
          ffi.Pointer<ffi.Pointer<cairo_boilerplate_target_t>> Function(
              ffi.Pointer<ffi.Int32>, ffi.Pointer<cairo_bool_t>)>();

  ffi.Pointer<cairo_surface_t>
      cairo_boilerplate_image_surface_create_from_ppm_stream(
    ffi.Pointer<FILE> file,
  ) {
    return _cairo_boilerplate_image_surface_create_from_ppm_stream(
      file,
    );
  }

  late final _cairo_boilerplate_image_surface_create_from_ppm_streamPtr =
      _lookup<
              ffi.NativeFunction<
                  ffi.Pointer<cairo_surface_t> Function(ffi.Pointer<FILE>)>>(
          'cairo_boilerplate_image_surface_create_from_ppm_stream');
  late final _cairo_boilerplate_image_surface_create_from_ppm_stream =
      _cairo_boilerplate_image_surface_create_from_ppm_streamPtr.asFunction<
          ffi.Pointer<cairo_surface_t> Function(ffi.Pointer<FILE>)>();

  ffi.Pointer<FILE> cairo_boilerplate_open_any2ppm(
    ffi.Pointer<ffi.Int8> filename,
    int page,
    int flags,
    ffi.Pointer<
            ffi.Pointer<
                ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<FILE>)>>>
        close_cb,
  ) {
    return _cairo_boilerplate_open_any2ppm(
      filename,
      page,
      flags,
      close_cb,
    );
  }

  late final _cairo_boilerplate_open_any2ppmPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<FILE> Function(
                  ffi.Pointer<ffi.Int8>,
                  ffi.Int32,
                  ffi.Uint32,
                  ffi.Pointer<
                      ffi.Pointer<
                          ffi.NativeFunction<
                              ffi.Int32 Function(ffi.Pointer<FILE>)>>>)>>(
      'cairo_boilerplate_open_any2ppm');
  late final _cairo_boilerplate_open_any2ppm =
      _cairo_boilerplate_open_any2ppmPtr.asFunction<
          ffi.Pointer<FILE> Function(
              ffi.Pointer<ffi.Int8>,
              int,
              int,
              ffi.Pointer<
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Int32 Function(ffi.Pointer<FILE>)>>>)>();

  late final ffi.Pointer<cairo_user_data_key_t>
      _cairo_boilerplate_output_basename_key =
      _lookup<cairo_user_data_key_t>('cairo_boilerplate_output_basename_key');

  cairo_user_data_key_t get cairo_boilerplate_output_basename_key =>
      _cairo_boilerplate_output_basename_key.ref;

  ffi.Pointer<cairo_surface_t> cairo_boilerplate_surface_create_in_error(
    int status,
  ) {
    return _cairo_boilerplate_surface_create_in_error(
      status,
    );
  }

  late final _cairo_boilerplate_surface_create_in_errorPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<cairo_surface_t> Function(ffi.Int32)>>(
      'cairo_boilerplate_surface_create_in_error');
  late final _cairo_boilerplate_surface_create_in_error =
      _cairo_boilerplate_surface_create_in_errorPtr
          .asFunction<ffi.Pointer<cairo_surface_t> Function(int)>();

  int cairo_boilerplate_version() {
    return _cairo_boilerplate_version();
  }

  late final _cairo_boilerplate_versionPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function()>>(
          'cairo_boilerplate_version');
  late final _cairo_boilerplate_version =
      _cairo_boilerplate_versionPtr.asFunction<int Function()>();

  ffi.Pointer<ffi.Int8> cairo_boilerplate_version_string() {
    return _cairo_boilerplate_version_string();
  }

  late final _cairo_boilerplate_version_stringPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int8> Function()>>(
          'cairo_boilerplate_version_string');
  late final _cairo_boilerplate_version_string =
      _cairo_boilerplate_version_stringPtr
          .asFunction<ffi.Pointer<ffi.Int8> Function()>();

  void cairo_clip(
    ffi.Pointer<cairo_t> cr,
  ) {
    return _cairo_clip(
      cr,
    );
  }

  late final _cairo_clipPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<cairo_t>)>>(
          'cairo_clip');
  late final _cairo_clip =
      _cairo_clipPtr.asFunction<void Function(ffi.Pointer<cairo_t>)>();

  void cairo_clip_extents(
    ffi.Pointer<cairo_t> cr,
    ffi.Pointer<ffi.Double> x1,
    ffi.Pointer<ffi.Double> y1,
    ffi.Pointer<ffi.Double> x2,
    ffi.Pointer<ffi.Double> y2,
  ) {
    return _cairo_clip_extents(
      cr,
      x1,
      y1,
      x2,
      y2,
    );
  }

  late final _cairo_clip_extentsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<cairo_t>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>>('cairo_clip_extents');
  late final _cairo_clip_extents = _cairo_clip_extentsPtr.asFunction<
      void Function(
          ffi.Pointer<cairo_t>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>)>();

  void cairo_clip_preserve(
    ffi.Pointer<cairo_t> cr,
  ) {
    return _cairo_clip_preserve(
      cr,
    );
  }

  late final _cairo_clip_preservePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<cairo_t>)>>(
          'cairo_clip_preserve');
  late final _cairo_clip_preserve =
      _cairo_clip_preservePtr.asFunction<void Function(ffi.Pointer<cairo_t>)>();

  /// XXX: NYI
  /// cairo_public void
  /// cairo_stroke_to_path (cairo_t *cr);
  void cairo_close_path(
    ffi.Pointer<cairo_t> cr,
  ) {
    return _cairo_close_path(
      cr,
    );
  }

  late final _cairo_close_pathPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<cairo_t>)>>(
          'cairo_close_path');
  late final _cairo_close_path =
      _cairo_close_pathPtr.asFunction<void Function(ffi.Pointer<cairo_t>)>();

  ffi.Pointer<cairo_rectangle_list_t> cairo_copy_clip_rectangle_list(
    ffi.Pointer<cairo_t> cr,
  ) {
    return _cairo_copy_clip_rectangle_list(
      cr,
    );
  }

  late final _cairo_copy_clip_rectangle_listPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<cairo_rectangle_list_t> Function(
              ffi.Pointer<cairo_t>)>>('cairo_copy_clip_rectangle_list');
  late final _cairo_copy_clip_rectangle_list =
      _cairo_copy_clip_rectangle_listPtr.asFunction<
          ffi.Pointer<cairo_rectangle_list_t> Function(ffi.Pointer<cairo_t>)>();

  void cairo_copy_page(
    ffi.Pointer<cairo_t> cr,
  ) {
    return _cairo_copy_page(
      cr,
    );
  }

  late final _cairo_copy_pagePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<cairo_t>)>>(
          'cairo_copy_page');
  late final _cairo_copy_page =
      _cairo_copy_pagePtr.asFunction<void Function(ffi.Pointer<cairo_t>)>();

  ffi.Pointer<cairo_path_t> cairo_copy_path(
    ffi.Pointer<cairo_t> cr,
  ) {
    return _cairo_copy_path(
      cr,
    );
  }

  late final _cairo_copy_pathPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<cairo_path_t> Function(
              ffi.Pointer<cairo_t>)>>('cairo_copy_path');
  late final _cairo_copy_path = _cairo_copy_pathPtr
      .asFunction<ffi.Pointer<cairo_path_t> Function(ffi.Pointer<cairo_t>)>();

  ffi.Pointer<cairo_path_t> cairo_copy_path_flat(
    ffi.Pointer<cairo_t> cr,
  ) {
    return _cairo_copy_path_flat(
      cr,
    );
  }

  late final _cairo_copy_path_flatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<cairo_path_t> Function(
              ffi.Pointer<cairo_t>)>>('cairo_copy_path_flat');
  late final _cairo_copy_path_flat = _cairo_copy_path_flatPtr
      .asFunction<ffi.Pointer<cairo_path_t> Function(ffi.Pointer<cairo_t>)>();

  /// Functions for manipulating state objects
  ffi.Pointer<cairo_t> cairo_create(
    ffi.Pointer<cairo_surface_t> target,
  ) {
    return _cairo_create(
      target,
    );
  }

  late final _cairo_createPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<cairo_t> Function(
              ffi.Pointer<cairo_surface_t>)>>('cairo_create');
  late final _cairo_create = _cairo_createPtr.asFunction<
      ffi.Pointer<cairo_t> Function(ffi.Pointer<cairo_surface_t>)>();

  void cairo_curve_to(
    ffi.Pointer<cairo_t> cr,
    double x1,
    double y1,
    double x2,
    double y2,
    double x3,
    double y3,
  ) {
    return _cairo_curve_to(
      cr,
      x1,
      y1,
      x2,
      y2,
      x3,
      y3,
    );
  }

  late final _cairo_curve_toPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<cairo_t>,
              ffi.Double,
              ffi.Double,
              ffi.Double,
              ffi.Double,
              ffi.Double,
              ffi.Double)>>('cairo_curve_to');
  late final _cairo_curve_to = _cairo_curve_toPtr.asFunction<
      void Function(ffi.Pointer<cairo_t>, double, double, double, double,
          double, double)>();

  /// Functions to be used while debugging (not intended for use in production code)
  void cairo_debug_reset_static_data() {
    return _cairo_debug_reset_static_data();
  }

  late final _cairo_debug_reset_static_dataPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'cairo_debug_reset_static_data');
  late final _cairo_debug_reset_static_data =
      _cairo_debug_reset_static_dataPtr.asFunction<void Function()>();

  void cairo_destroy(
    ffi.Pointer<cairo_t> cr,
  ) {
    return _cairo_destroy(
      cr,
    );
  }

  late final _cairo_destroyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<cairo_t>)>>(
          'cairo_destroy');
  late final _cairo_destroy =
      _cairo_destroyPtr.asFunction<void Function(ffi.Pointer<cairo_t>)>();

  int cairo_device_acquire(
    ffi.Pointer<cairo_device_t> device,
  ) {
    return _cairo_device_acquire(
      device,
    );
  }

  late final _cairo_device_acquirePtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<cairo_device_t>)>>(
      'cairo_device_acquire');
  late final _cairo_device_acquire = _cairo_device_acquirePtr
      .asFunction<int Function(ffi.Pointer<cairo_device_t>)>();

  void cairo_device_destroy(
    ffi.Pointer<cairo_device_t> device,
  ) {
    return _cairo_device_destroy(
      device,
    );
  }

  late final _cairo_device_destroyPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<cairo_device_t>)>>(
      'cairo_device_destroy');
  late final _cairo_device_destroy = _cairo_device_destroyPtr
      .asFunction<void Function(ffi.Pointer<cairo_device_t>)>();

  void cairo_device_finish(
    ffi.Pointer<cairo_device_t> device,
  ) {
    return _cairo_device_finish(
      device,
    );
  }

  late final _cairo_device_finishPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<cairo_device_t>)>>(
      'cairo_device_finish');
  late final _cairo_device_finish = _cairo_device_finishPtr
      .asFunction<void Function(ffi.Pointer<cairo_device_t>)>();

  void cairo_device_flush(
    ffi.Pointer<cairo_device_t> device,
  ) {
    return _cairo_device_flush(
      device,
    );
  }

  late final _cairo_device_flushPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<cairo_device_t>)>>(
      'cairo_device_flush');
  late final _cairo_device_flush = _cairo_device_flushPtr
      .asFunction<void Function(ffi.Pointer<cairo_device_t>)>();

  int cairo_device_get_reference_count(
    ffi.Pointer<cairo_device_t> device,
  ) {
    return _cairo_device_get_reference_count(
      device,
    );
  }

  late final _cairo_device_get_reference_countPtr = _lookup<
          ffi.NativeFunction<ffi.Uint32 Function(ffi.Pointer<cairo_device_t>)>>(
      'cairo_device_get_reference_count');
  late final _cairo_device_get_reference_count =
      _cairo_device_get_reference_countPtr
          .asFunction<int Function(ffi.Pointer<cairo_device_t>)>();

  int cairo_device_get_type(
    ffi.Pointer<cairo_device_t> device,
  ) {
    return _cairo_device_get_type(
      device,
    );
  }

  late final _cairo_device_get_typePtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<cairo_device_t>)>>(
      'cairo_device_get_type');
  late final _cairo_device_get_type = _cairo_device_get_typePtr
      .asFunction<int Function(ffi.Pointer<cairo_device_t>)>();

  ffi.Pointer<ffi.Void> cairo_device_get_user_data(
    ffi.Pointer<cairo_device_t> device,
    ffi.Pointer<cairo_user_data_key_t> key,
  ) {
    return _cairo_device_get_user_data(
      device,
      key,
    );
  }

  late final _cairo_device_get_user_dataPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Void> Function(ffi.Pointer<cairo_device_t>,
                  ffi.Pointer<cairo_user_data_key_t>)>>(
      'cairo_device_get_user_data');
  late final _cairo_device_get_user_data =
      _cairo_device_get_user_dataPtr.asFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<cairo_device_t>,
              ffi.Pointer<cairo_user_data_key_t>)>();

  double cairo_device_observer_elapsed(
    ffi.Pointer<cairo_device_t> device,
  ) {
    return _cairo_device_observer_elapsed(
      device,
    );
  }

  late final _cairo_device_observer_elapsedPtr = _lookup<
          ffi.NativeFunction<ffi.Double Function(ffi.Pointer<cairo_device_t>)>>(
      'cairo_device_observer_elapsed');
  late final _cairo_device_observer_elapsed = _cairo_device_observer_elapsedPtr
      .asFunction<double Function(ffi.Pointer<cairo_device_t>)>();

  double cairo_device_observer_fill_elapsed(
    ffi.Pointer<cairo_device_t> device,
  ) {
    return _cairo_device_observer_fill_elapsed(
      device,
    );
  }

  late final _cairo_device_observer_fill_elapsedPtr = _lookup<
          ffi.NativeFunction<ffi.Double Function(ffi.Pointer<cairo_device_t>)>>(
      'cairo_device_observer_fill_elapsed');
  late final _cairo_device_observer_fill_elapsed =
      _cairo_device_observer_fill_elapsedPtr
          .asFunction<double Function(ffi.Pointer<cairo_device_t>)>();

  double cairo_device_observer_glyphs_elapsed(
    ffi.Pointer<cairo_device_t> device,
  ) {
    return _cairo_device_observer_glyphs_elapsed(
      device,
    );
  }

  late final _cairo_device_observer_glyphs_elapsedPtr = _lookup<
          ffi.NativeFunction<ffi.Double Function(ffi.Pointer<cairo_device_t>)>>(
      'cairo_device_observer_glyphs_elapsed');
  late final _cairo_device_observer_glyphs_elapsed =
      _cairo_device_observer_glyphs_elapsedPtr
          .asFunction<double Function(ffi.Pointer<cairo_device_t>)>();

  double cairo_device_observer_mask_elapsed(
    ffi.Pointer<cairo_device_t> device,
  ) {
    return _cairo_device_observer_mask_elapsed(
      device,
    );
  }

  late final _cairo_device_observer_mask_elapsedPtr = _lookup<
          ffi.NativeFunction<ffi.Double Function(ffi.Pointer<cairo_device_t>)>>(
      'cairo_device_observer_mask_elapsed');
  late final _cairo_device_observer_mask_elapsed =
      _cairo_device_observer_mask_elapsedPtr
          .asFunction<double Function(ffi.Pointer<cairo_device_t>)>();

  double cairo_device_observer_paint_elapsed(
    ffi.Pointer<cairo_device_t> device,
  ) {
    return _cairo_device_observer_paint_elapsed(
      device,
    );
  }

  late final _cairo_device_observer_paint_elapsedPtr = _lookup<
          ffi.NativeFunction<ffi.Double Function(ffi.Pointer<cairo_device_t>)>>(
      'cairo_device_observer_paint_elapsed');
  late final _cairo_device_observer_paint_elapsed =
      _cairo_device_observer_paint_elapsedPtr
          .asFunction<double Function(ffi.Pointer<cairo_device_t>)>();

  int cairo_device_observer_print(
    ffi.Pointer<cairo_device_t> device,
    cairo_write_func_t write_func,
    ffi.Pointer<ffi.Void> closure,
  ) {
    return _cairo_device_observer_print(
      device,
      write_func,
      closure,
    );
  }

  late final _cairo_device_observer_printPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<cairo_device_t>, cairo_write_func_t,
              ffi.Pointer<ffi.Void>)>>('cairo_device_observer_print');
  late final _cairo_device_observer_print =
      _cairo_device_observer_printPtr.asFunction<
          int Function(ffi.Pointer<cairo_device_t>, cairo_write_func_t,
              ffi.Pointer<ffi.Void>)>();

  double cairo_device_observer_stroke_elapsed(
    ffi.Pointer<cairo_device_t> device,
  ) {
    return _cairo_device_observer_stroke_elapsed(
      device,
    );
  }

  late final _cairo_device_observer_stroke_elapsedPtr = _lookup<
          ffi.NativeFunction<ffi.Double Function(ffi.Pointer<cairo_device_t>)>>(
      'cairo_device_observer_stroke_elapsed');
  late final _cairo_device_observer_stroke_elapsed =
      _cairo_device_observer_stroke_elapsedPtr
          .asFunction<double Function(ffi.Pointer<cairo_device_t>)>();

  /// Backend device manipulation
  ffi.Pointer<cairo_device_t> cairo_device_reference(
    ffi.Pointer<cairo_device_t> device,
  ) {
    return _cairo_device_reference(
      device,
    );
  }

  late final _cairo_device_referencePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<cairo_device_t> Function(
              ffi.Pointer<cairo_device_t>)>>('cairo_device_reference');
  late final _cairo_device_reference = _cairo_device_referencePtr.asFunction<
      ffi.Pointer<cairo_device_t> Function(ffi.Pointer<cairo_device_t>)>();

  void cairo_device_release(
    ffi.Pointer<cairo_device_t> device,
  ) {
    return _cairo_device_release(
      device,
    );
  }

  late final _cairo_device_releasePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<cairo_device_t>)>>(
      'cairo_device_release');
  late final _cairo_device_release = _cairo_device_releasePtr
      .asFunction<void Function(ffi.Pointer<cairo_device_t>)>();

  int cairo_device_set_user_data(
    ffi.Pointer<cairo_device_t> device,
    ffi.Pointer<cairo_user_data_key_t> key,
    ffi.Pointer<ffi.Void> user_data,
    cairo_destroy_func_t destroy,
  ) {
    return _cairo_device_set_user_data(
      device,
      key,
      user_data,
      destroy,
    );
  }

  late final _cairo_device_set_user_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<cairo_device_t>,
              ffi.Pointer<cairo_user_data_key_t>,
              ffi.Pointer<ffi.Void>,
              cairo_destroy_func_t)>>('cairo_device_set_user_data');
  late final _cairo_device_set_user_data =
      _cairo_device_set_user_dataPtr.asFunction<
          int Function(
              ffi.Pointer<cairo_device_t>,
              ffi.Pointer<cairo_user_data_key_t>,
              ffi.Pointer<ffi.Void>,
              cairo_destroy_func_t)>();

  int cairo_device_status(
    ffi.Pointer<cairo_device_t> device,
  ) {
    return _cairo_device_status(
      device,
    );
  }

  late final _cairo_device_statusPtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<cairo_device_t>)>>(
      'cairo_device_status');
  late final _cairo_device_status = _cairo_device_statusPtr
      .asFunction<int Function(ffi.Pointer<cairo_device_t>)>();

  void cairo_device_to_user(
    ffi.Pointer<cairo_t> cr,
    ffi.Pointer<ffi.Double> x,
    ffi.Pointer<ffi.Double> y,
  ) {
    return _cairo_device_to_user(
      cr,
      x,
      y,
    );
  }

  late final _cairo_device_to_userPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<cairo_t>, ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>>('cairo_device_to_user');
  late final _cairo_device_to_user = _cairo_device_to_userPtr.asFunction<
      void Function(ffi.Pointer<cairo_t>, ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>)>();

  void cairo_device_to_user_distance(
    ffi.Pointer<cairo_t> cr,
    ffi.Pointer<ffi.Double> dx,
    ffi.Pointer<ffi.Double> dy,
  ) {
    return _cairo_device_to_user_distance(
      cr,
      dx,
      dy,
    );
  }

  late final _cairo_device_to_user_distancePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<cairo_t>, ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>>('cairo_device_to_user_distance');
  late final _cairo_device_to_user_distance =
      _cairo_device_to_user_distancePtr.asFunction<
          void Function(ffi.Pointer<cairo_t>, ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>();

  void cairo_fill(
    ffi.Pointer<cairo_t> cr,
  ) {
    return _cairo_fill(
      cr,
    );
  }

  late final _cairo_fillPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<cairo_t>)>>(
          'cairo_fill');
  late final _cairo_fill =
      _cairo_fillPtr.asFunction<void Function(ffi.Pointer<cairo_t>)>();

  void cairo_fill_extents(
    ffi.Pointer<cairo_t> cr,
    ffi.Pointer<ffi.Double> x1,
    ffi.Pointer<ffi.Double> y1,
    ffi.Pointer<ffi.Double> x2,
    ffi.Pointer<ffi.Double> y2,
  ) {
    return _cairo_fill_extents(
      cr,
      x1,
      y1,
      x2,
      y2,
    );
  }

  late final _cairo_fill_extentsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<cairo_t>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>>('cairo_fill_extents');
  late final _cairo_fill_extents = _cairo_fill_extentsPtr.asFunction<
      void Function(
          ffi.Pointer<cairo_t>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>)>();

  void cairo_fill_preserve(
    ffi.Pointer<cairo_t> cr,
  ) {
    return _cairo_fill_preserve(
      cr,
    );
  }

  late final _cairo_fill_preservePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<cairo_t>)>>(
          'cairo_fill_preserve');
  late final _cairo_fill_preserve =
      _cairo_fill_preservePtr.asFunction<void Function(ffi.Pointer<cairo_t>)>();

  void cairo_font_extents(
    ffi.Pointer<cairo_t> cr,
    ffi.Pointer<cairo_font_extents_t> extents,
  ) {
    return _cairo_font_extents(
      cr,
      extents,
    );
  }

  late final _cairo_font_extentsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<cairo_t>,
              ffi.Pointer<cairo_font_extents_t>)>>('cairo_font_extents');
  late final _cairo_font_extents = _cairo_font_extentsPtr.asFunction<
      void Function(ffi.Pointer<cairo_t>, ffi.Pointer<cairo_font_extents_t>)>();

  void cairo_font_face_destroy(
    ffi.Pointer<cairo_font_face_t> font_face,
  ) {
    return _cairo_font_face_destroy(
      font_face,
    );
  }

  late final _cairo_font_face_destroyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<cairo_font_face_t>)>>('cairo_font_face_destroy');
  late final _cairo_font_face_destroy = _cairo_font_face_destroyPtr
      .asFunction<void Function(ffi.Pointer<cairo_font_face_t>)>();

  int cairo_font_face_get_reference_count(
    ffi.Pointer<cairo_font_face_t> font_face,
  ) {
    return _cairo_font_face_get_reference_count(
      font_face,
    );
  }

  late final _cairo_font_face_get_reference_countPtr = _lookup<
          ffi.NativeFunction<
              ffi.Uint32 Function(ffi.Pointer<cairo_font_face_t>)>>(
      'cairo_font_face_get_reference_count');
  late final _cairo_font_face_get_reference_count =
      _cairo_font_face_get_reference_countPtr
          .asFunction<int Function(ffi.Pointer<cairo_font_face_t>)>();

  int cairo_font_face_get_type(
    ffi.Pointer<cairo_font_face_t> font_face,
  ) {
    return _cairo_font_face_get_type(
      font_face,
    );
  }

  late final _cairo_font_face_get_typePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<cairo_font_face_t>)>>('cairo_font_face_get_type');
  late final _cairo_font_face_get_type = _cairo_font_face_get_typePtr
      .asFunction<int Function(ffi.Pointer<cairo_font_face_t>)>();

  ffi.Pointer<ffi.Void> cairo_font_face_get_user_data(
    ffi.Pointer<cairo_font_face_t> font_face,
    ffi.Pointer<cairo_user_data_key_t> key,
  ) {
    return _cairo_font_face_get_user_data(
      font_face,
      key,
    );
  }

  late final _cairo_font_face_get_user_dataPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Void> Function(ffi.Pointer<cairo_font_face_t>,
                  ffi.Pointer<cairo_user_data_key_t>)>>(
      'cairo_font_face_get_user_data');
  late final _cairo_font_face_get_user_data =
      _cairo_font_face_get_user_dataPtr.asFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<cairo_font_face_t>,
              ffi.Pointer<cairo_user_data_key_t>)>();

  /// Generic identifier for a font style
  ffi.Pointer<cairo_font_face_t> cairo_font_face_reference(
    ffi.Pointer<cairo_font_face_t> font_face,
  ) {
    return _cairo_font_face_reference(
      font_face,
    );
  }

  late final _cairo_font_face_referencePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<cairo_font_face_t> Function(
              ffi.Pointer<cairo_font_face_t>)>>('cairo_font_face_reference');
  late final _cairo_font_face_reference =
      _cairo_font_face_referencePtr.asFunction<
          ffi.Pointer<cairo_font_face_t> Function(
              ffi.Pointer<cairo_font_face_t>)>();

  int cairo_font_face_set_user_data(
    ffi.Pointer<cairo_font_face_t> font_face,
    ffi.Pointer<cairo_user_data_key_t> key,
    ffi.Pointer<ffi.Void> user_data,
    cairo_destroy_func_t destroy,
  ) {
    return _cairo_font_face_set_user_data(
      font_face,
      key,
      user_data,
      destroy,
    );
  }

  late final _cairo_font_face_set_user_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<cairo_font_face_t>,
              ffi.Pointer<cairo_user_data_key_t>,
              ffi.Pointer<ffi.Void>,
              cairo_destroy_func_t)>>('cairo_font_face_set_user_data');
  late final _cairo_font_face_set_user_data =
      _cairo_font_face_set_user_dataPtr.asFunction<
          int Function(
              ffi.Pointer<cairo_font_face_t>,
              ffi.Pointer<cairo_user_data_key_t>,
              ffi.Pointer<ffi.Void>,
              cairo_destroy_func_t)>();

  int cairo_font_face_status(
    ffi.Pointer<cairo_font_face_t> font_face,
  ) {
    return _cairo_font_face_status(
      font_face,
    );
  }

  late final _cairo_font_face_statusPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<cairo_font_face_t>)>>('cairo_font_face_status');
  late final _cairo_font_face_status = _cairo_font_face_statusPtr
      .asFunction<int Function(ffi.Pointer<cairo_font_face_t>)>();

  ffi.Pointer<cairo_font_options_t> cairo_font_options_copy(
    ffi.Pointer<cairo_font_options_t> original,
  ) {
    return _cairo_font_options_copy(
      original,
    );
  }

  late final _cairo_font_options_copyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<cairo_font_options_t> Function(
              ffi.Pointer<cairo_font_options_t>)>>('cairo_font_options_copy');
  late final _cairo_font_options_copy = _cairo_font_options_copyPtr.asFunction<
      ffi.Pointer<cairo_font_options_t> Function(
          ffi.Pointer<cairo_font_options_t>)>();

  ffi.Pointer<cairo_font_options_t> cairo_font_options_create() {
    return _cairo_font_options_create();
  }

  late final _cairo_font_options_createPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<cairo_font_options_t> Function()>>(
          'cairo_font_options_create');
  late final _cairo_font_options_create = _cairo_font_options_createPtr
      .asFunction<ffi.Pointer<cairo_font_options_t> Function()>();

  void cairo_font_options_destroy(
    ffi.Pointer<cairo_font_options_t> options,
  ) {
    return _cairo_font_options_destroy(
      options,
    );
  }

  late final _cairo_font_options_destroyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<cairo_font_options_t>)>>(
      'cairo_font_options_destroy');
  late final _cairo_font_options_destroy = _cairo_font_options_destroyPtr
      .asFunction<void Function(ffi.Pointer<cairo_font_options_t>)>();

  int cairo_font_options_equal(
    ffi.Pointer<cairo_font_options_t> options,
    ffi.Pointer<cairo_font_options_t> other,
  ) {
    return _cairo_font_options_equal(
      options,
      other,
    );
  }

  late final _cairo_font_options_equalPtr = _lookup<
      ffi.NativeFunction<
          cairo_bool_t Function(ffi.Pointer<cairo_font_options_t>,
              ffi.Pointer<cairo_font_options_t>)>>('cairo_font_options_equal');
  late final _cairo_font_options_equal =
      _cairo_font_options_equalPtr.asFunction<
          int Function(ffi.Pointer<cairo_font_options_t>,
              ffi.Pointer<cairo_font_options_t>)>();

  int cairo_font_options_get_antialias(
    ffi.Pointer<cairo_font_options_t> options,
  ) {
    return _cairo_font_options_get_antialias(
      options,
    );
  }

  late final _cairo_font_options_get_antialiasPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<cairo_font_options_t>)>>(
      'cairo_font_options_get_antialias');
  late final _cairo_font_options_get_antialias =
      _cairo_font_options_get_antialiasPtr
          .asFunction<int Function(ffi.Pointer<cairo_font_options_t>)>();

  int cairo_font_options_get_hint_metrics(
    ffi.Pointer<cairo_font_options_t> options,
  ) {
    return _cairo_font_options_get_hint_metrics(
      options,
    );
  }

  late final _cairo_font_options_get_hint_metricsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<cairo_font_options_t>)>>(
      'cairo_font_options_get_hint_metrics');
  late final _cairo_font_options_get_hint_metrics =
      _cairo_font_options_get_hint_metricsPtr
          .asFunction<int Function(ffi.Pointer<cairo_font_options_t>)>();

  int cairo_font_options_get_hint_style(
    ffi.Pointer<cairo_font_options_t> options,
  ) {
    return _cairo_font_options_get_hint_style(
      options,
    );
  }

  late final _cairo_font_options_get_hint_stylePtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<cairo_font_options_t>)>>(
      'cairo_font_options_get_hint_style');
  late final _cairo_font_options_get_hint_style =
      _cairo_font_options_get_hint_stylePtr
          .asFunction<int Function(ffi.Pointer<cairo_font_options_t>)>();

  int cairo_font_options_get_subpixel_order(
    ffi.Pointer<cairo_font_options_t> options,
  ) {
    return _cairo_font_options_get_subpixel_order(
      options,
    );
  }

  late final _cairo_font_options_get_subpixel_orderPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<cairo_font_options_t>)>>(
      'cairo_font_options_get_subpixel_order');
  late final _cairo_font_options_get_subpixel_order =
      _cairo_font_options_get_subpixel_orderPtr
          .asFunction<int Function(ffi.Pointer<cairo_font_options_t>)>();

  ffi.Pointer<ffi.Int8> cairo_font_options_get_variations(
    ffi.Pointer<cairo_font_options_t> options,
  ) {
    return _cairo_font_options_get_variations(
      options,
    );
  }

  late final _cairo_font_options_get_variationsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Int8> Function(
                  ffi.Pointer<cairo_font_options_t>)>>(
      'cairo_font_options_get_variations');
  late final _cairo_font_options_get_variations =
      _cairo_font_options_get_variationsPtr.asFunction<
          ffi.Pointer<ffi.Int8> Function(ffi.Pointer<cairo_font_options_t>)>();

  int cairo_font_options_hash(
    ffi.Pointer<cairo_font_options_t> options,
  ) {
    return _cairo_font_options_hash(
      options,
    );
  }

  late final _cairo_font_options_hashPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint64 Function(
              ffi.Pointer<cairo_font_options_t>)>>('cairo_font_options_hash');
  late final _cairo_font_options_hash = _cairo_font_options_hashPtr
      .asFunction<int Function(ffi.Pointer<cairo_font_options_t>)>();

  void cairo_font_options_merge(
    ffi.Pointer<cairo_font_options_t> options,
    ffi.Pointer<cairo_font_options_t> other,
  ) {
    return _cairo_font_options_merge(
      options,
      other,
    );
  }

  late final _cairo_font_options_mergePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<cairo_font_options_t>,
              ffi.Pointer<cairo_font_options_t>)>>('cairo_font_options_merge');
  late final _cairo_font_options_merge =
      _cairo_font_options_mergePtr.asFunction<
          void Function(ffi.Pointer<cairo_font_options_t>,
              ffi.Pointer<cairo_font_options_t>)>();

  void cairo_font_options_set_antialias(
    ffi.Pointer<cairo_font_options_t> options,
    int antialias,
  ) {
    return _cairo_font_options_set_antialias(
      options,
      antialias,
    );
  }

  late final _cairo_font_options_set_antialiasPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<cairo_font_options_t>,
              ffi.Int32)>>('cairo_font_options_set_antialias');
  late final _cairo_font_options_set_antialias =
      _cairo_font_options_set_antialiasPtr
          .asFunction<void Function(ffi.Pointer<cairo_font_options_t>, int)>();

  void cairo_font_options_set_hint_metrics(
    ffi.Pointer<cairo_font_options_t> options,
    int hint_metrics,
  ) {
    return _cairo_font_options_set_hint_metrics(
      options,
      hint_metrics,
    );
  }

  late final _cairo_font_options_set_hint_metricsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<cairo_font_options_t>,
              ffi.Int32)>>('cairo_font_options_set_hint_metrics');
  late final _cairo_font_options_set_hint_metrics =
      _cairo_font_options_set_hint_metricsPtr
          .asFunction<void Function(ffi.Pointer<cairo_font_options_t>, int)>();

  void cairo_font_options_set_hint_style(
    ffi.Pointer<cairo_font_options_t> options,
    int hint_style,
  ) {
    return _cairo_font_options_set_hint_style(
      options,
      hint_style,
    );
  }

  late final _cairo_font_options_set_hint_stylePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<cairo_font_options_t>,
              ffi.Int32)>>('cairo_font_options_set_hint_style');
  late final _cairo_font_options_set_hint_style =
      _cairo_font_options_set_hint_stylePtr
          .asFunction<void Function(ffi.Pointer<cairo_font_options_t>, int)>();

  void cairo_font_options_set_subpixel_order(
    ffi.Pointer<cairo_font_options_t> options,
    int subpixel_order,
  ) {
    return _cairo_font_options_set_subpixel_order(
      options,
      subpixel_order,
    );
  }

  late final _cairo_font_options_set_subpixel_orderPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<cairo_font_options_t>,
              ffi.Int32)>>('cairo_font_options_set_subpixel_order');
  late final _cairo_font_options_set_subpixel_order =
      _cairo_font_options_set_subpixel_orderPtr
          .asFunction<void Function(ffi.Pointer<cairo_font_options_t>, int)>();

  void cairo_font_options_set_variations(
    ffi.Pointer<cairo_font_options_t> options,
    ffi.Pointer<ffi.Int8> variations,
  ) {
    return _cairo_font_options_set_variations(
      options,
      variations,
    );
  }

  late final _cairo_font_options_set_variationsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<cairo_font_options_t>,
              ffi.Pointer<ffi.Int8>)>>('cairo_font_options_set_variations');
  late final _cairo_font_options_set_variations =
      _cairo_font_options_set_variationsPtr.asFunction<
          void Function(
              ffi.Pointer<cairo_font_options_t>, ffi.Pointer<ffi.Int8>)>();

  int cairo_font_options_status(
    ffi.Pointer<cairo_font_options_t> options,
  ) {
    return _cairo_font_options_status(
      options,
    );
  }

  late final _cairo_font_options_statusPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<cairo_font_options_t>)>>('cairo_font_options_status');
  late final _cairo_font_options_status = _cairo_font_options_statusPtr
      .asFunction<int Function(ffi.Pointer<cairo_font_options_t>)>();

  int cairo_format_stride_for_width(
    int format,
    int width,
  ) {
    return _cairo_format_stride_for_width(
      format,
      width,
    );
  }

  late final _cairo_format_stride_for_widthPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32, ffi.Int32)>>(
          'cairo_format_stride_for_width');
  late final _cairo_format_stride_for_width =
      _cairo_format_stride_for_widthPtr.asFunction<int Function(int, int)>();

  int cairo_get_antialias(
    ffi.Pointer<cairo_t> cr,
  ) {
    return _cairo_get_antialias(
      cr,
    );
  }

  late final _cairo_get_antialiasPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<cairo_t>)>>(
          'cairo_get_antialias');
  late final _cairo_get_antialias =
      _cairo_get_antialiasPtr.asFunction<int Function(ffi.Pointer<cairo_t>)>();

  void cairo_get_current_point(
    ffi.Pointer<cairo_t> cr,
    ffi.Pointer<ffi.Double> x,
    ffi.Pointer<ffi.Double> y,
  ) {
    return _cairo_get_current_point(
      cr,
      x,
      y,
    );
  }

  late final _cairo_get_current_pointPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<cairo_t>, ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>>('cairo_get_current_point');
  late final _cairo_get_current_point = _cairo_get_current_pointPtr.asFunction<
      void Function(ffi.Pointer<cairo_t>, ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>)>();

  void cairo_get_dash(
    ffi.Pointer<cairo_t> cr,
    ffi.Pointer<ffi.Double> dashes,
    ffi.Pointer<ffi.Double> offset,
  ) {
    return _cairo_get_dash(
      cr,
      dashes,
      offset,
    );
  }

  late final _cairo_get_dashPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<cairo_t>, ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>>('cairo_get_dash');
  late final _cairo_get_dash = _cairo_get_dashPtr.asFunction<
      void Function(ffi.Pointer<cairo_t>, ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>)>();

  int cairo_get_dash_count(
    ffi.Pointer<cairo_t> cr,
  ) {
    return _cairo_get_dash_count(
      cr,
    );
  }

  late final _cairo_get_dash_countPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<cairo_t>)>>(
          'cairo_get_dash_count');
  late final _cairo_get_dash_count =
      _cairo_get_dash_countPtr.asFunction<int Function(ffi.Pointer<cairo_t>)>();

  int cairo_get_fill_rule(
    ffi.Pointer<cairo_t> cr,
  ) {
    return _cairo_get_fill_rule(
      cr,
    );
  }

  late final _cairo_get_fill_rulePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<cairo_t>)>>(
          'cairo_get_fill_rule');
  late final _cairo_get_fill_rule =
      _cairo_get_fill_rulePtr.asFunction<int Function(ffi.Pointer<cairo_t>)>();

  ffi.Pointer<cairo_font_face_t> cairo_get_font_face(
    ffi.Pointer<cairo_t> cr,
  ) {
    return _cairo_get_font_face(
      cr,
    );
  }

  late final _cairo_get_font_facePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<cairo_font_face_t> Function(
              ffi.Pointer<cairo_t>)>>('cairo_get_font_face');
  late final _cairo_get_font_face = _cairo_get_font_facePtr.asFunction<
      ffi.Pointer<cairo_font_face_t> Function(ffi.Pointer<cairo_t>)>();

  void cairo_get_font_matrix(
    ffi.Pointer<cairo_t> cr,
    ffi.Pointer<cairo_matrix_t> matrix,
  ) {
    return _cairo_get_font_matrix(
      cr,
      matrix,
    );
  }

  late final _cairo_get_font_matrixPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<cairo_t>,
              ffi.Pointer<cairo_matrix_t>)>>('cairo_get_font_matrix');
  late final _cairo_get_font_matrix = _cairo_get_font_matrixPtr.asFunction<
      void Function(ffi.Pointer<cairo_t>, ffi.Pointer<cairo_matrix_t>)>();

  void cairo_get_font_options(
    ffi.Pointer<cairo_t> cr,
    ffi.Pointer<cairo_font_options_t> options,
  ) {
    return _cairo_get_font_options(
      cr,
      options,
    );
  }

  late final _cairo_get_font_optionsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<cairo_t>,
              ffi.Pointer<cairo_font_options_t>)>>('cairo_get_font_options');
  late final _cairo_get_font_options = _cairo_get_font_optionsPtr.asFunction<
      void Function(ffi.Pointer<cairo_t>, ffi.Pointer<cairo_font_options_t>)>();

  ffi.Pointer<cairo_surface_t> cairo_get_group_target(
    ffi.Pointer<cairo_t> cr,
  ) {
    return _cairo_get_group_target(
      cr,
    );
  }

  late final _cairo_get_group_targetPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<cairo_surface_t> Function(
              ffi.Pointer<cairo_t>)>>('cairo_get_group_target');
  late final _cairo_get_group_target = _cairo_get_group_targetPtr.asFunction<
      ffi.Pointer<cairo_surface_t> Function(ffi.Pointer<cairo_t>)>();

  int cairo_get_hairline(
    ffi.Pointer<cairo_t> cr,
  ) {
    return _cairo_get_hairline(
      cr,
    );
  }

  late final _cairo_get_hairlinePtr =
      _lookup<ffi.NativeFunction<cairo_bool_t Function(ffi.Pointer<cairo_t>)>>(
          'cairo_get_hairline');
  late final _cairo_get_hairline =
      _cairo_get_hairlinePtr.asFunction<int Function(ffi.Pointer<cairo_t>)>();

  int cairo_get_line_cap(
    ffi.Pointer<cairo_t> cr,
  ) {
    return _cairo_get_line_cap(
      cr,
    );
  }

  late final _cairo_get_line_capPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<cairo_t>)>>(
          'cairo_get_line_cap');
  late final _cairo_get_line_cap =
      _cairo_get_line_capPtr.asFunction<int Function(ffi.Pointer<cairo_t>)>();

  int cairo_get_line_join(
    ffi.Pointer<cairo_t> cr,
  ) {
    return _cairo_get_line_join(
      cr,
    );
  }

  late final _cairo_get_line_joinPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<cairo_t>)>>(
          'cairo_get_line_join');
  late final _cairo_get_line_join =
      _cairo_get_line_joinPtr.asFunction<int Function(ffi.Pointer<cairo_t>)>();

  double cairo_get_line_width(
    ffi.Pointer<cairo_t> cr,
  ) {
    return _cairo_get_line_width(
      cr,
    );
  }

  late final _cairo_get_line_widthPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Pointer<cairo_t>)>>(
          'cairo_get_line_width');
  late final _cairo_get_line_width = _cairo_get_line_widthPtr
      .asFunction<double Function(ffi.Pointer<cairo_t>)>();

  void cairo_get_matrix(
    ffi.Pointer<cairo_t> cr,
    ffi.Pointer<cairo_matrix_t> matrix,
  ) {
    return _cairo_get_matrix(
      cr,
      matrix,
    );
  }

  late final _cairo_get_matrixPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<cairo_t>,
              ffi.Pointer<cairo_matrix_t>)>>('cairo_get_matrix');
  late final _cairo_get_matrix = _cairo_get_matrixPtr.asFunction<
      void Function(ffi.Pointer<cairo_t>, ffi.Pointer<cairo_matrix_t>)>();

  double cairo_get_miter_limit(
    ffi.Pointer<cairo_t> cr,
  ) {
    return _cairo_get_miter_limit(
      cr,
    );
  }

  late final _cairo_get_miter_limitPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Pointer<cairo_t>)>>(
          'cairo_get_miter_limit');
  late final _cairo_get_miter_limit = _cairo_get_miter_limitPtr
      .asFunction<double Function(ffi.Pointer<cairo_t>)>();

  /// Query functions
  int cairo_get_operator(
    ffi.Pointer<cairo_t> cr,
  ) {
    return _cairo_get_operator(
      cr,
    );
  }

  late final _cairo_get_operatorPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<cairo_t>)>>(
          'cairo_get_operator');
  late final _cairo_get_operator =
      _cairo_get_operatorPtr.asFunction<int Function(ffi.Pointer<cairo_t>)>();

  int cairo_get_reference_count(
    ffi.Pointer<cairo_t> cr,
  ) {
    return _cairo_get_reference_count(
      cr,
    );
  }

  late final _cairo_get_reference_countPtr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(ffi.Pointer<cairo_t>)>>(
          'cairo_get_reference_count');
  late final _cairo_get_reference_count = _cairo_get_reference_countPtr
      .asFunction<int Function(ffi.Pointer<cairo_t>)>();

  ffi.Pointer<cairo_scaled_font_t> cairo_get_scaled_font(
    ffi.Pointer<cairo_t> cr,
  ) {
    return _cairo_get_scaled_font(
      cr,
    );
  }

  late final _cairo_get_scaled_fontPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<cairo_scaled_font_t> Function(
              ffi.Pointer<cairo_t>)>>('cairo_get_scaled_font');
  late final _cairo_get_scaled_font = _cairo_get_scaled_fontPtr.asFunction<
      ffi.Pointer<cairo_scaled_font_t> Function(ffi.Pointer<cairo_t>)>();

  ffi.Pointer<cairo_pattern_t> cairo_get_source(
    ffi.Pointer<cairo_t> cr,
  ) {
    return _cairo_get_source(
      cr,
    );
  }

  late final _cairo_get_sourcePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<cairo_pattern_t> Function(
              ffi.Pointer<cairo_t>)>>('cairo_get_source');
  late final _cairo_get_source = _cairo_get_sourcePtr.asFunction<
      ffi.Pointer<cairo_pattern_t> Function(ffi.Pointer<cairo_t>)>();

  ffi.Pointer<cairo_surface_t> cairo_get_target(
    ffi.Pointer<cairo_t> cr,
  ) {
    return _cairo_get_target(
      cr,
    );
  }

  late final _cairo_get_targetPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<cairo_surface_t> Function(
              ffi.Pointer<cairo_t>)>>('cairo_get_target');
  late final _cairo_get_target = _cairo_get_targetPtr.asFunction<
      ffi.Pointer<cairo_surface_t> Function(ffi.Pointer<cairo_t>)>();

  double cairo_get_tolerance(
    ffi.Pointer<cairo_t> cr,
  ) {
    return _cairo_get_tolerance(
      cr,
    );
  }

  late final _cairo_get_tolerancePtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Pointer<cairo_t>)>>(
          'cairo_get_tolerance');
  late final _cairo_get_tolerance = _cairo_get_tolerancePtr
      .asFunction<double Function(ffi.Pointer<cairo_t>)>();

  ffi.Pointer<ffi.Void> cairo_get_user_data(
    ffi.Pointer<cairo_t> cr,
    ffi.Pointer<cairo_user_data_key_t> key,
  ) {
    return _cairo_get_user_data(
      cr,
      key,
    );
  }

  late final _cairo_get_user_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<cairo_t>,
              ffi.Pointer<cairo_user_data_key_t>)>>('cairo_get_user_data');
  late final _cairo_get_user_data = _cairo_get_user_dataPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<cairo_t>, ffi.Pointer<cairo_user_data_key_t>)>();

  ffi.Pointer<cairo_glyph_t> cairo_glyph_allocate(
    int num_glyphs,
  ) {
    return _cairo_glyph_allocate(
      num_glyphs,
    );
  }

  late final _cairo_glyph_allocatePtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<cairo_glyph_t> Function(ffi.Int32)>>(
      'cairo_glyph_allocate');
  late final _cairo_glyph_allocate = _cairo_glyph_allocatePtr
      .asFunction<ffi.Pointer<cairo_glyph_t> Function(int)>();

  void cairo_glyph_extents(
    ffi.Pointer<cairo_t> cr,
    ffi.Pointer<cairo_glyph_t> glyphs,
    int num_glyphs,
    ffi.Pointer<cairo_text_extents_t> extents,
  ) {
    return _cairo_glyph_extents(
      cr,
      glyphs,
      num_glyphs,
      extents,
    );
  }

  late final _cairo_glyph_extentsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<cairo_t>,
              ffi.Pointer<cairo_glyph_t>,
              ffi.Int32,
              ffi.Pointer<cairo_text_extents_t>)>>('cairo_glyph_extents');
  late final _cairo_glyph_extents = _cairo_glyph_extentsPtr.asFunction<
      void Function(ffi.Pointer<cairo_t>, ffi.Pointer<cairo_glyph_t>, int,
          ffi.Pointer<cairo_text_extents_t>)>();

  void cairo_glyph_free(
    ffi.Pointer<cairo_glyph_t> glyphs,
  ) {
    return _cairo_glyph_free(
      glyphs,
    );
  }

  late final _cairo_glyph_freePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<cairo_glyph_t>)>>(
      'cairo_glyph_free');
  late final _cairo_glyph_free = _cairo_glyph_freePtr
      .asFunction<void Function(ffi.Pointer<cairo_glyph_t>)>();

  void cairo_glyph_path(
    ffi.Pointer<cairo_t> cr,
    ffi.Pointer<cairo_glyph_t> glyphs,
    int num_glyphs,
  ) {
    return _cairo_glyph_path(
      cr,
      glyphs,
      num_glyphs,
    );
  }

  late final _cairo_glyph_pathPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<cairo_t>, ffi.Pointer<cairo_glyph_t>,
              ffi.Int32)>>('cairo_glyph_path');
  late final _cairo_glyph_path = _cairo_glyph_pathPtr.asFunction<
      void Function(ffi.Pointer<cairo_t>, ffi.Pointer<cairo_glyph_t>, int)>();

  int cairo_has_current_point(
    ffi.Pointer<cairo_t> cr,
  ) {
    return _cairo_has_current_point(
      cr,
    );
  }

  late final _cairo_has_current_pointPtr =
      _lookup<ffi.NativeFunction<cairo_bool_t Function(ffi.Pointer<cairo_t>)>>(
          'cairo_has_current_point');
  late final _cairo_has_current_point = _cairo_has_current_pointPtr
      .asFunction<int Function(ffi.Pointer<cairo_t>)>();

  void cairo_identity_matrix(
    ffi.Pointer<cairo_t> cr,
  ) {
    return _cairo_identity_matrix(
      cr,
    );
  }

  late final _cairo_identity_matrixPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<cairo_t>)>>(
          'cairo_identity_matrix');
  late final _cairo_identity_matrix = _cairo_identity_matrixPtr
      .asFunction<void Function(ffi.Pointer<cairo_t>)>();

  /// Image-surface functions
  ffi.Pointer<cairo_surface_t> cairo_image_surface_create(
    int format,
    int width,
    int height,
  ) {
    return _cairo_image_surface_create(
      format,
      width,
      height,
    );
  }

  late final _cairo_image_surface_createPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<cairo_surface_t> Function(
              ffi.Int32, ffi.Int32, ffi.Int32)>>('cairo_image_surface_create');
  late final _cairo_image_surface_create = _cairo_image_surface_createPtr
      .asFunction<ffi.Pointer<cairo_surface_t> Function(int, int, int)>();

  ffi.Pointer<cairo_surface_t> cairo_image_surface_create_for_data(
    ffi.Pointer<ffi.Uint8> data,
    int format,
    int width,
    int height,
    int stride,
  ) {
    return _cairo_image_surface_create_for_data(
      data,
      format,
      width,
      height,
      stride,
    );
  }

  late final _cairo_image_surface_create_for_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<cairo_surface_t> Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32)>>('cairo_image_surface_create_for_data');
  late final _cairo_image_surface_create_for_data =
      _cairo_image_surface_create_for_dataPtr.asFunction<
          ffi.Pointer<cairo_surface_t> Function(
              ffi.Pointer<ffi.Uint8>, int, int, int, int)>();

  ffi.Pointer<cairo_surface_t> cairo_image_surface_create_from_png(
    ffi.Pointer<ffi.Int8> filename,
  ) {
    return _cairo_image_surface_create_from_png(
      filename,
    );
  }

  late final _cairo_image_surface_create_from_pngPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<cairo_surface_t> Function(
              ffi.Pointer<ffi.Int8>)>>('cairo_image_surface_create_from_png');
  late final _cairo_image_surface_create_from_png =
      _cairo_image_surface_create_from_pngPtr.asFunction<
          ffi.Pointer<cairo_surface_t> Function(ffi.Pointer<ffi.Int8>)>();

  ffi.Pointer<cairo_surface_t> cairo_image_surface_create_from_png_stream(
    cairo_read_func_t read_func,
    ffi.Pointer<ffi.Void> closure,
  ) {
    return _cairo_image_surface_create_from_png_stream(
      read_func,
      closure,
    );
  }

  late final _cairo_image_surface_create_from_png_streamPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<cairo_surface_t> Function(
                  cairo_read_func_t, ffi.Pointer<ffi.Void>)>>(
      'cairo_image_surface_create_from_png_stream');
  late final _cairo_image_surface_create_from_png_stream =
      _cairo_image_surface_create_from_png_streamPtr.asFunction<
          ffi.Pointer<cairo_surface_t> Function(
              cairo_read_func_t, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Uint8> cairo_image_surface_get_data(
    ffi.Pointer<cairo_surface_t> surface,
  ) {
    return _cairo_image_surface_get_data(
      surface,
    );
  }

  late final _cairo_image_surface_get_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Uint8> Function(
              ffi.Pointer<cairo_surface_t>)>>('cairo_image_surface_get_data');
  late final _cairo_image_surface_get_data =
      _cairo_image_surface_get_dataPtr.asFunction<
          ffi.Pointer<ffi.Uint8> Function(ffi.Pointer<cairo_surface_t>)>();

  int cairo_image_surface_get_format(
    ffi.Pointer<cairo_surface_t> surface,
  ) {
    return _cairo_image_surface_get_format(
      surface,
    );
  }

  late final _cairo_image_surface_get_formatPtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<cairo_surface_t>)>>(
      'cairo_image_surface_get_format');
  late final _cairo_image_surface_get_format =
      _cairo_image_surface_get_formatPtr
          .asFunction<int Function(ffi.Pointer<cairo_surface_t>)>();

  int cairo_image_surface_get_height(
    ffi.Pointer<cairo_surface_t> surface,
  ) {
    return _cairo_image_surface_get_height(
      surface,
    );
  }

  late final _cairo_image_surface_get_heightPtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<cairo_surface_t>)>>(
      'cairo_image_surface_get_height');
  late final _cairo_image_surface_get_height =
      _cairo_image_surface_get_heightPtr
          .asFunction<int Function(ffi.Pointer<cairo_surface_t>)>();

  int cairo_image_surface_get_stride(
    ffi.Pointer<cairo_surface_t> surface,
  ) {
    return _cairo_image_surface_get_stride(
      surface,
    );
  }

  late final _cairo_image_surface_get_stridePtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<cairo_surface_t>)>>(
      'cairo_image_surface_get_stride');
  late final _cairo_image_surface_get_stride =
      _cairo_image_surface_get_stridePtr
          .asFunction<int Function(ffi.Pointer<cairo_surface_t>)>();

  int cairo_image_surface_get_width(
    ffi.Pointer<cairo_surface_t> surface,
  ) {
    return _cairo_image_surface_get_width(
      surface,
    );
  }

  late final _cairo_image_surface_get_widthPtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<cairo_surface_t>)>>(
      'cairo_image_surface_get_width');
  late final _cairo_image_surface_get_width = _cairo_image_surface_get_widthPtr
      .asFunction<int Function(ffi.Pointer<cairo_surface_t>)>();

  int cairo_in_clip(
    ffi.Pointer<cairo_t> cr,
    double x,
    double y,
  ) {
    return _cairo_in_clip(
      cr,
      x,
      y,
    );
  }

  late final _cairo_in_clipPtr = _lookup<
      ffi.NativeFunction<
          cairo_bool_t Function(
              ffi.Pointer<cairo_t>, ffi.Double, ffi.Double)>>('cairo_in_clip');
  late final _cairo_in_clip = _cairo_in_clipPtr
      .asFunction<int Function(ffi.Pointer<cairo_t>, double, double)>();

  int cairo_in_fill(
    ffi.Pointer<cairo_t> cr,
    double x,
    double y,
  ) {
    return _cairo_in_fill(
      cr,
      x,
      y,
    );
  }

  late final _cairo_in_fillPtr = _lookup<
      ffi.NativeFunction<
          cairo_bool_t Function(
              ffi.Pointer<cairo_t>, ffi.Double, ffi.Double)>>('cairo_in_fill');
  late final _cairo_in_fill = _cairo_in_fillPtr
      .asFunction<int Function(ffi.Pointer<cairo_t>, double, double)>();

  /// Insideness testing
  int cairo_in_stroke(
    ffi.Pointer<cairo_t> cr,
    double x,
    double y,
  ) {
    return _cairo_in_stroke(
      cr,
      x,
      y,
    );
  }

  late final _cairo_in_strokePtr = _lookup<
      ffi.NativeFunction<
          cairo_bool_t Function(ffi.Pointer<cairo_t>, ffi.Double,
              ffi.Double)>>('cairo_in_stroke');
  late final _cairo_in_stroke = _cairo_in_strokePtr
      .asFunction<int Function(ffi.Pointer<cairo_t>, double, double)>();

  void cairo_line_to(
    ffi.Pointer<cairo_t> cr,
    double x,
    double y,
  ) {
    return _cairo_line_to(
      cr,
      x,
      y,
    );
  }

  late final _cairo_line_toPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<cairo_t>, ffi.Double, ffi.Double)>>('cairo_line_to');
  late final _cairo_line_to = _cairo_line_toPtr
      .asFunction<void Function(ffi.Pointer<cairo_t>, double, double)>();

  void cairo_mask(
    ffi.Pointer<cairo_t> cr,
    ffi.Pointer<cairo_pattern_t> pattern,
  ) {
    return _cairo_mask(
      cr,
      pattern,
    );
  }

  late final _cairo_maskPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<cairo_t>,
              ffi.Pointer<cairo_pattern_t>)>>('cairo_mask');
  late final _cairo_mask = _cairo_maskPtr.asFunction<
      void Function(ffi.Pointer<cairo_t>, ffi.Pointer<cairo_pattern_t>)>();

  void cairo_mask_surface(
    ffi.Pointer<cairo_t> cr,
    ffi.Pointer<cairo_surface_t> surface,
    double surface_x,
    double surface_y,
  ) {
    return _cairo_mask_surface(
      cr,
      surface,
      surface_x,
      surface_y,
    );
  }

  late final _cairo_mask_surfacePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<cairo_t>, ffi.Pointer<cairo_surface_t>,
              ffi.Double, ffi.Double)>>('cairo_mask_surface');
  late final _cairo_mask_surface = _cairo_mask_surfacePtr.asFunction<
      void Function(ffi.Pointer<cairo_t>, ffi.Pointer<cairo_surface_t>, double,
          double)>();

  /// Matrix functions
  void cairo_matrix_init(
    ffi.Pointer<cairo_matrix_t> matrix,
    double xx,
    double yx,
    double xy,
    double yy,
    double x0,
    double y0,
  ) {
    return _cairo_matrix_init(
      matrix,
      xx,
      yx,
      xy,
      yy,
      x0,
      y0,
    );
  }

  late final _cairo_matrix_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<cairo_matrix_t>,
              ffi.Double,
              ffi.Double,
              ffi.Double,
              ffi.Double,
              ffi.Double,
              ffi.Double)>>('cairo_matrix_init');
  late final _cairo_matrix_init = _cairo_matrix_initPtr.asFunction<
      void Function(ffi.Pointer<cairo_matrix_t>, double, double, double, double,
          double, double)>();

  void cairo_matrix_init_identity(
    ffi.Pointer<cairo_matrix_t> matrix,
  ) {
    return _cairo_matrix_init_identity(
      matrix,
    );
  }

  late final _cairo_matrix_init_identityPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<cairo_matrix_t>)>>(
      'cairo_matrix_init_identity');
  late final _cairo_matrix_init_identity = _cairo_matrix_init_identityPtr
      .asFunction<void Function(ffi.Pointer<cairo_matrix_t>)>();

  void cairo_matrix_init_rotate(
    ffi.Pointer<cairo_matrix_t> matrix,
    double radians,
  ) {
    return _cairo_matrix_init_rotate(
      matrix,
      radians,
    );
  }

  late final _cairo_matrix_init_rotatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<cairo_matrix_t>,
              ffi.Double)>>('cairo_matrix_init_rotate');
  late final _cairo_matrix_init_rotate = _cairo_matrix_init_rotatePtr
      .asFunction<void Function(ffi.Pointer<cairo_matrix_t>, double)>();

  void cairo_matrix_init_scale(
    ffi.Pointer<cairo_matrix_t> matrix,
    double sx,
    double sy,
  ) {
    return _cairo_matrix_init_scale(
      matrix,
      sx,
      sy,
    );
  }

  late final _cairo_matrix_init_scalePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<cairo_matrix_t>, ffi.Double,
              ffi.Double)>>('cairo_matrix_init_scale');
  late final _cairo_matrix_init_scale = _cairo_matrix_init_scalePtr
      .asFunction<void Function(ffi.Pointer<cairo_matrix_t>, double, double)>();

  void cairo_matrix_init_translate(
    ffi.Pointer<cairo_matrix_t> matrix,
    double tx,
    double ty,
  ) {
    return _cairo_matrix_init_translate(
      matrix,
      tx,
      ty,
    );
  }

  late final _cairo_matrix_init_translatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<cairo_matrix_t>, ffi.Double,
              ffi.Double)>>('cairo_matrix_init_translate');
  late final _cairo_matrix_init_translate = _cairo_matrix_init_translatePtr
      .asFunction<void Function(ffi.Pointer<cairo_matrix_t>, double, double)>();

  int cairo_matrix_invert(
    ffi.Pointer<cairo_matrix_t> matrix,
  ) {
    return _cairo_matrix_invert(
      matrix,
    );
  }

  late final _cairo_matrix_invertPtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<cairo_matrix_t>)>>(
      'cairo_matrix_invert');
  late final _cairo_matrix_invert = _cairo_matrix_invertPtr
      .asFunction<int Function(ffi.Pointer<cairo_matrix_t>)>();

  void cairo_matrix_multiply(
    ffi.Pointer<cairo_matrix_t> result,
    ffi.Pointer<cairo_matrix_t> a,
    ffi.Pointer<cairo_matrix_t> b,
  ) {
    return _cairo_matrix_multiply(
      result,
      a,
      b,
    );
  }

  late final _cairo_matrix_multiplyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<cairo_matrix_t>,
              ffi.Pointer<cairo_matrix_t>,
              ffi.Pointer<cairo_matrix_t>)>>('cairo_matrix_multiply');
  late final _cairo_matrix_multiply = _cairo_matrix_multiplyPtr.asFunction<
      void Function(ffi.Pointer<cairo_matrix_t>, ffi.Pointer<cairo_matrix_t>,
          ffi.Pointer<cairo_matrix_t>)>();

  void cairo_matrix_rotate(
    ffi.Pointer<cairo_matrix_t> matrix,
    double radians,
  ) {
    return _cairo_matrix_rotate(
      matrix,
      radians,
    );
  }

  late final _cairo_matrix_rotatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<cairo_matrix_t>, ffi.Double)>>('cairo_matrix_rotate');
  late final _cairo_matrix_rotate = _cairo_matrix_rotatePtr
      .asFunction<void Function(ffi.Pointer<cairo_matrix_t>, double)>();

  void cairo_matrix_scale(
    ffi.Pointer<cairo_matrix_t> matrix,
    double sx,
    double sy,
  ) {
    return _cairo_matrix_scale(
      matrix,
      sx,
      sy,
    );
  }

  late final _cairo_matrix_scalePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<cairo_matrix_t>, ffi.Double,
              ffi.Double)>>('cairo_matrix_scale');
  late final _cairo_matrix_scale = _cairo_matrix_scalePtr
      .asFunction<void Function(ffi.Pointer<cairo_matrix_t>, double, double)>();

  void cairo_matrix_transform_distance(
    ffi.Pointer<cairo_matrix_t> matrix,
    ffi.Pointer<ffi.Double> dx,
    ffi.Pointer<ffi.Double> dy,
  ) {
    return _cairo_matrix_transform_distance(
      matrix,
      dx,
      dy,
    );
  }

  late final _cairo_matrix_transform_distancePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<cairo_matrix_t>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>>('cairo_matrix_transform_distance');
  late final _cairo_matrix_transform_distance =
      _cairo_matrix_transform_distancePtr.asFunction<
          void Function(ffi.Pointer<cairo_matrix_t>, ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>();

  void cairo_matrix_transform_point(
    ffi.Pointer<cairo_matrix_t> matrix,
    ffi.Pointer<ffi.Double> x,
    ffi.Pointer<ffi.Double> y,
  ) {
    return _cairo_matrix_transform_point(
      matrix,
      x,
      y,
    );
  }

  late final _cairo_matrix_transform_pointPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<cairo_matrix_t>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>>('cairo_matrix_transform_point');
  late final _cairo_matrix_transform_point =
      _cairo_matrix_transform_pointPtr.asFunction<
          void Function(ffi.Pointer<cairo_matrix_t>, ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>();

  void cairo_matrix_translate(
    ffi.Pointer<cairo_matrix_t> matrix,
    double tx,
    double ty,
  ) {
    return _cairo_matrix_translate(
      matrix,
      tx,
      ty,
    );
  }

  late final _cairo_matrix_translatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<cairo_matrix_t>, ffi.Double,
              ffi.Double)>>('cairo_matrix_translate');
  late final _cairo_matrix_translate = _cairo_matrix_translatePtr
      .asFunction<void Function(ffi.Pointer<cairo_matrix_t>, double, double)>();

  void cairo_mesh_pattern_begin_patch(
    ffi.Pointer<cairo_pattern_t> pattern,
  ) {
    return _cairo_mesh_pattern_begin_patch(
      pattern,
    );
  }

  late final _cairo_mesh_pattern_begin_patchPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<cairo_pattern_t>)>>(
      'cairo_mesh_pattern_begin_patch');
  late final _cairo_mesh_pattern_begin_patch =
      _cairo_mesh_pattern_begin_patchPtr
          .asFunction<void Function(ffi.Pointer<cairo_pattern_t>)>();

  void cairo_mesh_pattern_curve_to(
    ffi.Pointer<cairo_pattern_t> pattern,
    double x1,
    double y1,
    double x2,
    double y2,
    double x3,
    double y3,
  ) {
    return _cairo_mesh_pattern_curve_to(
      pattern,
      x1,
      y1,
      x2,
      y2,
      x3,
      y3,
    );
  }

  late final _cairo_mesh_pattern_curve_toPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<cairo_pattern_t>,
              ffi.Double,
              ffi.Double,
              ffi.Double,
              ffi.Double,
              ffi.Double,
              ffi.Double)>>('cairo_mesh_pattern_curve_to');
  late final _cairo_mesh_pattern_curve_to =
      _cairo_mesh_pattern_curve_toPtr.asFunction<
          void Function(ffi.Pointer<cairo_pattern_t>, double, double, double,
              double, double, double)>();

  void cairo_mesh_pattern_end_patch(
    ffi.Pointer<cairo_pattern_t> pattern,
  ) {
    return _cairo_mesh_pattern_end_patch(
      pattern,
    );
  }

  late final _cairo_mesh_pattern_end_patchPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<cairo_pattern_t>)>>(
      'cairo_mesh_pattern_end_patch');
  late final _cairo_mesh_pattern_end_patch = _cairo_mesh_pattern_end_patchPtr
      .asFunction<void Function(ffi.Pointer<cairo_pattern_t>)>();

  int cairo_mesh_pattern_get_control_point(
    ffi.Pointer<cairo_pattern_t> pattern,
    int patch_num,
    int point_num,
    ffi.Pointer<ffi.Double> x,
    ffi.Pointer<ffi.Double> y,
  ) {
    return _cairo_mesh_pattern_get_control_point(
      pattern,
      patch_num,
      point_num,
      x,
      y,
    );
  }

  late final _cairo_mesh_pattern_get_control_pointPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<cairo_pattern_t>,
                  ffi.Uint32,
                  ffi.Uint32,
                  ffi.Pointer<ffi.Double>,
                  ffi.Pointer<ffi.Double>)>>(
      'cairo_mesh_pattern_get_control_point');
  late final _cairo_mesh_pattern_get_control_point =
      _cairo_mesh_pattern_get_control_pointPtr.asFunction<
          int Function(ffi.Pointer<cairo_pattern_t>, int, int,
              ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Double>)>();

  int cairo_mesh_pattern_get_corner_color_rgba(
    ffi.Pointer<cairo_pattern_t> pattern,
    int patch_num,
    int corner_num,
    ffi.Pointer<ffi.Double> red,
    ffi.Pointer<ffi.Double> green,
    ffi.Pointer<ffi.Double> blue,
    ffi.Pointer<ffi.Double> alpha,
  ) {
    return _cairo_mesh_pattern_get_corner_color_rgba(
      pattern,
      patch_num,
      corner_num,
      red,
      green,
      blue,
      alpha,
    );
  }

  late final _cairo_mesh_pattern_get_corner_color_rgbaPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<cairo_pattern_t>,
                  ffi.Uint32,
                  ffi.Uint32,
                  ffi.Pointer<ffi.Double>,
                  ffi.Pointer<ffi.Double>,
                  ffi.Pointer<ffi.Double>,
                  ffi.Pointer<ffi.Double>)>>(
      'cairo_mesh_pattern_get_corner_color_rgba');
  late final _cairo_mesh_pattern_get_corner_color_rgba =
      _cairo_mesh_pattern_get_corner_color_rgbaPtr.asFunction<
          int Function(
              ffi.Pointer<cairo_pattern_t>,
              int,
              int,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>();

  int cairo_mesh_pattern_get_patch_count(
    ffi.Pointer<cairo_pattern_t> pattern,
    ffi.Pointer<ffi.Uint32> count,
  ) {
    return _cairo_mesh_pattern_get_patch_count(
      pattern,
      count,
    );
  }

  late final _cairo_mesh_pattern_get_patch_countPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<cairo_pattern_t>,
              ffi.Pointer<ffi.Uint32>)>>('cairo_mesh_pattern_get_patch_count');
  late final _cairo_mesh_pattern_get_patch_count =
      _cairo_mesh_pattern_get_patch_countPtr.asFunction<
          int Function(
              ffi.Pointer<cairo_pattern_t>, ffi.Pointer<ffi.Uint32>)>();

  ffi.Pointer<cairo_path_t> cairo_mesh_pattern_get_path(
    ffi.Pointer<cairo_pattern_t> pattern,
    int patch_num,
  ) {
    return _cairo_mesh_pattern_get_path(
      pattern,
      patch_num,
    );
  }

  late final _cairo_mesh_pattern_get_pathPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<cairo_path_t> Function(ffi.Pointer<cairo_pattern_t>,
              ffi.Uint32)>>('cairo_mesh_pattern_get_path');
  late final _cairo_mesh_pattern_get_path =
      _cairo_mesh_pattern_get_pathPtr.asFunction<
          ffi.Pointer<cairo_path_t> Function(
              ffi.Pointer<cairo_pattern_t>, int)>();

  void cairo_mesh_pattern_line_to(
    ffi.Pointer<cairo_pattern_t> pattern,
    double x,
    double y,
  ) {
    return _cairo_mesh_pattern_line_to(
      pattern,
      x,
      y,
    );
  }

  late final _cairo_mesh_pattern_line_toPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<cairo_pattern_t>, ffi.Double,
              ffi.Double)>>('cairo_mesh_pattern_line_to');
  late final _cairo_mesh_pattern_line_to =
      _cairo_mesh_pattern_line_toPtr.asFunction<
          void Function(ffi.Pointer<cairo_pattern_t>, double, double)>();

  void cairo_mesh_pattern_move_to(
    ffi.Pointer<cairo_pattern_t> pattern,
    double x,
    double y,
  ) {
    return _cairo_mesh_pattern_move_to(
      pattern,
      x,
      y,
    );
  }

  late final _cairo_mesh_pattern_move_toPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<cairo_pattern_t>, ffi.Double,
              ffi.Double)>>('cairo_mesh_pattern_move_to');
  late final _cairo_mesh_pattern_move_to =
      _cairo_mesh_pattern_move_toPtr.asFunction<
          void Function(ffi.Pointer<cairo_pattern_t>, double, double)>();

  void cairo_mesh_pattern_set_control_point(
    ffi.Pointer<cairo_pattern_t> pattern,
    int point_num,
    double x,
    double y,
  ) {
    return _cairo_mesh_pattern_set_control_point(
      pattern,
      point_num,
      x,
      y,
    );
  }

  late final _cairo_mesh_pattern_set_control_pointPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<cairo_pattern_t>, ffi.Uint32,
              ffi.Double, ffi.Double)>>('cairo_mesh_pattern_set_control_point');
  late final _cairo_mesh_pattern_set_control_point =
      _cairo_mesh_pattern_set_control_pointPtr.asFunction<
          void Function(ffi.Pointer<cairo_pattern_t>, int, double, double)>();

  void cairo_mesh_pattern_set_corner_color_rgb(
    ffi.Pointer<cairo_pattern_t> pattern,
    int corner_num,
    double red,
    double green,
    double blue,
  ) {
    return _cairo_mesh_pattern_set_corner_color_rgb(
      pattern,
      corner_num,
      red,
      green,
      blue,
    );
  }

  late final _cairo_mesh_pattern_set_corner_color_rgbPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<cairo_pattern_t>,
              ffi.Uint32,
              ffi.Double,
              ffi.Double,
              ffi.Double)>>('cairo_mesh_pattern_set_corner_color_rgb');
  late final _cairo_mesh_pattern_set_corner_color_rgb =
      _cairo_mesh_pattern_set_corner_color_rgbPtr.asFunction<
          void Function(
              ffi.Pointer<cairo_pattern_t>, int, double, double, double)>();

  void cairo_mesh_pattern_set_corner_color_rgba(
    ffi.Pointer<cairo_pattern_t> pattern,
    int corner_num,
    double red,
    double green,
    double blue,
    double alpha,
  ) {
    return _cairo_mesh_pattern_set_corner_color_rgba(
      pattern,
      corner_num,
      red,
      green,
      blue,
      alpha,
    );
  }

  late final _cairo_mesh_pattern_set_corner_color_rgbaPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<cairo_pattern_t>,
              ffi.Uint32,
              ffi.Double,
              ffi.Double,
              ffi.Double,
              ffi.Double)>>('cairo_mesh_pattern_set_corner_color_rgba');
  late final _cairo_mesh_pattern_set_corner_color_rgba =
      _cairo_mesh_pattern_set_corner_color_rgbaPtr.asFunction<
          void Function(ffi.Pointer<cairo_pattern_t>, int, double, double,
              double, double)>();

  void cairo_move_to(
    ffi.Pointer<cairo_t> cr,
    double x,
    double y,
  ) {
    return _cairo_move_to(
      cr,
      x,
      y,
    );
  }

  late final _cairo_move_toPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<cairo_t>, ffi.Double, ffi.Double)>>('cairo_move_to');
  late final _cairo_move_to = _cairo_move_toPtr
      .asFunction<void Function(ffi.Pointer<cairo_t>, double, double)>();

  /// Path creation functions
  void cairo_new_path(
    ffi.Pointer<cairo_t> cr,
  ) {
    return _cairo_new_path(
      cr,
    );
  }

  late final _cairo_new_pathPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<cairo_t>)>>(
          'cairo_new_path');
  late final _cairo_new_path =
      _cairo_new_pathPtr.asFunction<void Function(ffi.Pointer<cairo_t>)>();

  void cairo_new_sub_path(
    ffi.Pointer<cairo_t> cr,
  ) {
    return _cairo_new_sub_path(
      cr,
    );
  }

  late final _cairo_new_sub_pathPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<cairo_t>)>>(
          'cairo_new_sub_path');
  late final _cairo_new_sub_path =
      _cairo_new_sub_pathPtr.asFunction<void Function(ffi.Pointer<cairo_t>)>();

  /// Painting functions
  void cairo_paint(
    ffi.Pointer<cairo_t> cr,
  ) {
    return _cairo_paint(
      cr,
    );
  }

  late final _cairo_paintPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<cairo_t>)>>(
          'cairo_paint');
  late final _cairo_paint =
      _cairo_paintPtr.asFunction<void Function(ffi.Pointer<cairo_t>)>();

  void cairo_paint_with_alpha(
    ffi.Pointer<cairo_t> cr,
    double alpha,
  ) {
    return _cairo_paint_with_alpha(
      cr,
      alpha,
    );
  }

  late final _cairo_paint_with_alphaPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<cairo_t>, ffi.Double)>>('cairo_paint_with_alpha');
  late final _cairo_paint_with_alpha = _cairo_paint_with_alphaPtr
      .asFunction<void Function(ffi.Pointer<cairo_t>, double)>();

  void cairo_path_destroy(
    ffi.Pointer<cairo_path_t> path,
  ) {
    return _cairo_path_destroy(
      path,
    );
  }

  late final _cairo_path_destroyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<cairo_path_t>)>>(
          'cairo_path_destroy');
  late final _cairo_path_destroy = _cairo_path_destroyPtr
      .asFunction<void Function(ffi.Pointer<cairo_path_t>)>();

  void cairo_path_extents(
    ffi.Pointer<cairo_t> cr,
    ffi.Pointer<ffi.Double> x1,
    ffi.Pointer<ffi.Double> y1,
    ffi.Pointer<ffi.Double> x2,
    ffi.Pointer<ffi.Double> y2,
  ) {
    return _cairo_path_extents(
      cr,
      x1,
      y1,
      x2,
      y2,
    );
  }

  late final _cairo_path_extentsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<cairo_t>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>>('cairo_path_extents');
  late final _cairo_path_extents = _cairo_path_extentsPtr.asFunction<
      void Function(
          ffi.Pointer<cairo_t>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>)>();

  void cairo_pattern_add_color_stop_rgb(
    ffi.Pointer<cairo_pattern_t> pattern,
    double offset,
    double red,
    double green,
    double blue,
  ) {
    return _cairo_pattern_add_color_stop_rgb(
      pattern,
      offset,
      red,
      green,
      blue,
    );
  }

  late final _cairo_pattern_add_color_stop_rgbPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<cairo_pattern_t>,
              ffi.Double,
              ffi.Double,
              ffi.Double,
              ffi.Double)>>('cairo_pattern_add_color_stop_rgb');
  late final _cairo_pattern_add_color_stop_rgb =
      _cairo_pattern_add_color_stop_rgbPtr.asFunction<
          void Function(
              ffi.Pointer<cairo_pattern_t>, double, double, double, double)>();

  void cairo_pattern_add_color_stop_rgba(
    ffi.Pointer<cairo_pattern_t> pattern,
    double offset,
    double red,
    double green,
    double blue,
    double alpha,
  ) {
    return _cairo_pattern_add_color_stop_rgba(
      pattern,
      offset,
      red,
      green,
      blue,
      alpha,
    );
  }

  late final _cairo_pattern_add_color_stop_rgbaPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<cairo_pattern_t>,
              ffi.Double,
              ffi.Double,
              ffi.Double,
              ffi.Double,
              ffi.Double)>>('cairo_pattern_add_color_stop_rgba');
  late final _cairo_pattern_add_color_stop_rgba =
      _cairo_pattern_add_color_stop_rgbaPtr.asFunction<
          void Function(ffi.Pointer<cairo_pattern_t>, double, double, double,
              double, double)>();

  ffi.Pointer<cairo_pattern_t> cairo_pattern_create_for_surface(
    ffi.Pointer<cairo_surface_t> surface,
  ) {
    return _cairo_pattern_create_for_surface(
      surface,
    );
  }

  late final _cairo_pattern_create_for_surfacePtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<cairo_pattern_t> Function(
                  ffi.Pointer<cairo_surface_t>)>>(
      'cairo_pattern_create_for_surface');
  late final _cairo_pattern_create_for_surface =
      _cairo_pattern_create_for_surfacePtr.asFunction<
          ffi.Pointer<cairo_pattern_t> Function(
              ffi.Pointer<cairo_surface_t>)>();

  ffi.Pointer<cairo_pattern_t> cairo_pattern_create_linear(
    double x0,
    double y0,
    double x1,
    double y1,
  ) {
    return _cairo_pattern_create_linear(
      x0,
      y0,
      x1,
      y1,
    );
  }

  late final _cairo_pattern_create_linearPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<cairo_pattern_t> Function(ffi.Double, ffi.Double,
              ffi.Double, ffi.Double)>>('cairo_pattern_create_linear');
  late final _cairo_pattern_create_linear =
      _cairo_pattern_create_linearPtr.asFunction<
          ffi.Pointer<cairo_pattern_t> Function(
              double, double, double, double)>();

  ffi.Pointer<cairo_pattern_t> cairo_pattern_create_mesh() {
    return _cairo_pattern_create_mesh();
  }

  late final _cairo_pattern_create_meshPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<cairo_pattern_t> Function()>>(
          'cairo_pattern_create_mesh');
  late final _cairo_pattern_create_mesh = _cairo_pattern_create_meshPtr
      .asFunction<ffi.Pointer<cairo_pattern_t> Function()>();

  ffi.Pointer<cairo_pattern_t> cairo_pattern_create_radial(
    double cx0,
    double cy0,
    double radius0,
    double cx1,
    double cy1,
    double radius1,
  ) {
    return _cairo_pattern_create_radial(
      cx0,
      cy0,
      radius0,
      cx1,
      cy1,
      radius1,
    );
  }

  late final _cairo_pattern_create_radialPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<cairo_pattern_t> Function(
              ffi.Double,
              ffi.Double,
              ffi.Double,
              ffi.Double,
              ffi.Double,
              ffi.Double)>>('cairo_pattern_create_radial');
  late final _cairo_pattern_create_radial =
      _cairo_pattern_create_radialPtr.asFunction<
          ffi.Pointer<cairo_pattern_t> Function(
              double, double, double, double, double, double)>();

  ffi.Pointer<cairo_pattern_t> cairo_pattern_create_raster_source(
    ffi.Pointer<ffi.Void> user_data,
    int content,
    int width,
    int height,
  ) {
    return _cairo_pattern_create_raster_source(
      user_data,
      content,
      width,
      height,
    );
  }

  late final _cairo_pattern_create_raster_sourcePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<cairo_pattern_t> Function(
              ffi.Pointer<ffi.Void>,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32)>>('cairo_pattern_create_raster_source');
  late final _cairo_pattern_create_raster_source =
      _cairo_pattern_create_raster_sourcePtr.asFunction<
          ffi.Pointer<cairo_pattern_t> Function(
              ffi.Pointer<ffi.Void>, int, int, int)>();

  /// Pattern creation functions
  ffi.Pointer<cairo_pattern_t> cairo_pattern_create_rgb(
    double red,
    double green,
    double blue,
  ) {
    return _cairo_pattern_create_rgb(
      red,
      green,
      blue,
    );
  }

  late final _cairo_pattern_create_rgbPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<cairo_pattern_t> Function(
              ffi.Double, ffi.Double, ffi.Double)>>('cairo_pattern_create_rgb');
  late final _cairo_pattern_create_rgb =
      _cairo_pattern_create_rgbPtr.asFunction<
          ffi.Pointer<cairo_pattern_t> Function(double, double, double)>();

  ffi.Pointer<cairo_pattern_t> cairo_pattern_create_rgba(
    double red,
    double green,
    double blue,
    double alpha,
  ) {
    return _cairo_pattern_create_rgba(
      red,
      green,
      blue,
      alpha,
    );
  }

  late final _cairo_pattern_create_rgbaPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<cairo_pattern_t> Function(ffi.Double, ffi.Double,
              ffi.Double, ffi.Double)>>('cairo_pattern_create_rgba');
  late final _cairo_pattern_create_rgba =
      _cairo_pattern_create_rgbaPtr.asFunction<
          ffi.Pointer<cairo_pattern_t> Function(
              double, double, double, double)>();

  void cairo_pattern_destroy(
    ffi.Pointer<cairo_pattern_t> pattern,
  ) {
    return _cairo_pattern_destroy(
      pattern,
    );
  }

  late final _cairo_pattern_destroyPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<cairo_pattern_t>)>>(
      'cairo_pattern_destroy');
  late final _cairo_pattern_destroy = _cairo_pattern_destroyPtr
      .asFunction<void Function(ffi.Pointer<cairo_pattern_t>)>();

  int cairo_pattern_get_color_stop_count(
    ffi.Pointer<cairo_pattern_t> pattern,
    ffi.Pointer<ffi.Int32> count,
  ) {
    return _cairo_pattern_get_color_stop_count(
      pattern,
      count,
    );
  }

  late final _cairo_pattern_get_color_stop_countPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<cairo_pattern_t>,
              ffi.Pointer<ffi.Int32>)>>('cairo_pattern_get_color_stop_count');
  late final _cairo_pattern_get_color_stop_count =
      _cairo_pattern_get_color_stop_countPtr.asFunction<
          int Function(ffi.Pointer<cairo_pattern_t>, ffi.Pointer<ffi.Int32>)>();

  int cairo_pattern_get_color_stop_rgba(
    ffi.Pointer<cairo_pattern_t> pattern,
    int index,
    ffi.Pointer<ffi.Double> offset,
    ffi.Pointer<ffi.Double> red,
    ffi.Pointer<ffi.Double> green,
    ffi.Pointer<ffi.Double> blue,
    ffi.Pointer<ffi.Double> alpha,
  ) {
    return _cairo_pattern_get_color_stop_rgba(
      pattern,
      index,
      offset,
      red,
      green,
      blue,
      alpha,
    );
  }

  late final _cairo_pattern_get_color_stop_rgbaPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<cairo_pattern_t>,
              ffi.Int32,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>>('cairo_pattern_get_color_stop_rgba');
  late final _cairo_pattern_get_color_stop_rgba =
      _cairo_pattern_get_color_stop_rgbaPtr.asFunction<
          int Function(
              ffi.Pointer<cairo_pattern_t>,
              int,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>();

  int cairo_pattern_get_extend(
    ffi.Pointer<cairo_pattern_t> pattern,
  ) {
    return _cairo_pattern_get_extend(
      pattern,
    );
  }

  late final _cairo_pattern_get_extendPtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<cairo_pattern_t>)>>(
      'cairo_pattern_get_extend');
  late final _cairo_pattern_get_extend = _cairo_pattern_get_extendPtr
      .asFunction<int Function(ffi.Pointer<cairo_pattern_t>)>();

  int cairo_pattern_get_filter(
    ffi.Pointer<cairo_pattern_t> pattern,
  ) {
    return _cairo_pattern_get_filter(
      pattern,
    );
  }

  late final _cairo_pattern_get_filterPtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<cairo_pattern_t>)>>(
      'cairo_pattern_get_filter');
  late final _cairo_pattern_get_filter = _cairo_pattern_get_filterPtr
      .asFunction<int Function(ffi.Pointer<cairo_pattern_t>)>();

  int cairo_pattern_get_linear_points(
    ffi.Pointer<cairo_pattern_t> pattern,
    ffi.Pointer<ffi.Double> x0,
    ffi.Pointer<ffi.Double> y0,
    ffi.Pointer<ffi.Double> x1,
    ffi.Pointer<ffi.Double> y1,
  ) {
    return _cairo_pattern_get_linear_points(
      pattern,
      x0,
      y0,
      x1,
      y1,
    );
  }

  late final _cairo_pattern_get_linear_pointsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<cairo_pattern_t>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>>('cairo_pattern_get_linear_points');
  late final _cairo_pattern_get_linear_points =
      _cairo_pattern_get_linear_pointsPtr.asFunction<
          int Function(
              ffi.Pointer<cairo_pattern_t>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>();

  void cairo_pattern_get_matrix(
    ffi.Pointer<cairo_pattern_t> pattern,
    ffi.Pointer<cairo_matrix_t> matrix,
  ) {
    return _cairo_pattern_get_matrix(
      pattern,
      matrix,
    );
  }

  late final _cairo_pattern_get_matrixPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<cairo_pattern_t>,
              ffi.Pointer<cairo_matrix_t>)>>('cairo_pattern_get_matrix');
  late final _cairo_pattern_get_matrix =
      _cairo_pattern_get_matrixPtr.asFunction<
          void Function(
              ffi.Pointer<cairo_pattern_t>, ffi.Pointer<cairo_matrix_t>)>();

  int cairo_pattern_get_radial_circles(
    ffi.Pointer<cairo_pattern_t> pattern,
    ffi.Pointer<ffi.Double> x0,
    ffi.Pointer<ffi.Double> y0,
    ffi.Pointer<ffi.Double> r0,
    ffi.Pointer<ffi.Double> x1,
    ffi.Pointer<ffi.Double> y1,
    ffi.Pointer<ffi.Double> r1,
  ) {
    return _cairo_pattern_get_radial_circles(
      pattern,
      x0,
      y0,
      r0,
      x1,
      y1,
      r1,
    );
  }

  late final _cairo_pattern_get_radial_circlesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<cairo_pattern_t>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>>('cairo_pattern_get_radial_circles');
  late final _cairo_pattern_get_radial_circles =
      _cairo_pattern_get_radial_circlesPtr.asFunction<
          int Function(
              ffi.Pointer<cairo_pattern_t>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>();

  int cairo_pattern_get_reference_count(
    ffi.Pointer<cairo_pattern_t> pattern,
  ) {
    return _cairo_pattern_get_reference_count(
      pattern,
    );
  }

  late final _cairo_pattern_get_reference_countPtr = _lookup<
          ffi.NativeFunction<
              ffi.Uint32 Function(ffi.Pointer<cairo_pattern_t>)>>(
      'cairo_pattern_get_reference_count');
  late final _cairo_pattern_get_reference_count =
      _cairo_pattern_get_reference_countPtr
          .asFunction<int Function(ffi.Pointer<cairo_pattern_t>)>();

  int cairo_pattern_get_rgba(
    ffi.Pointer<cairo_pattern_t> pattern,
    ffi.Pointer<ffi.Double> red,
    ffi.Pointer<ffi.Double> green,
    ffi.Pointer<ffi.Double> blue,
    ffi.Pointer<ffi.Double> alpha,
  ) {
    return _cairo_pattern_get_rgba(
      pattern,
      red,
      green,
      blue,
      alpha,
    );
  }

  late final _cairo_pattern_get_rgbaPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<cairo_pattern_t>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>>('cairo_pattern_get_rgba');
  late final _cairo_pattern_get_rgba = _cairo_pattern_get_rgbaPtr.asFunction<
      int Function(
          ffi.Pointer<cairo_pattern_t>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>)>();

  int cairo_pattern_get_surface(
    ffi.Pointer<cairo_pattern_t> pattern,
    ffi.Pointer<ffi.Pointer<cairo_surface_t>> surface,
  ) {
    return _cairo_pattern_get_surface(
      pattern,
      surface,
    );
  }

  late final _cairo_pattern_get_surfacePtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<cairo_pattern_t>,
                  ffi.Pointer<ffi.Pointer<cairo_surface_t>>)>>(
      'cairo_pattern_get_surface');
  late final _cairo_pattern_get_surface =
      _cairo_pattern_get_surfacePtr.asFunction<
          int Function(ffi.Pointer<cairo_pattern_t>,
              ffi.Pointer<ffi.Pointer<cairo_surface_t>>)>();

  int cairo_pattern_get_type(
    ffi.Pointer<cairo_pattern_t> pattern,
  ) {
    return _cairo_pattern_get_type(
      pattern,
    );
  }

  late final _cairo_pattern_get_typePtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<cairo_pattern_t>)>>(
      'cairo_pattern_get_type');
  late final _cairo_pattern_get_type = _cairo_pattern_get_typePtr
      .asFunction<int Function(ffi.Pointer<cairo_pattern_t>)>();

  ffi.Pointer<ffi.Void> cairo_pattern_get_user_data(
    ffi.Pointer<cairo_pattern_t> pattern,
    ffi.Pointer<cairo_user_data_key_t> key,
  ) {
    return _cairo_pattern_get_user_data(
      pattern,
      key,
    );
  }

  late final _cairo_pattern_get_user_dataPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Void> Function(ffi.Pointer<cairo_pattern_t>,
                  ffi.Pointer<cairo_user_data_key_t>)>>(
      'cairo_pattern_get_user_data');
  late final _cairo_pattern_get_user_data =
      _cairo_pattern_get_user_dataPtr.asFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<cairo_pattern_t>,
              ffi.Pointer<cairo_user_data_key_t>)>();

  ffi.Pointer<cairo_pattern_t> cairo_pattern_reference(
    ffi.Pointer<cairo_pattern_t> pattern,
  ) {
    return _cairo_pattern_reference(
      pattern,
    );
  }

  late final _cairo_pattern_referencePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<cairo_pattern_t> Function(
              ffi.Pointer<cairo_pattern_t>)>>('cairo_pattern_reference');
  late final _cairo_pattern_reference = _cairo_pattern_referencePtr.asFunction<
      ffi.Pointer<cairo_pattern_t> Function(ffi.Pointer<cairo_pattern_t>)>();

  void cairo_pattern_set_extend(
    ffi.Pointer<cairo_pattern_t> pattern,
    int extend,
  ) {
    return _cairo_pattern_set_extend(
      pattern,
      extend,
    );
  }

  late final _cairo_pattern_set_extendPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<cairo_pattern_t>,
              ffi.Int32)>>('cairo_pattern_set_extend');
  late final _cairo_pattern_set_extend = _cairo_pattern_set_extendPtr
      .asFunction<void Function(ffi.Pointer<cairo_pattern_t>, int)>();

  void cairo_pattern_set_filter(
    ffi.Pointer<cairo_pattern_t> pattern,
    int filter,
  ) {
    return _cairo_pattern_set_filter(
      pattern,
      filter,
    );
  }

  late final _cairo_pattern_set_filterPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<cairo_pattern_t>,
              ffi.Int32)>>('cairo_pattern_set_filter');
  late final _cairo_pattern_set_filter = _cairo_pattern_set_filterPtr
      .asFunction<void Function(ffi.Pointer<cairo_pattern_t>, int)>();

  void cairo_pattern_set_matrix(
    ffi.Pointer<cairo_pattern_t> pattern,
    ffi.Pointer<cairo_matrix_t> matrix,
  ) {
    return _cairo_pattern_set_matrix(
      pattern,
      matrix,
    );
  }

  late final _cairo_pattern_set_matrixPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<cairo_pattern_t>,
              ffi.Pointer<cairo_matrix_t>)>>('cairo_pattern_set_matrix');
  late final _cairo_pattern_set_matrix =
      _cairo_pattern_set_matrixPtr.asFunction<
          void Function(
              ffi.Pointer<cairo_pattern_t>, ffi.Pointer<cairo_matrix_t>)>();

  int cairo_pattern_set_user_data(
    ffi.Pointer<cairo_pattern_t> pattern,
    ffi.Pointer<cairo_user_data_key_t> key,
    ffi.Pointer<ffi.Void> user_data,
    cairo_destroy_func_t destroy,
  ) {
    return _cairo_pattern_set_user_data(
      pattern,
      key,
      user_data,
      destroy,
    );
  }

  late final _cairo_pattern_set_user_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<cairo_pattern_t>,
              ffi.Pointer<cairo_user_data_key_t>,
              ffi.Pointer<ffi.Void>,
              cairo_destroy_func_t)>>('cairo_pattern_set_user_data');
  late final _cairo_pattern_set_user_data =
      _cairo_pattern_set_user_dataPtr.asFunction<
          int Function(
              ffi.Pointer<cairo_pattern_t>,
              ffi.Pointer<cairo_user_data_key_t>,
              ffi.Pointer<ffi.Void>,
              cairo_destroy_func_t)>();

  int cairo_pattern_status(
    ffi.Pointer<cairo_pattern_t> pattern,
  ) {
    return _cairo_pattern_status(
      pattern,
    );
  }

  late final _cairo_pattern_statusPtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<cairo_pattern_t>)>>(
      'cairo_pattern_status');
  late final _cairo_pattern_status = _cairo_pattern_statusPtr
      .asFunction<int Function(ffi.Pointer<cairo_pattern_t>)>();

  ffi.Pointer<cairo_pattern_t> cairo_pop_group(
    ffi.Pointer<cairo_t> cr,
  ) {
    return _cairo_pop_group(
      cr,
    );
  }

  late final _cairo_pop_groupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<cairo_pattern_t> Function(
              ffi.Pointer<cairo_t>)>>('cairo_pop_group');
  late final _cairo_pop_group = _cairo_pop_groupPtr.asFunction<
      ffi.Pointer<cairo_pattern_t> Function(ffi.Pointer<cairo_t>)>();

  void cairo_pop_group_to_source(
    ffi.Pointer<cairo_t> cr,
  ) {
    return _cairo_pop_group_to_source(
      cr,
    );
  }

  late final _cairo_pop_group_to_sourcePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<cairo_t>)>>(
          'cairo_pop_group_to_source');
  late final _cairo_pop_group_to_source = _cairo_pop_group_to_sourcePtr
      .asFunction<void Function(ffi.Pointer<cairo_t>)>();

  void cairo_push_group(
    ffi.Pointer<cairo_t> cr,
  ) {
    return _cairo_push_group(
      cr,
    );
  }

  late final _cairo_push_groupPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<cairo_t>)>>(
          'cairo_push_group');
  late final _cairo_push_group =
      _cairo_push_groupPtr.asFunction<void Function(ffi.Pointer<cairo_t>)>();

  void cairo_push_group_with_content(
    ffi.Pointer<cairo_t> cr,
    int content,
  ) {
    return _cairo_push_group_with_content(
      cr,
      content,
    );
  }

  late final _cairo_push_group_with_contentPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<cairo_t>,
              ffi.Int32)>>('cairo_push_group_with_content');
  late final _cairo_push_group_with_content = _cairo_push_group_with_contentPtr
      .asFunction<void Function(ffi.Pointer<cairo_t>, int)>();

  void cairo_raster_source_pattern_get_acquire(
    ffi.Pointer<cairo_pattern_t> pattern,
    ffi.Pointer<cairo_raster_source_acquire_func_t> acquire,
    ffi.Pointer<cairo_raster_source_release_func_t> release,
  ) {
    return _cairo_raster_source_pattern_get_acquire(
      pattern,
      acquire,
      release,
    );
  }

  late final _cairo_raster_source_pattern_get_acquirePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<cairo_pattern_t>,
                  ffi.Pointer<cairo_raster_source_acquire_func_t>,
                  ffi.Pointer<cairo_raster_source_release_func_t>)>>(
      'cairo_raster_source_pattern_get_acquire');
  late final _cairo_raster_source_pattern_get_acquire =
      _cairo_raster_source_pattern_get_acquirePtr.asFunction<
          void Function(
              ffi.Pointer<cairo_pattern_t>,
              ffi.Pointer<cairo_raster_source_acquire_func_t>,
              ffi.Pointer<cairo_raster_source_release_func_t>)>();

  ffi.Pointer<ffi.Void> cairo_raster_source_pattern_get_callback_data(
    ffi.Pointer<cairo_pattern_t> pattern,
  ) {
    return _cairo_raster_source_pattern_get_callback_data(
      pattern,
    );
  }

  late final _cairo_raster_source_pattern_get_callback_dataPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Void> Function(ffi.Pointer<cairo_pattern_t>)>>(
      'cairo_raster_source_pattern_get_callback_data');
  late final _cairo_raster_source_pattern_get_callback_data =
      _cairo_raster_source_pattern_get_callback_dataPtr.asFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<cairo_pattern_t>)>();

  cairo_raster_source_copy_func_t cairo_raster_source_pattern_get_copy(
    ffi.Pointer<cairo_pattern_t> pattern,
  ) {
    return _cairo_raster_source_pattern_get_copy(
      pattern,
    );
  }

  late final _cairo_raster_source_pattern_get_copyPtr = _lookup<
          ffi.NativeFunction<
              cairo_raster_source_copy_func_t Function(
                  ffi.Pointer<cairo_pattern_t>)>>(
      'cairo_raster_source_pattern_get_copy');
  late final _cairo_raster_source_pattern_get_copy =
      _cairo_raster_source_pattern_get_copyPtr.asFunction<
          cairo_raster_source_copy_func_t Function(
              ffi.Pointer<cairo_pattern_t>)>();

  cairo_raster_source_finish_func_t cairo_raster_source_pattern_get_finish(
    ffi.Pointer<cairo_pattern_t> pattern,
  ) {
    return _cairo_raster_source_pattern_get_finish(
      pattern,
    );
  }

  late final _cairo_raster_source_pattern_get_finishPtr = _lookup<
          ffi.NativeFunction<
              cairo_raster_source_finish_func_t Function(
                  ffi.Pointer<cairo_pattern_t>)>>(
      'cairo_raster_source_pattern_get_finish');
  late final _cairo_raster_source_pattern_get_finish =
      _cairo_raster_source_pattern_get_finishPtr.asFunction<
          cairo_raster_source_finish_func_t Function(
              ffi.Pointer<cairo_pattern_t>)>();

  cairo_raster_source_snapshot_func_t cairo_raster_source_pattern_get_snapshot(
    ffi.Pointer<cairo_pattern_t> pattern,
  ) {
    return _cairo_raster_source_pattern_get_snapshot(
      pattern,
    );
  }

  late final _cairo_raster_source_pattern_get_snapshotPtr = _lookup<
          ffi.NativeFunction<
              cairo_raster_source_snapshot_func_t Function(
                  ffi.Pointer<cairo_pattern_t>)>>(
      'cairo_raster_source_pattern_get_snapshot');
  late final _cairo_raster_source_pattern_get_snapshot =
      _cairo_raster_source_pattern_get_snapshotPtr.asFunction<
          cairo_raster_source_snapshot_func_t Function(
              ffi.Pointer<cairo_pattern_t>)>();

  void cairo_raster_source_pattern_set_acquire(
    ffi.Pointer<cairo_pattern_t> pattern,
    cairo_raster_source_acquire_func_t acquire,
    cairo_raster_source_release_func_t release,
  ) {
    return _cairo_raster_source_pattern_set_acquire(
      pattern,
      acquire,
      release,
    );
  }

  late final _cairo_raster_source_pattern_set_acquirePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<cairo_pattern_t>,
                  cairo_raster_source_acquire_func_t,
                  cairo_raster_source_release_func_t)>>(
      'cairo_raster_source_pattern_set_acquire');
  late final _cairo_raster_source_pattern_set_acquire =
      _cairo_raster_source_pattern_set_acquirePtr.asFunction<
          void Function(
              ffi.Pointer<cairo_pattern_t>,
              cairo_raster_source_acquire_func_t,
              cairo_raster_source_release_func_t)>();

  void cairo_raster_source_pattern_set_callback_data(
    ffi.Pointer<cairo_pattern_t> pattern,
    ffi.Pointer<ffi.Void> data,
  ) {
    return _cairo_raster_source_pattern_set_callback_data(
      pattern,
      data,
    );
  }

  late final _cairo_raster_source_pattern_set_callback_dataPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<cairo_pattern_t>, ffi.Pointer<ffi.Void>)>>(
      'cairo_raster_source_pattern_set_callback_data');
  late final _cairo_raster_source_pattern_set_callback_data =
      _cairo_raster_source_pattern_set_callback_dataPtr.asFunction<
          void Function(ffi.Pointer<cairo_pattern_t>, ffi.Pointer<ffi.Void>)>();

  void cairo_raster_source_pattern_set_copy(
    ffi.Pointer<cairo_pattern_t> pattern,
    cairo_raster_source_copy_func_t copy,
  ) {
    return _cairo_raster_source_pattern_set_copy(
      pattern,
      copy,
    );
  }

  late final _cairo_raster_source_pattern_set_copyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<cairo_pattern_t>,
                  cairo_raster_source_copy_func_t)>>(
      'cairo_raster_source_pattern_set_copy');
  late final _cairo_raster_source_pattern_set_copy =
      _cairo_raster_source_pattern_set_copyPtr.asFunction<
          void Function(
              ffi.Pointer<cairo_pattern_t>, cairo_raster_source_copy_func_t)>();

  void cairo_raster_source_pattern_set_finish(
    ffi.Pointer<cairo_pattern_t> pattern,
    cairo_raster_source_finish_func_t finish,
  ) {
    return _cairo_raster_source_pattern_set_finish(
      pattern,
      finish,
    );
  }

  late final _cairo_raster_source_pattern_set_finishPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<cairo_pattern_t>,
                  cairo_raster_source_finish_func_t)>>(
      'cairo_raster_source_pattern_set_finish');
  late final _cairo_raster_source_pattern_set_finish =
      _cairo_raster_source_pattern_set_finishPtr.asFunction<
          void Function(ffi.Pointer<cairo_pattern_t>,
              cairo_raster_source_finish_func_t)>();

  void cairo_raster_source_pattern_set_snapshot(
    ffi.Pointer<cairo_pattern_t> pattern,
    cairo_raster_source_snapshot_func_t snapshot,
  ) {
    return _cairo_raster_source_pattern_set_snapshot(
      pattern,
      snapshot,
    );
  }

  late final _cairo_raster_source_pattern_set_snapshotPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<cairo_pattern_t>,
                  cairo_raster_source_snapshot_func_t)>>(
      'cairo_raster_source_pattern_set_snapshot');
  late final _cairo_raster_source_pattern_set_snapshot =
      _cairo_raster_source_pattern_set_snapshotPtr.asFunction<
          void Function(ffi.Pointer<cairo_pattern_t>,
              cairo_raster_source_snapshot_func_t)>();

  /// Recording-surface functions
  ffi.Pointer<cairo_surface_t> cairo_recording_surface_create(
    int content,
    ffi.Pointer<cairo_rectangle_t> extents,
  ) {
    return _cairo_recording_surface_create(
      content,
      extents,
    );
  }

  late final _cairo_recording_surface_createPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<cairo_surface_t> Function(
                  ffi.Int32, ffi.Pointer<cairo_rectangle_t>)>>(
      'cairo_recording_surface_create');
  late final _cairo_recording_surface_create =
      _cairo_recording_surface_createPtr.asFunction<
          ffi.Pointer<cairo_surface_t> Function(
              int, ffi.Pointer<cairo_rectangle_t>)>();

  int cairo_recording_surface_get_extents(
    ffi.Pointer<cairo_surface_t> surface,
    ffi.Pointer<cairo_rectangle_t> extents,
  ) {
    return _cairo_recording_surface_get_extents(
      surface,
      extents,
    );
  }

  late final _cairo_recording_surface_get_extentsPtr = _lookup<
          ffi.NativeFunction<
              cairo_bool_t Function(ffi.Pointer<cairo_surface_t>,
                  ffi.Pointer<cairo_rectangle_t>)>>(
      'cairo_recording_surface_get_extents');
  late final _cairo_recording_surface_get_extents =
      _cairo_recording_surface_get_extentsPtr.asFunction<
          int Function(
              ffi.Pointer<cairo_surface_t>, ffi.Pointer<cairo_rectangle_t>)>();

  void cairo_recording_surface_ink_extents(
    ffi.Pointer<cairo_surface_t> surface,
    ffi.Pointer<ffi.Double> x0,
    ffi.Pointer<ffi.Double> y0,
    ffi.Pointer<ffi.Double> width,
    ffi.Pointer<ffi.Double> height,
  ) {
    return _cairo_recording_surface_ink_extents(
      surface,
      x0,
      y0,
      width,
      height,
    );
  }

  late final _cairo_recording_surface_ink_extentsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<cairo_surface_t>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>>('cairo_recording_surface_ink_extents');
  late final _cairo_recording_surface_ink_extents =
      _cairo_recording_surface_ink_extentsPtr.asFunction<
          void Function(
              ffi.Pointer<cairo_surface_t>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>();

  void cairo_rectangle(
    ffi.Pointer<cairo_t> cr,
    double x,
    double y,
    double width,
    double height,
  ) {
    return _cairo_rectangle(
      cr,
      x,
      y,
      width,
      height,
    );
  }

  late final _cairo_rectanglePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<cairo_t>, ffi.Double, ffi.Double,
              ffi.Double, ffi.Double)>>('cairo_rectangle');
  late final _cairo_rectangle = _cairo_rectanglePtr.asFunction<
      void Function(ffi.Pointer<cairo_t>, double, double, double, double)>();

  void cairo_rectangle_list_destroy(
    ffi.Pointer<cairo_rectangle_list_t> rectangle_list,
  ) {
    return _cairo_rectangle_list_destroy(
      rectangle_list,
    );
  }

  late final _cairo_rectangle_list_destroyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<cairo_rectangle_list_t>)>>(
      'cairo_rectangle_list_destroy');
  late final _cairo_rectangle_list_destroy = _cairo_rectangle_list_destroyPtr
      .asFunction<void Function(ffi.Pointer<cairo_rectangle_list_t>)>();

  ffi.Pointer<cairo_t> cairo_reference(
    ffi.Pointer<cairo_t> cr,
  ) {
    return _cairo_reference(
      cr,
    );
  }

  late final _cairo_referencePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<cairo_t> Function(
              ffi.Pointer<cairo_t>)>>('cairo_reference');
  late final _cairo_reference = _cairo_referencePtr
      .asFunction<ffi.Pointer<cairo_t> Function(ffi.Pointer<cairo_t>)>();

  int cairo_region_contains_point(
    ffi.Pointer<cairo_region_t> region,
    int x,
    int y,
  ) {
    return _cairo_region_contains_point(
      region,
      x,
      y,
    );
  }

  late final _cairo_region_contains_pointPtr = _lookup<
      ffi.NativeFunction<
          cairo_bool_t Function(ffi.Pointer<cairo_region_t>, ffi.Int32,
              ffi.Int32)>>('cairo_region_contains_point');
  late final _cairo_region_contains_point = _cairo_region_contains_pointPtr
      .asFunction<int Function(ffi.Pointer<cairo_region_t>, int, int)>();

  int cairo_region_contains_rectangle(
    ffi.Pointer<cairo_region_t> region,
    ffi.Pointer<cairo_rectangle_int_t> rectangle,
  ) {
    return _cairo_region_contains_rectangle(
      region,
      rectangle,
    );
  }

  late final _cairo_region_contains_rectanglePtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<cairo_region_t>,
                  ffi.Pointer<cairo_rectangle_int_t>)>>(
      'cairo_region_contains_rectangle');
  late final _cairo_region_contains_rectangle =
      _cairo_region_contains_rectanglePtr.asFunction<
          int Function(ffi.Pointer<cairo_region_t>,
              ffi.Pointer<cairo_rectangle_int_t>)>();

  ffi.Pointer<cairo_region_t> cairo_region_copy(
    ffi.Pointer<cairo_region_t> original,
  ) {
    return _cairo_region_copy(
      original,
    );
  }

  late final _cairo_region_copyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<cairo_region_t> Function(
              ffi.Pointer<cairo_region_t>)>>('cairo_region_copy');
  late final _cairo_region_copy = _cairo_region_copyPtr.asFunction<
      ffi.Pointer<cairo_region_t> Function(ffi.Pointer<cairo_region_t>)>();

  ffi.Pointer<cairo_region_t> cairo_region_create() {
    return _cairo_region_create();
  }

  late final _cairo_region_createPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<cairo_region_t> Function()>>(
          'cairo_region_create');
  late final _cairo_region_create = _cairo_region_createPtr
      .asFunction<ffi.Pointer<cairo_region_t> Function()>();

  ffi.Pointer<cairo_region_t> cairo_region_create_rectangle(
    ffi.Pointer<cairo_rectangle_int_t> rectangle,
  ) {
    return _cairo_region_create_rectangle(
      rectangle,
    );
  }

  late final _cairo_region_create_rectanglePtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<cairo_region_t> Function(
                  ffi.Pointer<cairo_rectangle_int_t>)>>(
      'cairo_region_create_rectangle');
  late final _cairo_region_create_rectangle =
      _cairo_region_create_rectanglePtr.asFunction<
          ffi.Pointer<cairo_region_t> Function(
              ffi.Pointer<cairo_rectangle_int_t>)>();

  ffi.Pointer<cairo_region_t> cairo_region_create_rectangles(
    ffi.Pointer<cairo_rectangle_int_t> rects,
    int count,
  ) {
    return _cairo_region_create_rectangles(
      rects,
      count,
    );
  }

  late final _cairo_region_create_rectanglesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<cairo_region_t> Function(
              ffi.Pointer<cairo_rectangle_int_t>,
              ffi.Int32)>>('cairo_region_create_rectangles');
  late final _cairo_region_create_rectangles =
      _cairo_region_create_rectanglesPtr.asFunction<
          ffi.Pointer<cairo_region_t> Function(
              ffi.Pointer<cairo_rectangle_int_t>, int)>();

  void cairo_region_destroy(
    ffi.Pointer<cairo_region_t> region,
  ) {
    return _cairo_region_destroy(
      region,
    );
  }

  late final _cairo_region_destroyPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<cairo_region_t>)>>(
      'cairo_region_destroy');
  late final _cairo_region_destroy = _cairo_region_destroyPtr
      .asFunction<void Function(ffi.Pointer<cairo_region_t>)>();

  int cairo_region_equal(
    ffi.Pointer<cairo_region_t> a,
    ffi.Pointer<cairo_region_t> b,
  ) {
    return _cairo_region_equal(
      a,
      b,
    );
  }

  late final _cairo_region_equalPtr = _lookup<
      ffi.NativeFunction<
          cairo_bool_t Function(ffi.Pointer<cairo_region_t>,
              ffi.Pointer<cairo_region_t>)>>('cairo_region_equal');
  late final _cairo_region_equal = _cairo_region_equalPtr.asFunction<
      int Function(ffi.Pointer<cairo_region_t>, ffi.Pointer<cairo_region_t>)>();

  void cairo_region_get_extents(
    ffi.Pointer<cairo_region_t> region,
    ffi.Pointer<cairo_rectangle_int_t> extents,
  ) {
    return _cairo_region_get_extents(
      region,
      extents,
    );
  }

  late final _cairo_region_get_extentsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<cairo_region_t>,
              ffi.Pointer<cairo_rectangle_int_t>)>>('cairo_region_get_extents');
  late final _cairo_region_get_extents =
      _cairo_region_get_extentsPtr.asFunction<
          void Function(ffi.Pointer<cairo_region_t>,
              ffi.Pointer<cairo_rectangle_int_t>)>();

  void cairo_region_get_rectangle(
    ffi.Pointer<cairo_region_t> region,
    int nth,
    ffi.Pointer<cairo_rectangle_int_t> rectangle,
  ) {
    return _cairo_region_get_rectangle(
      region,
      nth,
      rectangle,
    );
  }

  late final _cairo_region_get_rectanglePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<cairo_region_t>, ffi.Int32,
                  ffi.Pointer<cairo_rectangle_int_t>)>>(
      'cairo_region_get_rectangle');
  late final _cairo_region_get_rectangle =
      _cairo_region_get_rectanglePtr.asFunction<
          void Function(ffi.Pointer<cairo_region_t>, int,
              ffi.Pointer<cairo_rectangle_int_t>)>();

  int cairo_region_intersect(
    ffi.Pointer<cairo_region_t> dst,
    ffi.Pointer<cairo_region_t> other,
  ) {
    return _cairo_region_intersect(
      dst,
      other,
    );
  }

  late final _cairo_region_intersectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<cairo_region_t>,
              ffi.Pointer<cairo_region_t>)>>('cairo_region_intersect');
  late final _cairo_region_intersect = _cairo_region_intersectPtr.asFunction<
      int Function(ffi.Pointer<cairo_region_t>, ffi.Pointer<cairo_region_t>)>();

  int cairo_region_intersect_rectangle(
    ffi.Pointer<cairo_region_t> dst,
    ffi.Pointer<cairo_rectangle_int_t> rectangle,
  ) {
    return _cairo_region_intersect_rectangle(
      dst,
      rectangle,
    );
  }

  late final _cairo_region_intersect_rectanglePtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<cairo_region_t>,
                  ffi.Pointer<cairo_rectangle_int_t>)>>(
      'cairo_region_intersect_rectangle');
  late final _cairo_region_intersect_rectangle =
      _cairo_region_intersect_rectanglePtr.asFunction<
          int Function(ffi.Pointer<cairo_region_t>,
              ffi.Pointer<cairo_rectangle_int_t>)>();

  int cairo_region_is_empty(
    ffi.Pointer<cairo_region_t> region,
  ) {
    return _cairo_region_is_empty(
      region,
    );
  }

  late final _cairo_region_is_emptyPtr = _lookup<
      ffi.NativeFunction<
          cairo_bool_t Function(
              ffi.Pointer<cairo_region_t>)>>('cairo_region_is_empty');
  late final _cairo_region_is_empty = _cairo_region_is_emptyPtr
      .asFunction<int Function(ffi.Pointer<cairo_region_t>)>();

  int cairo_region_num_rectangles(
    ffi.Pointer<cairo_region_t> region,
  ) {
    return _cairo_region_num_rectangles(
      region,
    );
  }

  late final _cairo_region_num_rectanglesPtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<cairo_region_t>)>>(
      'cairo_region_num_rectangles');
  late final _cairo_region_num_rectangles = _cairo_region_num_rectanglesPtr
      .asFunction<int Function(ffi.Pointer<cairo_region_t>)>();

  ffi.Pointer<cairo_region_t> cairo_region_reference(
    ffi.Pointer<cairo_region_t> region,
  ) {
    return _cairo_region_reference(
      region,
    );
  }

  late final _cairo_region_referencePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<cairo_region_t> Function(
              ffi.Pointer<cairo_region_t>)>>('cairo_region_reference');
  late final _cairo_region_reference = _cairo_region_referencePtr.asFunction<
      ffi.Pointer<cairo_region_t> Function(ffi.Pointer<cairo_region_t>)>();

  int cairo_region_status(
    ffi.Pointer<cairo_region_t> region,
  ) {
    return _cairo_region_status(
      region,
    );
  }

  late final _cairo_region_statusPtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<cairo_region_t>)>>(
      'cairo_region_status');
  late final _cairo_region_status = _cairo_region_statusPtr
      .asFunction<int Function(ffi.Pointer<cairo_region_t>)>();

  int cairo_region_subtract(
    ffi.Pointer<cairo_region_t> dst,
    ffi.Pointer<cairo_region_t> other,
  ) {
    return _cairo_region_subtract(
      dst,
      other,
    );
  }

  late final _cairo_region_subtractPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<cairo_region_t>,
              ffi.Pointer<cairo_region_t>)>>('cairo_region_subtract');
  late final _cairo_region_subtract = _cairo_region_subtractPtr.asFunction<
      int Function(ffi.Pointer<cairo_region_t>, ffi.Pointer<cairo_region_t>)>();

  int cairo_region_subtract_rectangle(
    ffi.Pointer<cairo_region_t> dst,
    ffi.Pointer<cairo_rectangle_int_t> rectangle,
  ) {
    return _cairo_region_subtract_rectangle(
      dst,
      rectangle,
    );
  }

  late final _cairo_region_subtract_rectanglePtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<cairo_region_t>,
                  ffi.Pointer<cairo_rectangle_int_t>)>>(
      'cairo_region_subtract_rectangle');
  late final _cairo_region_subtract_rectangle =
      _cairo_region_subtract_rectanglePtr.asFunction<
          int Function(ffi.Pointer<cairo_region_t>,
              ffi.Pointer<cairo_rectangle_int_t>)>();

  void cairo_region_translate(
    ffi.Pointer<cairo_region_t> region,
    int dx,
    int dy,
  ) {
    return _cairo_region_translate(
      region,
      dx,
      dy,
    );
  }

  late final _cairo_region_translatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<cairo_region_t>, ffi.Int32,
              ffi.Int32)>>('cairo_region_translate');
  late final _cairo_region_translate = _cairo_region_translatePtr
      .asFunction<void Function(ffi.Pointer<cairo_region_t>, int, int)>();

  int cairo_region_union(
    ffi.Pointer<cairo_region_t> dst,
    ffi.Pointer<cairo_region_t> other,
  ) {
    return _cairo_region_union(
      dst,
      other,
    );
  }

  late final _cairo_region_unionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<cairo_region_t>,
              ffi.Pointer<cairo_region_t>)>>('cairo_region_union');
  late final _cairo_region_union = _cairo_region_unionPtr.asFunction<
      int Function(ffi.Pointer<cairo_region_t>, ffi.Pointer<cairo_region_t>)>();

  int cairo_region_union_rectangle(
    ffi.Pointer<cairo_region_t> dst,
    ffi.Pointer<cairo_rectangle_int_t> rectangle,
  ) {
    return _cairo_region_union_rectangle(
      dst,
      rectangle,
    );
  }

  late final _cairo_region_union_rectanglePtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<cairo_region_t>,
                  ffi.Pointer<cairo_rectangle_int_t>)>>(
      'cairo_region_union_rectangle');
  late final _cairo_region_union_rectangle =
      _cairo_region_union_rectanglePtr.asFunction<
          int Function(ffi.Pointer<cairo_region_t>,
              ffi.Pointer<cairo_rectangle_int_t>)>();

  int cairo_region_xor(
    ffi.Pointer<cairo_region_t> dst,
    ffi.Pointer<cairo_region_t> other,
  ) {
    return _cairo_region_xor(
      dst,
      other,
    );
  }

  late final _cairo_region_xorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<cairo_region_t>,
              ffi.Pointer<cairo_region_t>)>>('cairo_region_xor');
  late final _cairo_region_xor = _cairo_region_xorPtr.asFunction<
      int Function(ffi.Pointer<cairo_region_t>, ffi.Pointer<cairo_region_t>)>();

  int cairo_region_xor_rectangle(
    ffi.Pointer<cairo_region_t> dst,
    ffi.Pointer<cairo_rectangle_int_t> rectangle,
  ) {
    return _cairo_region_xor_rectangle(
      dst,
      rectangle,
    );
  }

  late final _cairo_region_xor_rectanglePtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<cairo_region_t>,
                  ffi.Pointer<cairo_rectangle_int_t>)>>(
      'cairo_region_xor_rectangle');
  late final _cairo_region_xor_rectangle =
      _cairo_region_xor_rectanglePtr.asFunction<
          int Function(ffi.Pointer<cairo_region_t>,
              ffi.Pointer<cairo_rectangle_int_t>)>();

  void cairo_rel_curve_to(
    ffi.Pointer<cairo_t> cr,
    double dx1,
    double dy1,
    double dx2,
    double dy2,
    double dx3,
    double dy3,
  ) {
    return _cairo_rel_curve_to(
      cr,
      dx1,
      dy1,
      dx2,
      dy2,
      dx3,
      dy3,
    );
  }

  late final _cairo_rel_curve_toPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<cairo_t>,
              ffi.Double,
              ffi.Double,
              ffi.Double,
              ffi.Double,
              ffi.Double,
              ffi.Double)>>('cairo_rel_curve_to');
  late final _cairo_rel_curve_to = _cairo_rel_curve_toPtr.asFunction<
      void Function(ffi.Pointer<cairo_t>, double, double, double, double,
          double, double)>();

  void cairo_rel_line_to(
    ffi.Pointer<cairo_t> cr,
    double dx,
    double dy,
  ) {
    return _cairo_rel_line_to(
      cr,
      dx,
      dy,
    );
  }

  late final _cairo_rel_line_toPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<cairo_t>, ffi.Double,
              ffi.Double)>>('cairo_rel_line_to');
  late final _cairo_rel_line_to = _cairo_rel_line_toPtr
      .asFunction<void Function(ffi.Pointer<cairo_t>, double, double)>();

  /// XXX: NYI
  /// cairo_public void
  /// cairo_arc_to (cairo_t *cr,
  /// double x1, double y1,
  /// double x2, double y2,
  /// double radius);
  void cairo_rel_move_to(
    ffi.Pointer<cairo_t> cr,
    double dx,
    double dy,
  ) {
    return _cairo_rel_move_to(
      cr,
      dx,
      dy,
    );
  }

  late final _cairo_rel_move_toPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<cairo_t>, ffi.Double,
              ffi.Double)>>('cairo_rel_move_to');
  late final _cairo_rel_move_to = _cairo_rel_move_toPtr
      .asFunction<void Function(ffi.Pointer<cairo_t>, double, double)>();

  /// Clipping
  void cairo_reset_clip(
    ffi.Pointer<cairo_t> cr,
  ) {
    return _cairo_reset_clip(
      cr,
    );
  }

  late final _cairo_reset_clipPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<cairo_t>)>>(
          'cairo_reset_clip');
  late final _cairo_reset_clip =
      _cairo_reset_clipPtr.asFunction<void Function(ffi.Pointer<cairo_t>)>();

  void cairo_restore(
    ffi.Pointer<cairo_t> cr,
  ) {
    return _cairo_restore(
      cr,
    );
  }

  late final _cairo_restorePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<cairo_t>)>>(
          'cairo_restore');
  late final _cairo_restore =
      _cairo_restorePtr.asFunction<void Function(ffi.Pointer<cairo_t>)>();

  void cairo_rotate(
    ffi.Pointer<cairo_t> cr,
    double angle,
  ) {
    return _cairo_rotate(
      cr,
      angle,
    );
  }

  late final _cairo_rotatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<cairo_t>, ffi.Double)>>('cairo_rotate');
  late final _cairo_rotate = _cairo_rotatePtr
      .asFunction<void Function(ffi.Pointer<cairo_t>, double)>();

  void cairo_save(
    ffi.Pointer<cairo_t> cr,
  ) {
    return _cairo_save(
      cr,
    );
  }

  late final _cairo_savePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<cairo_t>)>>(
          'cairo_save');
  late final _cairo_save =
      _cairo_savePtr.asFunction<void Function(ffi.Pointer<cairo_t>)>();

  void cairo_scale(
    ffi.Pointer<cairo_t> cr,
    double sx,
    double sy,
  ) {
    return _cairo_scale(
      cr,
      sx,
      sy,
    );
  }

  late final _cairo_scalePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<cairo_t>, ffi.Double, ffi.Double)>>('cairo_scale');
  late final _cairo_scale = _cairo_scalePtr
      .asFunction<void Function(ffi.Pointer<cairo_t>, double, double)>();

  /// Portable interface to general font features.
  ffi.Pointer<cairo_scaled_font_t> cairo_scaled_font_create(
    ffi.Pointer<cairo_font_face_t> font_face,
    ffi.Pointer<cairo_matrix_t> font_matrix,
    ffi.Pointer<cairo_matrix_t> ctm,
    ffi.Pointer<cairo_font_options_t> options,
  ) {
    return _cairo_scaled_font_create(
      font_face,
      font_matrix,
      ctm,
      options,
    );
  }

  late final _cairo_scaled_font_createPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<cairo_scaled_font_t> Function(
              ffi.Pointer<cairo_font_face_t>,
              ffi.Pointer<cairo_matrix_t>,
              ffi.Pointer<cairo_matrix_t>,
              ffi.Pointer<cairo_font_options_t>)>>('cairo_scaled_font_create');
  late final _cairo_scaled_font_create =
      _cairo_scaled_font_createPtr.asFunction<
          ffi.Pointer<cairo_scaled_font_t> Function(
              ffi.Pointer<cairo_font_face_t>,
              ffi.Pointer<cairo_matrix_t>,
              ffi.Pointer<cairo_matrix_t>,
              ffi.Pointer<cairo_font_options_t>)>();

  void cairo_scaled_font_destroy(
    ffi.Pointer<cairo_scaled_font_t> scaled_font,
  ) {
    return _cairo_scaled_font_destroy(
      scaled_font,
    );
  }

  late final _cairo_scaled_font_destroyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<cairo_scaled_font_t>)>>('cairo_scaled_font_destroy');
  late final _cairo_scaled_font_destroy = _cairo_scaled_font_destroyPtr
      .asFunction<void Function(ffi.Pointer<cairo_scaled_font_t>)>();

  void cairo_scaled_font_extents(
    ffi.Pointer<cairo_scaled_font_t> scaled_font,
    ffi.Pointer<cairo_font_extents_t> extents,
  ) {
    return _cairo_scaled_font_extents(
      scaled_font,
      extents,
    );
  }

  late final _cairo_scaled_font_extentsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<cairo_scaled_font_t>,
              ffi.Pointer<cairo_font_extents_t>)>>('cairo_scaled_font_extents');
  late final _cairo_scaled_font_extents =
      _cairo_scaled_font_extentsPtr.asFunction<
          void Function(ffi.Pointer<cairo_scaled_font_t>,
              ffi.Pointer<cairo_font_extents_t>)>();

  void cairo_scaled_font_get_ctm(
    ffi.Pointer<cairo_scaled_font_t> scaled_font,
    ffi.Pointer<cairo_matrix_t> ctm,
  ) {
    return _cairo_scaled_font_get_ctm(
      scaled_font,
      ctm,
    );
  }

  late final _cairo_scaled_font_get_ctmPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<cairo_scaled_font_t>,
              ffi.Pointer<cairo_matrix_t>)>>('cairo_scaled_font_get_ctm');
  late final _cairo_scaled_font_get_ctm =
      _cairo_scaled_font_get_ctmPtr.asFunction<
          void Function(
              ffi.Pointer<cairo_scaled_font_t>, ffi.Pointer<cairo_matrix_t>)>();

  ffi.Pointer<cairo_font_face_t> cairo_scaled_font_get_font_face(
    ffi.Pointer<cairo_scaled_font_t> scaled_font,
  ) {
    return _cairo_scaled_font_get_font_face(
      scaled_font,
    );
  }

  late final _cairo_scaled_font_get_font_facePtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<cairo_font_face_t> Function(
                  ffi.Pointer<cairo_scaled_font_t>)>>(
      'cairo_scaled_font_get_font_face');
  late final _cairo_scaled_font_get_font_face =
      _cairo_scaled_font_get_font_facePtr.asFunction<
          ffi.Pointer<cairo_font_face_t> Function(
              ffi.Pointer<cairo_scaled_font_t>)>();

  void cairo_scaled_font_get_font_matrix(
    ffi.Pointer<cairo_scaled_font_t> scaled_font,
    ffi.Pointer<cairo_matrix_t> font_matrix,
  ) {
    return _cairo_scaled_font_get_font_matrix(
      scaled_font,
      font_matrix,
    );
  }

  late final _cairo_scaled_font_get_font_matrixPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<cairo_scaled_font_t>,
                  ffi.Pointer<cairo_matrix_t>)>>(
      'cairo_scaled_font_get_font_matrix');
  late final _cairo_scaled_font_get_font_matrix =
      _cairo_scaled_font_get_font_matrixPtr.asFunction<
          void Function(
              ffi.Pointer<cairo_scaled_font_t>, ffi.Pointer<cairo_matrix_t>)>();

  void cairo_scaled_font_get_font_options(
    ffi.Pointer<cairo_scaled_font_t> scaled_font,
    ffi.Pointer<cairo_font_options_t> options,
  ) {
    return _cairo_scaled_font_get_font_options(
      scaled_font,
      options,
    );
  }

  late final _cairo_scaled_font_get_font_optionsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<cairo_scaled_font_t>,
                  ffi.Pointer<cairo_font_options_t>)>>(
      'cairo_scaled_font_get_font_options');
  late final _cairo_scaled_font_get_font_options =
      _cairo_scaled_font_get_font_optionsPtr.asFunction<
          void Function(ffi.Pointer<cairo_scaled_font_t>,
              ffi.Pointer<cairo_font_options_t>)>();

  int cairo_scaled_font_get_reference_count(
    ffi.Pointer<cairo_scaled_font_t> scaled_font,
  ) {
    return _cairo_scaled_font_get_reference_count(
      scaled_font,
    );
  }

  late final _cairo_scaled_font_get_reference_countPtr = _lookup<
          ffi.NativeFunction<
              ffi.Uint32 Function(ffi.Pointer<cairo_scaled_font_t>)>>(
      'cairo_scaled_font_get_reference_count');
  late final _cairo_scaled_font_get_reference_count =
      _cairo_scaled_font_get_reference_countPtr
          .asFunction<int Function(ffi.Pointer<cairo_scaled_font_t>)>();

  void cairo_scaled_font_get_scale_matrix(
    ffi.Pointer<cairo_scaled_font_t> scaled_font,
    ffi.Pointer<cairo_matrix_t> scale_matrix,
  ) {
    return _cairo_scaled_font_get_scale_matrix(
      scaled_font,
      scale_matrix,
    );
  }

  late final _cairo_scaled_font_get_scale_matrixPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<cairo_scaled_font_t>,
                  ffi.Pointer<cairo_matrix_t>)>>(
      'cairo_scaled_font_get_scale_matrix');
  late final _cairo_scaled_font_get_scale_matrix =
      _cairo_scaled_font_get_scale_matrixPtr.asFunction<
          void Function(
              ffi.Pointer<cairo_scaled_font_t>, ffi.Pointer<cairo_matrix_t>)>();

  int cairo_scaled_font_get_type(
    ffi.Pointer<cairo_scaled_font_t> scaled_font,
  ) {
    return _cairo_scaled_font_get_type(
      scaled_font,
    );
  }

  late final _cairo_scaled_font_get_typePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<cairo_scaled_font_t>)>>('cairo_scaled_font_get_type');
  late final _cairo_scaled_font_get_type = _cairo_scaled_font_get_typePtr
      .asFunction<int Function(ffi.Pointer<cairo_scaled_font_t>)>();

  ffi.Pointer<ffi.Void> cairo_scaled_font_get_user_data(
    ffi.Pointer<cairo_scaled_font_t> scaled_font,
    ffi.Pointer<cairo_user_data_key_t> key,
  ) {
    return _cairo_scaled_font_get_user_data(
      scaled_font,
      key,
    );
  }

  late final _cairo_scaled_font_get_user_dataPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Void> Function(ffi.Pointer<cairo_scaled_font_t>,
                  ffi.Pointer<cairo_user_data_key_t>)>>(
      'cairo_scaled_font_get_user_data');
  late final _cairo_scaled_font_get_user_data =
      _cairo_scaled_font_get_user_dataPtr.asFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<cairo_scaled_font_t>,
              ffi.Pointer<cairo_user_data_key_t>)>();

  void cairo_scaled_font_glyph_extents(
    ffi.Pointer<cairo_scaled_font_t> scaled_font,
    ffi.Pointer<cairo_glyph_t> glyphs,
    int num_glyphs,
    ffi.Pointer<cairo_text_extents_t> extents,
  ) {
    return _cairo_scaled_font_glyph_extents(
      scaled_font,
      glyphs,
      num_glyphs,
      extents,
    );
  }

  late final _cairo_scaled_font_glyph_extentsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<cairo_scaled_font_t>,
                  ffi.Pointer<cairo_glyph_t>,
                  ffi.Int32,
                  ffi.Pointer<cairo_text_extents_t>)>>(
      'cairo_scaled_font_glyph_extents');
  late final _cairo_scaled_font_glyph_extents =
      _cairo_scaled_font_glyph_extentsPtr.asFunction<
          void Function(
              ffi.Pointer<cairo_scaled_font_t>,
              ffi.Pointer<cairo_glyph_t>,
              int,
              ffi.Pointer<cairo_text_extents_t>)>();

  ffi.Pointer<cairo_scaled_font_t> cairo_scaled_font_reference(
    ffi.Pointer<cairo_scaled_font_t> scaled_font,
  ) {
    return _cairo_scaled_font_reference(
      scaled_font,
    );
  }

  late final _cairo_scaled_font_referencePtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<cairo_scaled_font_t> Function(
                  ffi.Pointer<cairo_scaled_font_t>)>>(
      'cairo_scaled_font_reference');
  late final _cairo_scaled_font_reference =
      _cairo_scaled_font_referencePtr.asFunction<
          ffi.Pointer<cairo_scaled_font_t> Function(
              ffi.Pointer<cairo_scaled_font_t>)>();

  int cairo_scaled_font_set_user_data(
    ffi.Pointer<cairo_scaled_font_t> scaled_font,
    ffi.Pointer<cairo_user_data_key_t> key,
    ffi.Pointer<ffi.Void> user_data,
    cairo_destroy_func_t destroy,
  ) {
    return _cairo_scaled_font_set_user_data(
      scaled_font,
      key,
      user_data,
      destroy,
    );
  }

  late final _cairo_scaled_font_set_user_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<cairo_scaled_font_t>,
              ffi.Pointer<cairo_user_data_key_t>,
              ffi.Pointer<ffi.Void>,
              cairo_destroy_func_t)>>('cairo_scaled_font_set_user_data');
  late final _cairo_scaled_font_set_user_data =
      _cairo_scaled_font_set_user_dataPtr.asFunction<
          int Function(
              ffi.Pointer<cairo_scaled_font_t>,
              ffi.Pointer<cairo_user_data_key_t>,
              ffi.Pointer<ffi.Void>,
              cairo_destroy_func_t)>();

  int cairo_scaled_font_status(
    ffi.Pointer<cairo_scaled_font_t> scaled_font,
  ) {
    return _cairo_scaled_font_status(
      scaled_font,
    );
  }

  late final _cairo_scaled_font_statusPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<cairo_scaled_font_t>)>>('cairo_scaled_font_status');
  late final _cairo_scaled_font_status = _cairo_scaled_font_statusPtr
      .asFunction<int Function(ffi.Pointer<cairo_scaled_font_t>)>();

  void cairo_scaled_font_text_extents(
    ffi.Pointer<cairo_scaled_font_t> scaled_font,
    ffi.Pointer<ffi.Int8> utf8,
    ffi.Pointer<cairo_text_extents_t> extents,
  ) {
    return _cairo_scaled_font_text_extents(
      scaled_font,
      utf8,
      extents,
    );
  }

  late final _cairo_scaled_font_text_extentsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<cairo_scaled_font_t>,
                  ffi.Pointer<ffi.Int8>, ffi.Pointer<cairo_text_extents_t>)>>(
      'cairo_scaled_font_text_extents');
  late final _cairo_scaled_font_text_extents =
      _cairo_scaled_font_text_extentsPtr.asFunction<
          void Function(ffi.Pointer<cairo_scaled_font_t>, ffi.Pointer<ffi.Int8>,
              ffi.Pointer<cairo_text_extents_t>)>();

  int cairo_scaled_font_text_to_glyphs(
    ffi.Pointer<cairo_scaled_font_t> scaled_font,
    double x,
    double y,
    ffi.Pointer<ffi.Int8> utf8,
    int utf8_len,
    ffi.Pointer<ffi.Pointer<cairo_glyph_t>> glyphs,
    ffi.Pointer<ffi.Int32> num_glyphs,
    ffi.Pointer<ffi.Pointer<cairo_text_cluster_t>> clusters,
    ffi.Pointer<ffi.Int32> num_clusters,
    ffi.Pointer<ffi.Int32> cluster_flags,
  ) {
    return _cairo_scaled_font_text_to_glyphs(
      scaled_font,
      x,
      y,
      utf8,
      utf8_len,
      glyphs,
      num_glyphs,
      clusters,
      num_clusters,
      cluster_flags,
    );
  }

  late final _cairo_scaled_font_text_to_glyphsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<cairo_scaled_font_t>,
              ffi.Double,
              ffi.Double,
              ffi.Pointer<ffi.Int8>,
              ffi.Int32,
              ffi.Pointer<ffi.Pointer<cairo_glyph_t>>,
              ffi.Pointer<ffi.Int32>,
              ffi.Pointer<ffi.Pointer<cairo_text_cluster_t>>,
              ffi.Pointer<ffi.Int32>,
              ffi.Pointer<ffi.Int32>)>>('cairo_scaled_font_text_to_glyphs');
  late final _cairo_scaled_font_text_to_glyphs =
      _cairo_scaled_font_text_to_glyphsPtr.asFunction<
          int Function(
              ffi.Pointer<cairo_scaled_font_t>,
              double,
              double,
              ffi.Pointer<ffi.Int8>,
              int,
              ffi.Pointer<ffi.Pointer<cairo_glyph_t>>,
              ffi.Pointer<ffi.Int32>,
              ffi.Pointer<ffi.Pointer<cairo_text_cluster_t>>,
              ffi.Pointer<ffi.Int32>,
              ffi.Pointer<ffi.Int32>)>();

  /// This interface is for dealing with text as text, not caring about the
  /// font object inside the the cairo_t.
  void cairo_select_font_face(
    ffi.Pointer<cairo_t> cr,
    ffi.Pointer<ffi.Int8> family,
    int slant,
    int weight,
  ) {
    return _cairo_select_font_face(
      cr,
      family,
      slant,
      weight,
    );
  }

  late final _cairo_select_font_facePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<cairo_t>, ffi.Pointer<ffi.Int8>,
              ffi.Int32, ffi.Int32)>>('cairo_select_font_face');
  late final _cairo_select_font_face = _cairo_select_font_facePtr.asFunction<
      void Function(ffi.Pointer<cairo_t>, ffi.Pointer<ffi.Int8>, int, int)>();

  void cairo_set_antialias(
    ffi.Pointer<cairo_t> cr,
    int antialias,
  ) {
    return _cairo_set_antialias(
      cr,
      antialias,
    );
  }

  late final _cairo_set_antialiasPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<cairo_t>, ffi.Int32)>>('cairo_set_antialias');
  late final _cairo_set_antialias = _cairo_set_antialiasPtr
      .asFunction<void Function(ffi.Pointer<cairo_t>, int)>();

  void cairo_set_dash(
    ffi.Pointer<cairo_t> cr,
    ffi.Pointer<ffi.Double> dashes,
    int num_dashes,
    double offset,
  ) {
    return _cairo_set_dash(
      cr,
      dashes,
      num_dashes,
      offset,
    );
  }

  late final _cairo_set_dashPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<cairo_t>, ffi.Pointer<ffi.Double>,
              ffi.Int32, ffi.Double)>>('cairo_set_dash');
  late final _cairo_set_dash = _cairo_set_dashPtr.asFunction<
      void Function(
          ffi.Pointer<cairo_t>, ffi.Pointer<ffi.Double>, int, double)>();

  void cairo_set_fill_rule(
    ffi.Pointer<cairo_t> cr,
    int fill_rule,
  ) {
    return _cairo_set_fill_rule(
      cr,
      fill_rule,
    );
  }

  late final _cairo_set_fill_rulePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<cairo_t>, ffi.Int32)>>('cairo_set_fill_rule');
  late final _cairo_set_fill_rule = _cairo_set_fill_rulePtr
      .asFunction<void Function(ffi.Pointer<cairo_t>, int)>();

  void cairo_set_font_face(
    ffi.Pointer<cairo_t> cr,
    ffi.Pointer<cairo_font_face_t> font_face,
  ) {
    return _cairo_set_font_face(
      cr,
      font_face,
    );
  }

  late final _cairo_set_font_facePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<cairo_t>,
              ffi.Pointer<cairo_font_face_t>)>>('cairo_set_font_face');
  late final _cairo_set_font_face = _cairo_set_font_facePtr.asFunction<
      void Function(ffi.Pointer<cairo_t>, ffi.Pointer<cairo_font_face_t>)>();

  void cairo_set_font_matrix(
    ffi.Pointer<cairo_t> cr,
    ffi.Pointer<cairo_matrix_t> matrix,
  ) {
    return _cairo_set_font_matrix(
      cr,
      matrix,
    );
  }

  late final _cairo_set_font_matrixPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<cairo_t>,
              ffi.Pointer<cairo_matrix_t>)>>('cairo_set_font_matrix');
  late final _cairo_set_font_matrix = _cairo_set_font_matrixPtr.asFunction<
      void Function(ffi.Pointer<cairo_t>, ffi.Pointer<cairo_matrix_t>)>();

  void cairo_set_font_options(
    ffi.Pointer<cairo_t> cr,
    ffi.Pointer<cairo_font_options_t> options,
  ) {
    return _cairo_set_font_options(
      cr,
      options,
    );
  }

  late final _cairo_set_font_optionsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<cairo_t>,
              ffi.Pointer<cairo_font_options_t>)>>('cairo_set_font_options');
  late final _cairo_set_font_options = _cairo_set_font_optionsPtr.asFunction<
      void Function(ffi.Pointer<cairo_t>, ffi.Pointer<cairo_font_options_t>)>();

  void cairo_set_font_size(
    ffi.Pointer<cairo_t> cr,
    double size,
  ) {
    return _cairo_set_font_size(
      cr,
      size,
    );
  }

  late final _cairo_set_font_sizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<cairo_t>, ffi.Double)>>('cairo_set_font_size');
  late final _cairo_set_font_size = _cairo_set_font_sizePtr
      .asFunction<void Function(ffi.Pointer<cairo_t>, double)>();

  void cairo_set_hairline(
    ffi.Pointer<cairo_t> cr,
    int set_hairline,
  ) {
    return _cairo_set_hairline(
      cr,
      set_hairline,
    );
  }

  late final _cairo_set_hairlinePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<cairo_t>, cairo_bool_t)>>('cairo_set_hairline');
  late final _cairo_set_hairline = _cairo_set_hairlinePtr
      .asFunction<void Function(ffi.Pointer<cairo_t>, int)>();

  void cairo_set_line_cap(
    ffi.Pointer<cairo_t> cr,
    int line_cap,
  ) {
    return _cairo_set_line_cap(
      cr,
      line_cap,
    );
  }

  late final _cairo_set_line_capPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<cairo_t>, ffi.Int32)>>('cairo_set_line_cap');
  late final _cairo_set_line_cap = _cairo_set_line_capPtr
      .asFunction<void Function(ffi.Pointer<cairo_t>, int)>();

  void cairo_set_line_join(
    ffi.Pointer<cairo_t> cr,
    int line_join,
  ) {
    return _cairo_set_line_join(
      cr,
      line_join,
    );
  }

  late final _cairo_set_line_joinPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<cairo_t>, ffi.Int32)>>('cairo_set_line_join');
  late final _cairo_set_line_join = _cairo_set_line_joinPtr
      .asFunction<void Function(ffi.Pointer<cairo_t>, int)>();

  void cairo_set_line_width(
    ffi.Pointer<cairo_t> cr,
    double width,
  ) {
    return _cairo_set_line_width(
      cr,
      width,
    );
  }

  late final _cairo_set_line_widthPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<cairo_t>, ffi.Double)>>('cairo_set_line_width');
  late final _cairo_set_line_width = _cairo_set_line_widthPtr
      .asFunction<void Function(ffi.Pointer<cairo_t>, double)>();

  void cairo_set_matrix(
    ffi.Pointer<cairo_t> cr,
    ffi.Pointer<cairo_matrix_t> matrix,
  ) {
    return _cairo_set_matrix(
      cr,
      matrix,
    );
  }

  late final _cairo_set_matrixPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<cairo_t>,
              ffi.Pointer<cairo_matrix_t>)>>('cairo_set_matrix');
  late final _cairo_set_matrix = _cairo_set_matrixPtr.asFunction<
      void Function(ffi.Pointer<cairo_t>, ffi.Pointer<cairo_matrix_t>)>();

  void cairo_set_miter_limit(
    ffi.Pointer<cairo_t> cr,
    double limit,
  ) {
    return _cairo_set_miter_limit(
      cr,
      limit,
    );
  }

  late final _cairo_set_miter_limitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<cairo_t>, ffi.Double)>>('cairo_set_miter_limit');
  late final _cairo_set_miter_limit = _cairo_set_miter_limitPtr
      .asFunction<void Function(ffi.Pointer<cairo_t>, double)>();

  void cairo_set_operator(
    ffi.Pointer<cairo_t> cr,
    int op,
  ) {
    return _cairo_set_operator(
      cr,
      op,
    );
  }

  late final _cairo_set_operatorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<cairo_t>, ffi.Int32)>>('cairo_set_operator');
  late final _cairo_set_operator = _cairo_set_operatorPtr
      .asFunction<void Function(ffi.Pointer<cairo_t>, int)>();

  void cairo_set_scaled_font(
    ffi.Pointer<cairo_t> cr,
    ffi.Pointer<cairo_scaled_font_t> scaled_font,
  ) {
    return _cairo_set_scaled_font(
      cr,
      scaled_font,
    );
  }

  late final _cairo_set_scaled_fontPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<cairo_t>,
              ffi.Pointer<cairo_scaled_font_t>)>>('cairo_set_scaled_font');
  late final _cairo_set_scaled_font = _cairo_set_scaled_fontPtr.asFunction<
      void Function(ffi.Pointer<cairo_t>, ffi.Pointer<cairo_scaled_font_t>)>();

  void cairo_set_source(
    ffi.Pointer<cairo_t> cr,
    ffi.Pointer<cairo_pattern_t> source,
  ) {
    return _cairo_set_source(
      cr,
      source,
    );
  }

  late final _cairo_set_sourcePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<cairo_t>,
              ffi.Pointer<cairo_pattern_t>)>>('cairo_set_source');
  late final _cairo_set_source = _cairo_set_sourcePtr.asFunction<
      void Function(ffi.Pointer<cairo_t>, ffi.Pointer<cairo_pattern_t>)>();

  void cairo_set_source_rgb(
    ffi.Pointer<cairo_t> cr,
    double red,
    double green,
    double blue,
  ) {
    return _cairo_set_source_rgb(
      cr,
      red,
      green,
      blue,
    );
  }

  late final _cairo_set_source_rgbPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<cairo_t>, ffi.Double, ffi.Double,
              ffi.Double)>>('cairo_set_source_rgb');
  late final _cairo_set_source_rgb = _cairo_set_source_rgbPtr.asFunction<
      void Function(ffi.Pointer<cairo_t>, double, double, double)>();

  void cairo_set_source_rgba(
    ffi.Pointer<cairo_t> cr,
    double red,
    double green,
    double blue,
    double alpha,
  ) {
    return _cairo_set_source_rgba(
      cr,
      red,
      green,
      blue,
      alpha,
    );
  }

  late final _cairo_set_source_rgbaPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<cairo_t>, ffi.Double, ffi.Double,
              ffi.Double, ffi.Double)>>('cairo_set_source_rgba');
  late final _cairo_set_source_rgba = _cairo_set_source_rgbaPtr.asFunction<
      void Function(ffi.Pointer<cairo_t>, double, double, double, double)>();

  void cairo_set_source_surface(
    ffi.Pointer<cairo_t> cr,
    ffi.Pointer<cairo_surface_t> surface,
    double x,
    double y,
  ) {
    return _cairo_set_source_surface(
      cr,
      surface,
      x,
      y,
    );
  }

  late final _cairo_set_source_surfacePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<cairo_t>, ffi.Pointer<cairo_surface_t>,
              ffi.Double, ffi.Double)>>('cairo_set_source_surface');
  late final _cairo_set_source_surface =
      _cairo_set_source_surfacePtr.asFunction<
          void Function(ffi.Pointer<cairo_t>, ffi.Pointer<cairo_surface_t>,
              double, double)>();

  void cairo_set_tolerance(
    ffi.Pointer<cairo_t> cr,
    double tolerance,
  ) {
    return _cairo_set_tolerance(
      cr,
      tolerance,
    );
  }

  late final _cairo_set_tolerancePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<cairo_t>, ffi.Double)>>('cairo_set_tolerance');
  late final _cairo_set_tolerance = _cairo_set_tolerancePtr
      .asFunction<void Function(ffi.Pointer<cairo_t>, double)>();

  int cairo_set_user_data(
    ffi.Pointer<cairo_t> cr,
    ffi.Pointer<cairo_user_data_key_t> key,
    ffi.Pointer<ffi.Void> user_data,
    cairo_destroy_func_t destroy,
  ) {
    return _cairo_set_user_data(
      cr,
      key,
      user_data,
      destroy,
    );
  }

  late final _cairo_set_user_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<cairo_t>,
              ffi.Pointer<cairo_user_data_key_t>,
              ffi.Pointer<ffi.Void>,
              cairo_destroy_func_t)>>('cairo_set_user_data');
  late final _cairo_set_user_data = _cairo_set_user_dataPtr.asFunction<
      int Function(ffi.Pointer<cairo_t>, ffi.Pointer<cairo_user_data_key_t>,
          ffi.Pointer<ffi.Void>, cairo_destroy_func_t)>();

  void cairo_show_glyphs(
    ffi.Pointer<cairo_t> cr,
    ffi.Pointer<cairo_glyph_t> glyphs,
    int num_glyphs,
  ) {
    return _cairo_show_glyphs(
      cr,
      glyphs,
      num_glyphs,
    );
  }

  late final _cairo_show_glyphsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<cairo_t>, ffi.Pointer<cairo_glyph_t>,
              ffi.Int32)>>('cairo_show_glyphs');
  late final _cairo_show_glyphs = _cairo_show_glyphsPtr.asFunction<
      void Function(ffi.Pointer<cairo_t>, ffi.Pointer<cairo_glyph_t>, int)>();

  void cairo_show_page(
    ffi.Pointer<cairo_t> cr,
  ) {
    return _cairo_show_page(
      cr,
    );
  }

  late final _cairo_show_pagePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<cairo_t>)>>(
          'cairo_show_page');
  late final _cairo_show_page =
      _cairo_show_pagePtr.asFunction<void Function(ffi.Pointer<cairo_t>)>();

  void cairo_show_text(
    ffi.Pointer<cairo_t> cr,
    ffi.Pointer<ffi.Int8> utf8,
  ) {
    return _cairo_show_text(
      cr,
      utf8,
    );
  }

  late final _cairo_show_textPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<cairo_t>, ffi.Pointer<ffi.Int8>)>>('cairo_show_text');
  late final _cairo_show_text = _cairo_show_textPtr
      .asFunction<void Function(ffi.Pointer<cairo_t>, ffi.Pointer<ffi.Int8>)>();

  void cairo_show_text_glyphs(
    ffi.Pointer<cairo_t> cr,
    ffi.Pointer<ffi.Int8> utf8,
    int utf8_len,
    ffi.Pointer<cairo_glyph_t> glyphs,
    int num_glyphs,
    ffi.Pointer<cairo_text_cluster_t> clusters,
    int num_clusters,
    int cluster_flags,
  ) {
    return _cairo_show_text_glyphs(
      cr,
      utf8,
      utf8_len,
      glyphs,
      num_glyphs,
      clusters,
      num_clusters,
      cluster_flags,
    );
  }

  late final _cairo_show_text_glyphsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<cairo_t>,
              ffi.Pointer<ffi.Int8>,
              ffi.Int32,
              ffi.Pointer<cairo_glyph_t>,
              ffi.Int32,
              ffi.Pointer<cairo_text_cluster_t>,
              ffi.Int32,
              ffi.Int32)>>('cairo_show_text_glyphs');
  late final _cairo_show_text_glyphs = _cairo_show_text_glyphsPtr.asFunction<
      void Function(
          ffi.Pointer<cairo_t>,
          ffi.Pointer<ffi.Int8>,
          int,
          ffi.Pointer<cairo_glyph_t>,
          int,
          ffi.Pointer<cairo_text_cluster_t>,
          int,
          int)>();

  /// Error status queries
  int cairo_status(
    ffi.Pointer<cairo_t> cr,
  ) {
    return _cairo_status(
      cr,
    );
  }

  late final _cairo_statusPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<cairo_t>)>>(
          'cairo_status');
  late final _cairo_status =
      _cairo_statusPtr.asFunction<int Function(ffi.Pointer<cairo_t>)>();

  ffi.Pointer<ffi.Int8> cairo_status_to_string(
    int status,
  ) {
    return _cairo_status_to_string(
      status,
    );
  }

  late final _cairo_status_to_stringPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int8> Function(ffi.Int32)>>(
          'cairo_status_to_string');
  late final _cairo_status_to_string = _cairo_status_to_stringPtr
      .asFunction<ffi.Pointer<ffi.Int8> Function(int)>();

  void cairo_stroke(
    ffi.Pointer<cairo_t> cr,
  ) {
    return _cairo_stroke(
      cr,
    );
  }

  late final _cairo_strokePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<cairo_t>)>>(
          'cairo_stroke');
  late final _cairo_stroke =
      _cairo_strokePtr.asFunction<void Function(ffi.Pointer<cairo_t>)>();

  /// Rectangular extents
  void cairo_stroke_extents(
    ffi.Pointer<cairo_t> cr,
    ffi.Pointer<ffi.Double> x1,
    ffi.Pointer<ffi.Double> y1,
    ffi.Pointer<ffi.Double> x2,
    ffi.Pointer<ffi.Double> y2,
  ) {
    return _cairo_stroke_extents(
      cr,
      x1,
      y1,
      x2,
      y2,
    );
  }

  late final _cairo_stroke_extentsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<cairo_t>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>>('cairo_stroke_extents');
  late final _cairo_stroke_extents = _cairo_stroke_extentsPtr.asFunction<
      void Function(
          ffi.Pointer<cairo_t>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>)>();

  void cairo_stroke_preserve(
    ffi.Pointer<cairo_t> cr,
  ) {
    return _cairo_stroke_preserve(
      cr,
    );
  }

  late final _cairo_stroke_preservePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<cairo_t>)>>(
          'cairo_stroke_preserve');
  late final _cairo_stroke_preserve = _cairo_stroke_preservePtr
      .asFunction<void Function(ffi.Pointer<cairo_t>)>();

  void cairo_surface_copy_page(
    ffi.Pointer<cairo_surface_t> surface,
  ) {
    return _cairo_surface_copy_page(
      surface,
    );
  }

  late final _cairo_surface_copy_pagePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<cairo_surface_t>)>>(
      'cairo_surface_copy_page');
  late final _cairo_surface_copy_page = _cairo_surface_copy_pagePtr
      .asFunction<void Function(ffi.Pointer<cairo_surface_t>)>();

  ffi.Pointer<cairo_surface_t> cairo_surface_create_for_rectangle(
    ffi.Pointer<cairo_surface_t> target,
    double x,
    double y,
    double width,
    double height,
  ) {
    return _cairo_surface_create_for_rectangle(
      target,
      x,
      y,
      width,
      height,
    );
  }

  late final _cairo_surface_create_for_rectanglePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<cairo_surface_t> Function(
              ffi.Pointer<cairo_surface_t>,
              ffi.Double,
              ffi.Double,
              ffi.Double,
              ffi.Double)>>('cairo_surface_create_for_rectangle');
  late final _cairo_surface_create_for_rectangle =
      _cairo_surface_create_for_rectanglePtr.asFunction<
          ffi.Pointer<cairo_surface_t> Function(
              ffi.Pointer<cairo_surface_t>, double, double, double, double)>();

  ffi.Pointer<cairo_surface_t> cairo_surface_create_observer(
    ffi.Pointer<cairo_surface_t> target,
    int mode,
  ) {
    return _cairo_surface_create_observer(
      target,
      mode,
    );
  }

  late final _cairo_surface_create_observerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<cairo_surface_t> Function(ffi.Pointer<cairo_surface_t>,
              ffi.Int32)>>('cairo_surface_create_observer');
  late final _cairo_surface_create_observer =
      _cairo_surface_create_observerPtr.asFunction<
          ffi.Pointer<cairo_surface_t> Function(
              ffi.Pointer<cairo_surface_t>, int)>();

  /// Surface manipulation
  ffi.Pointer<cairo_surface_t> cairo_surface_create_similar(
    ffi.Pointer<cairo_surface_t> other,
    int content,
    int width,
    int height,
  ) {
    return _cairo_surface_create_similar(
      other,
      content,
      width,
      height,
    );
  }

  late final _cairo_surface_create_similarPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<cairo_surface_t> Function(
              ffi.Pointer<cairo_surface_t>,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32)>>('cairo_surface_create_similar');
  late final _cairo_surface_create_similar =
      _cairo_surface_create_similarPtr.asFunction<
          ffi.Pointer<cairo_surface_t> Function(
              ffi.Pointer<cairo_surface_t>, int, int, int)>();

  ffi.Pointer<cairo_surface_t> cairo_surface_create_similar_image(
    ffi.Pointer<cairo_surface_t> other,
    int format,
    int width,
    int height,
  ) {
    return _cairo_surface_create_similar_image(
      other,
      format,
      width,
      height,
    );
  }

  late final _cairo_surface_create_similar_imagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<cairo_surface_t> Function(
              ffi.Pointer<cairo_surface_t>,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32)>>('cairo_surface_create_similar_image');
  late final _cairo_surface_create_similar_image =
      _cairo_surface_create_similar_imagePtr.asFunction<
          ffi.Pointer<cairo_surface_t> Function(
              ffi.Pointer<cairo_surface_t>, int, int, int)>();

  void cairo_surface_destroy(
    ffi.Pointer<cairo_surface_t> surface,
  ) {
    return _cairo_surface_destroy(
      surface,
    );
  }

  late final _cairo_surface_destroyPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<cairo_surface_t>)>>(
      'cairo_surface_destroy');
  late final _cairo_surface_destroy = _cairo_surface_destroyPtr
      .asFunction<void Function(ffi.Pointer<cairo_surface_t>)>();

  void cairo_surface_finish(
    ffi.Pointer<cairo_surface_t> surface,
  ) {
    return _cairo_surface_finish(
      surface,
    );
  }

  late final _cairo_surface_finishPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<cairo_surface_t>)>>(
      'cairo_surface_finish');
  late final _cairo_surface_finish = _cairo_surface_finishPtr
      .asFunction<void Function(ffi.Pointer<cairo_surface_t>)>();

  void cairo_surface_flush(
    ffi.Pointer<cairo_surface_t> surface,
  ) {
    return _cairo_surface_flush(
      surface,
    );
  }

  late final _cairo_surface_flushPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<cairo_surface_t>)>>(
      'cairo_surface_flush');
  late final _cairo_surface_flush = _cairo_surface_flushPtr
      .asFunction<void Function(ffi.Pointer<cairo_surface_t>)>();

  int cairo_surface_get_content(
    ffi.Pointer<cairo_surface_t> surface,
  ) {
    return _cairo_surface_get_content(
      surface,
    );
  }

  late final _cairo_surface_get_contentPtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<cairo_surface_t>)>>(
      'cairo_surface_get_content');
  late final _cairo_surface_get_content = _cairo_surface_get_contentPtr
      .asFunction<int Function(ffi.Pointer<cairo_surface_t>)>();

  ffi.Pointer<cairo_device_t> cairo_surface_get_device(
    ffi.Pointer<cairo_surface_t> surface,
  ) {
    return _cairo_surface_get_device(
      surface,
    );
  }

  late final _cairo_surface_get_devicePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<cairo_device_t> Function(
              ffi.Pointer<cairo_surface_t>)>>('cairo_surface_get_device');
  late final _cairo_surface_get_device =
      _cairo_surface_get_devicePtr.asFunction<
          ffi.Pointer<cairo_device_t> Function(ffi.Pointer<cairo_surface_t>)>();

  void cairo_surface_get_device_offset(
    ffi.Pointer<cairo_surface_t> surface,
    ffi.Pointer<ffi.Double> x_offset,
    ffi.Pointer<ffi.Double> y_offset,
  ) {
    return _cairo_surface_get_device_offset(
      surface,
      x_offset,
      y_offset,
    );
  }

  late final _cairo_surface_get_device_offsetPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<cairo_surface_t>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>>('cairo_surface_get_device_offset');
  late final _cairo_surface_get_device_offset =
      _cairo_surface_get_device_offsetPtr.asFunction<
          void Function(ffi.Pointer<cairo_surface_t>, ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>();

  void cairo_surface_get_device_scale(
    ffi.Pointer<cairo_surface_t> surface,
    ffi.Pointer<ffi.Double> x_scale,
    ffi.Pointer<ffi.Double> y_scale,
  ) {
    return _cairo_surface_get_device_scale(
      surface,
      x_scale,
      y_scale,
    );
  }

  late final _cairo_surface_get_device_scalePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<cairo_surface_t>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>>('cairo_surface_get_device_scale');
  late final _cairo_surface_get_device_scale =
      _cairo_surface_get_device_scalePtr.asFunction<
          void Function(ffi.Pointer<cairo_surface_t>, ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>();

  void cairo_surface_get_fallback_resolution(
    ffi.Pointer<cairo_surface_t> surface,
    ffi.Pointer<ffi.Double> x_pixels_per_inch,
    ffi.Pointer<ffi.Double> y_pixels_per_inch,
  ) {
    return _cairo_surface_get_fallback_resolution(
      surface,
      x_pixels_per_inch,
      y_pixels_per_inch,
    );
  }

  late final _cairo_surface_get_fallback_resolutionPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<cairo_surface_t>,
                  ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Double>)>>(
      'cairo_surface_get_fallback_resolution');
  late final _cairo_surface_get_fallback_resolution =
      _cairo_surface_get_fallback_resolutionPtr.asFunction<
          void Function(ffi.Pointer<cairo_surface_t>, ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>();

  void cairo_surface_get_font_options(
    ffi.Pointer<cairo_surface_t> surface,
    ffi.Pointer<cairo_font_options_t> options,
  ) {
    return _cairo_surface_get_font_options(
      surface,
      options,
    );
  }

  late final _cairo_surface_get_font_optionsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<cairo_surface_t>,
                  ffi.Pointer<cairo_font_options_t>)>>(
      'cairo_surface_get_font_options');
  late final _cairo_surface_get_font_options =
      _cairo_surface_get_font_optionsPtr.asFunction<
          void Function(ffi.Pointer<cairo_surface_t>,
              ffi.Pointer<cairo_font_options_t>)>();

  void cairo_surface_get_mime_data(
    ffi.Pointer<cairo_surface_t> surface,
    ffi.Pointer<ffi.Int8> mime_type,
    ffi.Pointer<ffi.Pointer<ffi.Uint8>> data,
    ffi.Pointer<ffi.Uint64> length,
  ) {
    return _cairo_surface_get_mime_data(
      surface,
      mime_type,
      data,
      length,
    );
  }

  late final _cairo_surface_get_mime_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<cairo_surface_t>,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Pointer<ffi.Uint8>>,
              ffi.Pointer<ffi.Uint64>)>>('cairo_surface_get_mime_data');
  late final _cairo_surface_get_mime_data =
      _cairo_surface_get_mime_dataPtr.asFunction<
          void Function(ffi.Pointer<cairo_surface_t>, ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Pointer<ffi.Uint8>>, ffi.Pointer<ffi.Uint64>)>();

  int cairo_surface_get_reference_count(
    ffi.Pointer<cairo_surface_t> surface,
  ) {
    return _cairo_surface_get_reference_count(
      surface,
    );
  }

  late final _cairo_surface_get_reference_countPtr = _lookup<
          ffi.NativeFunction<
              ffi.Uint32 Function(ffi.Pointer<cairo_surface_t>)>>(
      'cairo_surface_get_reference_count');
  late final _cairo_surface_get_reference_count =
      _cairo_surface_get_reference_countPtr
          .asFunction<int Function(ffi.Pointer<cairo_surface_t>)>();

  int cairo_surface_get_type(
    ffi.Pointer<cairo_surface_t> surface,
  ) {
    return _cairo_surface_get_type(
      surface,
    );
  }

  late final _cairo_surface_get_typePtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<cairo_surface_t>)>>(
      'cairo_surface_get_type');
  late final _cairo_surface_get_type = _cairo_surface_get_typePtr
      .asFunction<int Function(ffi.Pointer<cairo_surface_t>)>();

  ffi.Pointer<ffi.Void> cairo_surface_get_user_data(
    ffi.Pointer<cairo_surface_t> surface,
    ffi.Pointer<cairo_user_data_key_t> key,
  ) {
    return _cairo_surface_get_user_data(
      surface,
      key,
    );
  }

  late final _cairo_surface_get_user_dataPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Void> Function(ffi.Pointer<cairo_surface_t>,
                  ffi.Pointer<cairo_user_data_key_t>)>>(
      'cairo_surface_get_user_data');
  late final _cairo_surface_get_user_data =
      _cairo_surface_get_user_dataPtr.asFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<cairo_surface_t>,
              ffi.Pointer<cairo_user_data_key_t>)>();

  int cairo_surface_has_show_text_glyphs(
    ffi.Pointer<cairo_surface_t> surface,
  ) {
    return _cairo_surface_has_show_text_glyphs(
      surface,
    );
  }

  late final _cairo_surface_has_show_text_glyphsPtr = _lookup<
          ffi.NativeFunction<
              cairo_bool_t Function(ffi.Pointer<cairo_surface_t>)>>(
      'cairo_surface_has_show_text_glyphs');
  late final _cairo_surface_has_show_text_glyphs =
      _cairo_surface_has_show_text_glyphsPtr
          .asFunction<int Function(ffi.Pointer<cairo_surface_t>)>();

  ffi.Pointer<cairo_surface_t> cairo_surface_map_to_image(
    ffi.Pointer<cairo_surface_t> surface,
    ffi.Pointer<cairo_rectangle_int_t> extents,
  ) {
    return _cairo_surface_map_to_image(
      surface,
      extents,
    );
  }

  late final _cairo_surface_map_to_imagePtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<cairo_surface_t> Function(
                  ffi.Pointer<cairo_surface_t>,
                  ffi.Pointer<cairo_rectangle_int_t>)>>(
      'cairo_surface_map_to_image');
  late final _cairo_surface_map_to_image =
      _cairo_surface_map_to_imagePtr.asFunction<
          ffi.Pointer<cairo_surface_t> Function(ffi.Pointer<cairo_surface_t>,
              ffi.Pointer<cairo_rectangle_int_t>)>();

  void cairo_surface_mark_dirty(
    ffi.Pointer<cairo_surface_t> surface,
  ) {
    return _cairo_surface_mark_dirty(
      surface,
    );
  }

  late final _cairo_surface_mark_dirtyPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<cairo_surface_t>)>>(
      'cairo_surface_mark_dirty');
  late final _cairo_surface_mark_dirty = _cairo_surface_mark_dirtyPtr
      .asFunction<void Function(ffi.Pointer<cairo_surface_t>)>();

  void cairo_surface_mark_dirty_rectangle(
    ffi.Pointer<cairo_surface_t> surface,
    int x,
    int y,
    int width,
    int height,
  ) {
    return _cairo_surface_mark_dirty_rectangle(
      surface,
      x,
      y,
      width,
      height,
    );
  }

  late final _cairo_surface_mark_dirty_rectanglePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<cairo_surface_t>, ffi.Int32, ffi.Int32,
              ffi.Int32, ffi.Int32)>>('cairo_surface_mark_dirty_rectangle');
  late final _cairo_surface_mark_dirty_rectangle =
      _cairo_surface_mark_dirty_rectanglePtr.asFunction<
          void Function(ffi.Pointer<cairo_surface_t>, int, int, int, int)>();

  int cairo_surface_observer_add_fill_callback(
    ffi.Pointer<cairo_surface_t> abstract_surface,
    cairo_surface_observer_callback_t func,
    ffi.Pointer<ffi.Void> data,
  ) {
    return _cairo_surface_observer_add_fill_callback(
      abstract_surface,
      func,
      data,
    );
  }

  late final _cairo_surface_observer_add_fill_callbackPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<cairo_surface_t>,
                  cairo_surface_observer_callback_t, ffi.Pointer<ffi.Void>)>>(
      'cairo_surface_observer_add_fill_callback');
  late final _cairo_surface_observer_add_fill_callback =
      _cairo_surface_observer_add_fill_callbackPtr.asFunction<
          int Function(ffi.Pointer<cairo_surface_t>,
              cairo_surface_observer_callback_t, ffi.Pointer<ffi.Void>)>();

  int cairo_surface_observer_add_finish_callback(
    ffi.Pointer<cairo_surface_t> abstract_surface,
    cairo_surface_observer_callback_t func,
    ffi.Pointer<ffi.Void> data,
  ) {
    return _cairo_surface_observer_add_finish_callback(
      abstract_surface,
      func,
      data,
    );
  }

  late final _cairo_surface_observer_add_finish_callbackPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<cairo_surface_t>,
                  cairo_surface_observer_callback_t, ffi.Pointer<ffi.Void>)>>(
      'cairo_surface_observer_add_finish_callback');
  late final _cairo_surface_observer_add_finish_callback =
      _cairo_surface_observer_add_finish_callbackPtr.asFunction<
          int Function(ffi.Pointer<cairo_surface_t>,
              cairo_surface_observer_callback_t, ffi.Pointer<ffi.Void>)>();

  int cairo_surface_observer_add_flush_callback(
    ffi.Pointer<cairo_surface_t> abstract_surface,
    cairo_surface_observer_callback_t func,
    ffi.Pointer<ffi.Void> data,
  ) {
    return _cairo_surface_observer_add_flush_callback(
      abstract_surface,
      func,
      data,
    );
  }

  late final _cairo_surface_observer_add_flush_callbackPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<cairo_surface_t>,
                  cairo_surface_observer_callback_t, ffi.Pointer<ffi.Void>)>>(
      'cairo_surface_observer_add_flush_callback');
  late final _cairo_surface_observer_add_flush_callback =
      _cairo_surface_observer_add_flush_callbackPtr.asFunction<
          int Function(ffi.Pointer<cairo_surface_t>,
              cairo_surface_observer_callback_t, ffi.Pointer<ffi.Void>)>();

  int cairo_surface_observer_add_glyphs_callback(
    ffi.Pointer<cairo_surface_t> abstract_surface,
    cairo_surface_observer_callback_t func,
    ffi.Pointer<ffi.Void> data,
  ) {
    return _cairo_surface_observer_add_glyphs_callback(
      abstract_surface,
      func,
      data,
    );
  }

  late final _cairo_surface_observer_add_glyphs_callbackPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<cairo_surface_t>,
                  cairo_surface_observer_callback_t, ffi.Pointer<ffi.Void>)>>(
      'cairo_surface_observer_add_glyphs_callback');
  late final _cairo_surface_observer_add_glyphs_callback =
      _cairo_surface_observer_add_glyphs_callbackPtr.asFunction<
          int Function(ffi.Pointer<cairo_surface_t>,
              cairo_surface_observer_callback_t, ffi.Pointer<ffi.Void>)>();

  int cairo_surface_observer_add_mask_callback(
    ffi.Pointer<cairo_surface_t> abstract_surface,
    cairo_surface_observer_callback_t func,
    ffi.Pointer<ffi.Void> data,
  ) {
    return _cairo_surface_observer_add_mask_callback(
      abstract_surface,
      func,
      data,
    );
  }

  late final _cairo_surface_observer_add_mask_callbackPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<cairo_surface_t>,
                  cairo_surface_observer_callback_t, ffi.Pointer<ffi.Void>)>>(
      'cairo_surface_observer_add_mask_callback');
  late final _cairo_surface_observer_add_mask_callback =
      _cairo_surface_observer_add_mask_callbackPtr.asFunction<
          int Function(ffi.Pointer<cairo_surface_t>,
              cairo_surface_observer_callback_t, ffi.Pointer<ffi.Void>)>();

  int cairo_surface_observer_add_paint_callback(
    ffi.Pointer<cairo_surface_t> abstract_surface,
    cairo_surface_observer_callback_t func,
    ffi.Pointer<ffi.Void> data,
  ) {
    return _cairo_surface_observer_add_paint_callback(
      abstract_surface,
      func,
      data,
    );
  }

  late final _cairo_surface_observer_add_paint_callbackPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<cairo_surface_t>,
                  cairo_surface_observer_callback_t, ffi.Pointer<ffi.Void>)>>(
      'cairo_surface_observer_add_paint_callback');
  late final _cairo_surface_observer_add_paint_callback =
      _cairo_surface_observer_add_paint_callbackPtr.asFunction<
          int Function(ffi.Pointer<cairo_surface_t>,
              cairo_surface_observer_callback_t, ffi.Pointer<ffi.Void>)>();

  int cairo_surface_observer_add_stroke_callback(
    ffi.Pointer<cairo_surface_t> abstract_surface,
    cairo_surface_observer_callback_t func,
    ffi.Pointer<ffi.Void> data,
  ) {
    return _cairo_surface_observer_add_stroke_callback(
      abstract_surface,
      func,
      data,
    );
  }

  late final _cairo_surface_observer_add_stroke_callbackPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<cairo_surface_t>,
                  cairo_surface_observer_callback_t, ffi.Pointer<ffi.Void>)>>(
      'cairo_surface_observer_add_stroke_callback');
  late final _cairo_surface_observer_add_stroke_callback =
      _cairo_surface_observer_add_stroke_callbackPtr.asFunction<
          int Function(ffi.Pointer<cairo_surface_t>,
              cairo_surface_observer_callback_t, ffi.Pointer<ffi.Void>)>();

  double cairo_surface_observer_elapsed(
    ffi.Pointer<cairo_surface_t> surface,
  ) {
    return _cairo_surface_observer_elapsed(
      surface,
    );
  }

  late final _cairo_surface_observer_elapsedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Pointer<cairo_surface_t>)>>('cairo_surface_observer_elapsed');
  late final _cairo_surface_observer_elapsed =
      _cairo_surface_observer_elapsedPtr
          .asFunction<double Function(ffi.Pointer<cairo_surface_t>)>();

  int cairo_surface_observer_print(
    ffi.Pointer<cairo_surface_t> surface,
    cairo_write_func_t write_func,
    ffi.Pointer<ffi.Void> closure,
  ) {
    return _cairo_surface_observer_print(
      surface,
      write_func,
      closure,
    );
  }

  late final _cairo_surface_observer_printPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<cairo_surface_t>, cairo_write_func_t,
              ffi.Pointer<ffi.Void>)>>('cairo_surface_observer_print');
  late final _cairo_surface_observer_print =
      _cairo_surface_observer_printPtr.asFunction<
          int Function(ffi.Pointer<cairo_surface_t>, cairo_write_func_t,
              ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<cairo_surface_t> cairo_surface_reference(
    ffi.Pointer<cairo_surface_t> surface,
  ) {
    return _cairo_surface_reference(
      surface,
    );
  }

  late final _cairo_surface_referencePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<cairo_surface_t> Function(
              ffi.Pointer<cairo_surface_t>)>>('cairo_surface_reference');
  late final _cairo_surface_reference = _cairo_surface_referencePtr.asFunction<
      ffi.Pointer<cairo_surface_t> Function(ffi.Pointer<cairo_surface_t>)>();

  void cairo_surface_set_device_offset(
    ffi.Pointer<cairo_surface_t> surface,
    double x_offset,
    double y_offset,
  ) {
    return _cairo_surface_set_device_offset(
      surface,
      x_offset,
      y_offset,
    );
  }

  late final _cairo_surface_set_device_offsetPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<cairo_surface_t>, ffi.Double,
              ffi.Double)>>('cairo_surface_set_device_offset');
  late final _cairo_surface_set_device_offset =
      _cairo_surface_set_device_offsetPtr.asFunction<
          void Function(ffi.Pointer<cairo_surface_t>, double, double)>();

  void cairo_surface_set_device_scale(
    ffi.Pointer<cairo_surface_t> surface,
    double x_scale,
    double y_scale,
  ) {
    return _cairo_surface_set_device_scale(
      surface,
      x_scale,
      y_scale,
    );
  }

  late final _cairo_surface_set_device_scalePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<cairo_surface_t>, ffi.Double,
              ffi.Double)>>('cairo_surface_set_device_scale');
  late final _cairo_surface_set_device_scale =
      _cairo_surface_set_device_scalePtr.asFunction<
          void Function(ffi.Pointer<cairo_surface_t>, double, double)>();

  void cairo_surface_set_fallback_resolution(
    ffi.Pointer<cairo_surface_t> surface,
    double x_pixels_per_inch,
    double y_pixels_per_inch,
  ) {
    return _cairo_surface_set_fallback_resolution(
      surface,
      x_pixels_per_inch,
      y_pixels_per_inch,
    );
  }

  late final _cairo_surface_set_fallback_resolutionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<cairo_surface_t>, ffi.Double,
              ffi.Double)>>('cairo_surface_set_fallback_resolution');
  late final _cairo_surface_set_fallback_resolution =
      _cairo_surface_set_fallback_resolutionPtr.asFunction<
          void Function(ffi.Pointer<cairo_surface_t>, double, double)>();

  int cairo_surface_set_mime_data(
    ffi.Pointer<cairo_surface_t> surface,
    ffi.Pointer<ffi.Int8> mime_type,
    ffi.Pointer<ffi.Uint8> data,
    int length,
    cairo_destroy_func_t destroy,
    ffi.Pointer<ffi.Void> closure,
  ) {
    return _cairo_surface_set_mime_data(
      surface,
      mime_type,
      data,
      length,
      destroy,
      closure,
    );
  }

  late final _cairo_surface_set_mime_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<cairo_surface_t>,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Uint64,
              cairo_destroy_func_t,
              ffi.Pointer<ffi.Void>)>>('cairo_surface_set_mime_data');
  late final _cairo_surface_set_mime_data =
      _cairo_surface_set_mime_dataPtr.asFunction<
          int Function(
              ffi.Pointer<cairo_surface_t>,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Uint8>,
              int,
              cairo_destroy_func_t,
              ffi.Pointer<ffi.Void>)>();

  int cairo_surface_set_user_data(
    ffi.Pointer<cairo_surface_t> surface,
    ffi.Pointer<cairo_user_data_key_t> key,
    ffi.Pointer<ffi.Void> user_data,
    cairo_destroy_func_t destroy,
  ) {
    return _cairo_surface_set_user_data(
      surface,
      key,
      user_data,
      destroy,
    );
  }

  late final _cairo_surface_set_user_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<cairo_surface_t>,
              ffi.Pointer<cairo_user_data_key_t>,
              ffi.Pointer<ffi.Void>,
              cairo_destroy_func_t)>>('cairo_surface_set_user_data');
  late final _cairo_surface_set_user_data =
      _cairo_surface_set_user_dataPtr.asFunction<
          int Function(
              ffi.Pointer<cairo_surface_t>,
              ffi.Pointer<cairo_user_data_key_t>,
              ffi.Pointer<ffi.Void>,
              cairo_destroy_func_t)>();

  void cairo_surface_show_page(
    ffi.Pointer<cairo_surface_t> surface,
  ) {
    return _cairo_surface_show_page(
      surface,
    );
  }

  late final _cairo_surface_show_pagePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<cairo_surface_t>)>>(
      'cairo_surface_show_page');
  late final _cairo_surface_show_page = _cairo_surface_show_pagePtr
      .asFunction<void Function(ffi.Pointer<cairo_surface_t>)>();

  int cairo_surface_status(
    ffi.Pointer<cairo_surface_t> surface,
  ) {
    return _cairo_surface_status(
      surface,
    );
  }

  late final _cairo_surface_statusPtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<cairo_surface_t>)>>(
      'cairo_surface_status');
  late final _cairo_surface_status = _cairo_surface_statusPtr
      .asFunction<int Function(ffi.Pointer<cairo_surface_t>)>();

  int cairo_surface_supports_mime_type(
    ffi.Pointer<cairo_surface_t> surface,
    ffi.Pointer<ffi.Int8> mime_type,
  ) {
    return _cairo_surface_supports_mime_type(
      surface,
      mime_type,
    );
  }

  late final _cairo_surface_supports_mime_typePtr = _lookup<
      ffi.NativeFunction<
          cairo_bool_t Function(ffi.Pointer<cairo_surface_t>,
              ffi.Pointer<ffi.Int8>)>>('cairo_surface_supports_mime_type');
  late final _cairo_surface_supports_mime_type =
      _cairo_surface_supports_mime_typePtr.asFunction<
          int Function(ffi.Pointer<cairo_surface_t>, ffi.Pointer<ffi.Int8>)>();

  void cairo_surface_unmap_image(
    ffi.Pointer<cairo_surface_t> surface,
    ffi.Pointer<cairo_surface_t> image,
  ) {
    return _cairo_surface_unmap_image(
      surface,
      image,
    );
  }

  late final _cairo_surface_unmap_imagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<cairo_surface_t>,
              ffi.Pointer<cairo_surface_t>)>>('cairo_surface_unmap_image');
  late final _cairo_surface_unmap_image =
      _cairo_surface_unmap_imagePtr.asFunction<
          void Function(
              ffi.Pointer<cairo_surface_t>, ffi.Pointer<cairo_surface_t>)>();

  int cairo_surface_write_to_png(
    ffi.Pointer<cairo_surface_t> surface,
    ffi.Pointer<ffi.Int8> filename,
  ) {
    return _cairo_surface_write_to_png(
      surface,
      filename,
    );
  }

  late final _cairo_surface_write_to_pngPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<cairo_surface_t>,
              ffi.Pointer<ffi.Int8>)>>('cairo_surface_write_to_png');
  late final _cairo_surface_write_to_png =
      _cairo_surface_write_to_pngPtr.asFunction<
          int Function(ffi.Pointer<cairo_surface_t>, ffi.Pointer<ffi.Int8>)>();

  int cairo_surface_write_to_png_stream(
    ffi.Pointer<cairo_surface_t> surface,
    cairo_write_func_t write_func,
    ffi.Pointer<ffi.Void> closure,
  ) {
    return _cairo_surface_write_to_png_stream(
      surface,
      write_func,
      closure,
    );
  }

  late final _cairo_surface_write_to_png_streamPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<cairo_surface_t>, cairo_write_func_t,
              ffi.Pointer<ffi.Void>)>>('cairo_surface_write_to_png_stream');
  late final _cairo_surface_write_to_png_stream =
      _cairo_surface_write_to_png_streamPtr.asFunction<
          int Function(ffi.Pointer<cairo_surface_t>, cairo_write_func_t,
              ffi.Pointer<ffi.Void>)>();

  void cairo_tag_begin(
    ffi.Pointer<cairo_t> cr,
    ffi.Pointer<ffi.Int8> tag_name,
    ffi.Pointer<ffi.Int8> attributes,
  ) {
    return _cairo_tag_begin(
      cr,
      tag_name,
      attributes,
    );
  }

  late final _cairo_tag_beginPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<cairo_t>, ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>)>>('cairo_tag_begin');
  late final _cairo_tag_begin = _cairo_tag_beginPtr.asFunction<
      void Function(ffi.Pointer<cairo_t>, ffi.Pointer<ffi.Int8>,
          ffi.Pointer<ffi.Int8>)>();

  void cairo_tag_end(
    ffi.Pointer<cairo_t> cr,
    ffi.Pointer<ffi.Int8> tag_name,
  ) {
    return _cairo_tag_end(
      cr,
      tag_name,
    );
  }

  late final _cairo_tag_endPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<cairo_t>, ffi.Pointer<ffi.Int8>)>>('cairo_tag_end');
  late final _cairo_tag_end = _cairo_tag_endPtr
      .asFunction<void Function(ffi.Pointer<cairo_t>, ffi.Pointer<ffi.Int8>)>();

  ffi.Pointer<cairo_text_cluster_t> cairo_text_cluster_allocate(
    int num_clusters,
  ) {
    return _cairo_text_cluster_allocate(
      num_clusters,
    );
  }

  late final _cairo_text_cluster_allocatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<cairo_text_cluster_t> Function(
              ffi.Int32)>>('cairo_text_cluster_allocate');
  late final _cairo_text_cluster_allocate = _cairo_text_cluster_allocatePtr
      .asFunction<ffi.Pointer<cairo_text_cluster_t> Function(int)>();

  void cairo_text_cluster_free(
    ffi.Pointer<cairo_text_cluster_t> clusters,
  ) {
    return _cairo_text_cluster_free(
      clusters,
    );
  }

  late final _cairo_text_cluster_freePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<cairo_text_cluster_t>)>>('cairo_text_cluster_free');
  late final _cairo_text_cluster_free = _cairo_text_cluster_freePtr
      .asFunction<void Function(ffi.Pointer<cairo_text_cluster_t>)>();

  void cairo_text_extents(
    ffi.Pointer<cairo_t> cr,
    ffi.Pointer<ffi.Int8> utf8,
    ffi.Pointer<cairo_text_extents_t> extents,
  ) {
    return _cairo_text_extents(
      cr,
      utf8,
      extents,
    );
  }

  late final _cairo_text_extentsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<cairo_t>, ffi.Pointer<ffi.Int8>,
              ffi.Pointer<cairo_text_extents_t>)>>('cairo_text_extents');
  late final _cairo_text_extents = _cairo_text_extentsPtr.asFunction<
      void Function(ffi.Pointer<cairo_t>, ffi.Pointer<ffi.Int8>,
          ffi.Pointer<cairo_text_extents_t>)>();

  void cairo_text_path(
    ffi.Pointer<cairo_t> cr,
    ffi.Pointer<ffi.Int8> utf8,
  ) {
    return _cairo_text_path(
      cr,
      utf8,
    );
  }

  late final _cairo_text_pathPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<cairo_t>, ffi.Pointer<ffi.Int8>)>>('cairo_text_path');
  late final _cairo_text_path = _cairo_text_pathPtr
      .asFunction<void Function(ffi.Pointer<cairo_t>, ffi.Pointer<ffi.Int8>)>();

  /// Toy fonts
  ffi.Pointer<cairo_font_face_t> cairo_toy_font_face_create(
    ffi.Pointer<ffi.Int8> family,
    int slant,
    int weight,
  ) {
    return _cairo_toy_font_face_create(
      family,
      slant,
      weight,
    );
  }

  late final _cairo_toy_font_face_createPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<cairo_font_face_t> Function(ffi.Pointer<ffi.Int8>,
              ffi.Int32, ffi.Int32)>>('cairo_toy_font_face_create');
  late final _cairo_toy_font_face_create =
      _cairo_toy_font_face_createPtr.asFunction<
          ffi.Pointer<cairo_font_face_t> Function(
              ffi.Pointer<ffi.Int8>, int, int)>();

  ffi.Pointer<ffi.Int8> cairo_toy_font_face_get_family(
    ffi.Pointer<cairo_font_face_t> font_face,
  ) {
    return _cairo_toy_font_face_get_family(
      font_face,
    );
  }

  late final _cairo_toy_font_face_get_familyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Int8> Function(ffi.Pointer<cairo_font_face_t>)>>(
      'cairo_toy_font_face_get_family');
  late final _cairo_toy_font_face_get_family =
      _cairo_toy_font_face_get_familyPtr.asFunction<
          ffi.Pointer<ffi.Int8> Function(ffi.Pointer<cairo_font_face_t>)>();

  int cairo_toy_font_face_get_slant(
    ffi.Pointer<cairo_font_face_t> font_face,
  ) {
    return _cairo_toy_font_face_get_slant(
      font_face,
    );
  }

  late final _cairo_toy_font_face_get_slantPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<cairo_font_face_t>)>>(
      'cairo_toy_font_face_get_slant');
  late final _cairo_toy_font_face_get_slant = _cairo_toy_font_face_get_slantPtr
      .asFunction<int Function(ffi.Pointer<cairo_font_face_t>)>();

  int cairo_toy_font_face_get_weight(
    ffi.Pointer<cairo_font_face_t> font_face,
  ) {
    return _cairo_toy_font_face_get_weight(
      font_face,
    );
  }

  late final _cairo_toy_font_face_get_weightPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<cairo_font_face_t>)>>(
      'cairo_toy_font_face_get_weight');
  late final _cairo_toy_font_face_get_weight =
      _cairo_toy_font_face_get_weightPtr
          .asFunction<int Function(ffi.Pointer<cairo_font_face_t>)>();

  void cairo_transform(
    ffi.Pointer<cairo_t> cr,
    ffi.Pointer<cairo_matrix_t> matrix,
  ) {
    return _cairo_transform(
      cr,
      matrix,
    );
  }

  late final _cairo_transformPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<cairo_t>,
              ffi.Pointer<cairo_matrix_t>)>>('cairo_transform');
  late final _cairo_transform = _cairo_transformPtr.asFunction<
      void Function(ffi.Pointer<cairo_t>, ffi.Pointer<cairo_matrix_t>)>();

  void cairo_translate(
    ffi.Pointer<cairo_t> cr,
    double tx,
    double ty,
  ) {
    return _cairo_translate(
      cr,
      tx,
      ty,
    );
  }

  late final _cairo_translatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<cairo_t>, ffi.Double,
              ffi.Double)>>('cairo_translate');
  late final _cairo_translate = _cairo_translatePtr
      .asFunction<void Function(ffi.Pointer<cairo_t>, double, double)>();

  /// User fonts
  ffi.Pointer<cairo_font_face_t> cairo_user_font_face_create() {
    return _cairo_user_font_face_create();
  }

  late final _cairo_user_font_face_createPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<cairo_font_face_t> Function()>>(
          'cairo_user_font_face_create');
  late final _cairo_user_font_face_create = _cairo_user_font_face_createPtr
      .asFunction<ffi.Pointer<cairo_font_face_t> Function()>();

  /// User-font method getters
  cairo_user_scaled_font_init_func_t cairo_user_font_face_get_init_func(
    ffi.Pointer<cairo_font_face_t> font_face,
  ) {
    return _cairo_user_font_face_get_init_func(
      font_face,
    );
  }

  late final _cairo_user_font_face_get_init_funcPtr = _lookup<
          ffi.NativeFunction<
              cairo_user_scaled_font_init_func_t Function(
                  ffi.Pointer<cairo_font_face_t>)>>(
      'cairo_user_font_face_get_init_func');
  late final _cairo_user_font_face_get_init_func =
      _cairo_user_font_face_get_init_funcPtr.asFunction<
          cairo_user_scaled_font_init_func_t Function(
              ffi.Pointer<cairo_font_face_t>)>();

  cairo_user_scaled_font_render_glyph_func_t
      cairo_user_font_face_get_render_color_glyph_func(
    ffi.Pointer<cairo_font_face_t> font_face,
  ) {
    return _cairo_user_font_face_get_render_color_glyph_func(
      font_face,
    );
  }

  late final _cairo_user_font_face_get_render_color_glyph_funcPtr = _lookup<
          ffi.NativeFunction<
              cairo_user_scaled_font_render_glyph_func_t Function(
                  ffi.Pointer<cairo_font_face_t>)>>(
      'cairo_user_font_face_get_render_color_glyph_func');
  late final _cairo_user_font_face_get_render_color_glyph_func =
      _cairo_user_font_face_get_render_color_glyph_funcPtr.asFunction<
          cairo_user_scaled_font_render_glyph_func_t Function(
              ffi.Pointer<cairo_font_face_t>)>();

  cairo_user_scaled_font_render_glyph_func_t
      cairo_user_font_face_get_render_glyph_func(
    ffi.Pointer<cairo_font_face_t> font_face,
  ) {
    return _cairo_user_font_face_get_render_glyph_func(
      font_face,
    );
  }

  late final _cairo_user_font_face_get_render_glyph_funcPtr = _lookup<
          ffi.NativeFunction<
              cairo_user_scaled_font_render_glyph_func_t Function(
                  ffi.Pointer<cairo_font_face_t>)>>(
      'cairo_user_font_face_get_render_glyph_func');
  late final _cairo_user_font_face_get_render_glyph_func =
      _cairo_user_font_face_get_render_glyph_funcPtr.asFunction<
          cairo_user_scaled_font_render_glyph_func_t Function(
              ffi.Pointer<cairo_font_face_t>)>();

  cairo_user_scaled_font_text_to_glyphs_func_t
      cairo_user_font_face_get_text_to_glyphs_func(
    ffi.Pointer<cairo_font_face_t> font_face,
  ) {
    return _cairo_user_font_face_get_text_to_glyphs_func(
      font_face,
    );
  }

  late final _cairo_user_font_face_get_text_to_glyphs_funcPtr = _lookup<
          ffi.NativeFunction<
              cairo_user_scaled_font_text_to_glyphs_func_t Function(
                  ffi.Pointer<cairo_font_face_t>)>>(
      'cairo_user_font_face_get_text_to_glyphs_func');
  late final _cairo_user_font_face_get_text_to_glyphs_func =
      _cairo_user_font_face_get_text_to_glyphs_funcPtr.asFunction<
          cairo_user_scaled_font_text_to_glyphs_func_t Function(
              ffi.Pointer<cairo_font_face_t>)>();

  cairo_user_scaled_font_unicode_to_glyph_func_t
      cairo_user_font_face_get_unicode_to_glyph_func(
    ffi.Pointer<cairo_font_face_t> font_face,
  ) {
    return _cairo_user_font_face_get_unicode_to_glyph_func(
      font_face,
    );
  }

  late final _cairo_user_font_face_get_unicode_to_glyph_funcPtr = _lookup<
          ffi.NativeFunction<
              cairo_user_scaled_font_unicode_to_glyph_func_t Function(
                  ffi.Pointer<cairo_font_face_t>)>>(
      'cairo_user_font_face_get_unicode_to_glyph_func');
  late final _cairo_user_font_face_get_unicode_to_glyph_func =
      _cairo_user_font_face_get_unicode_to_glyph_funcPtr.asFunction<
          cairo_user_scaled_font_unicode_to_glyph_func_t Function(
              ffi.Pointer<cairo_font_face_t>)>();

  /// User-font method setters
  void cairo_user_font_face_set_init_func(
    ffi.Pointer<cairo_font_face_t> font_face,
    cairo_user_scaled_font_init_func_t init_func,
  ) {
    return _cairo_user_font_face_set_init_func(
      font_face,
      init_func,
    );
  }

  late final _cairo_user_font_face_set_init_funcPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<cairo_font_face_t>,
                  cairo_user_scaled_font_init_func_t)>>(
      'cairo_user_font_face_set_init_func');
  late final _cairo_user_font_face_set_init_func =
      _cairo_user_font_face_set_init_funcPtr.asFunction<
          void Function(ffi.Pointer<cairo_font_face_t>,
              cairo_user_scaled_font_init_func_t)>();

  void cairo_user_font_face_set_render_color_glyph_func(
    ffi.Pointer<cairo_font_face_t> font_face,
    cairo_user_scaled_font_render_glyph_func_t render_glyph_func,
  ) {
    return _cairo_user_font_face_set_render_color_glyph_func(
      font_face,
      render_glyph_func,
    );
  }

  late final _cairo_user_font_face_set_render_color_glyph_funcPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<cairo_font_face_t>,
                  cairo_user_scaled_font_render_glyph_func_t)>>(
      'cairo_user_font_face_set_render_color_glyph_func');
  late final _cairo_user_font_face_set_render_color_glyph_func =
      _cairo_user_font_face_set_render_color_glyph_funcPtr.asFunction<
          void Function(ffi.Pointer<cairo_font_face_t>,
              cairo_user_scaled_font_render_glyph_func_t)>();

  void cairo_user_font_face_set_render_glyph_func(
    ffi.Pointer<cairo_font_face_t> font_face,
    cairo_user_scaled_font_render_glyph_func_t render_glyph_func,
  ) {
    return _cairo_user_font_face_set_render_glyph_func(
      font_face,
      render_glyph_func,
    );
  }

  late final _cairo_user_font_face_set_render_glyph_funcPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<cairo_font_face_t>,
                  cairo_user_scaled_font_render_glyph_func_t)>>(
      'cairo_user_font_face_set_render_glyph_func');
  late final _cairo_user_font_face_set_render_glyph_func =
      _cairo_user_font_face_set_render_glyph_funcPtr.asFunction<
          void Function(ffi.Pointer<cairo_font_face_t>,
              cairo_user_scaled_font_render_glyph_func_t)>();

  void cairo_user_font_face_set_text_to_glyphs_func(
    ffi.Pointer<cairo_font_face_t> font_face,
    cairo_user_scaled_font_text_to_glyphs_func_t text_to_glyphs_func,
  ) {
    return _cairo_user_font_face_set_text_to_glyphs_func(
      font_face,
      text_to_glyphs_func,
    );
  }

  late final _cairo_user_font_face_set_text_to_glyphs_funcPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<cairo_font_face_t>,
                  cairo_user_scaled_font_text_to_glyphs_func_t)>>(
      'cairo_user_font_face_set_text_to_glyphs_func');
  late final _cairo_user_font_face_set_text_to_glyphs_func =
      _cairo_user_font_face_set_text_to_glyphs_funcPtr.asFunction<
          void Function(ffi.Pointer<cairo_font_face_t>,
              cairo_user_scaled_font_text_to_glyphs_func_t)>();

  void cairo_user_font_face_set_unicode_to_glyph_func(
    ffi.Pointer<cairo_font_face_t> font_face,
    cairo_user_scaled_font_unicode_to_glyph_func_t unicode_to_glyph_func,
  ) {
    return _cairo_user_font_face_set_unicode_to_glyph_func(
      font_face,
      unicode_to_glyph_func,
    );
  }

  late final _cairo_user_font_face_set_unicode_to_glyph_funcPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<cairo_font_face_t>,
                  cairo_user_scaled_font_unicode_to_glyph_func_t)>>(
      'cairo_user_font_face_set_unicode_to_glyph_func');
  late final _cairo_user_font_face_set_unicode_to_glyph_func =
      _cairo_user_font_face_set_unicode_to_glyph_funcPtr.asFunction<
          void Function(ffi.Pointer<cairo_font_face_t>,
              cairo_user_scaled_font_unicode_to_glyph_func_t)>();

  void cairo_user_to_device(
    ffi.Pointer<cairo_t> cr,
    ffi.Pointer<ffi.Double> x,
    ffi.Pointer<ffi.Double> y,
  ) {
    return _cairo_user_to_device(
      cr,
      x,
      y,
    );
  }

  late final _cairo_user_to_devicePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<cairo_t>, ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>>('cairo_user_to_device');
  late final _cairo_user_to_device = _cairo_user_to_devicePtr.asFunction<
      void Function(ffi.Pointer<cairo_t>, ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>)>();

  void cairo_user_to_device_distance(
    ffi.Pointer<cairo_t> cr,
    ffi.Pointer<ffi.Double> dx,
    ffi.Pointer<ffi.Double> dy,
  ) {
    return _cairo_user_to_device_distance(
      cr,
      dx,
      dy,
    );
  }

  late final _cairo_user_to_device_distancePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<cairo_t>, ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>>('cairo_user_to_device_distance');
  late final _cairo_user_to_device_distance =
      _cairo_user_to_device_distancePtr.asFunction<
          void Function(ffi.Pointer<cairo_t>, ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>();

  int cairo_version() {
    return _cairo_version();
  }

  late final _cairo_versionPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function()>>('cairo_version');
  late final _cairo_version = _cairo_versionPtr.asFunction<int Function()>();

  ffi.Pointer<ffi.Int8> cairo_version_string() {
    return _cairo_version_string();
  }

  late final _cairo_version_stringPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int8> Function()>>(
          'cairo_version_string');
  late final _cairo_version_string =
      _cairo_version_stringPtr.asFunction<ffi.Pointer<ffi.Int8> Function()>();

  ffi.Pointer<ffi.Void> calloc(
    int __nmemb,
    int __size,
  ) {
    return _calloc(
      __nmemb,
      __size,
    );
  }

  late final _callocPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(size_t, size_t)>>(
      'calloc');
  late final _calloc =
      _callocPtr.asFunction<ffi.Pointer<ffi.Void> Function(int, int)>();

  double cbrt(
    double __x,
  ) {
    return _cbrt(
      __x,
    );
  }

  late final _cbrtPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('cbrt');
  late final _cbrt = _cbrtPtr.asFunction<double Function(double)>();

  double cbrtf(
    double __x,
  ) {
    return _cbrtf(
      __x,
    );
  }

  late final _cbrtfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('cbrtf');
  late final _cbrtf = _cbrtfPtr.asFunction<double Function(double)>();

  double ceil(
    double __x,
  ) {
    return _ceil(
      __x,
    );
  }

  late final _ceilPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('ceil');
  late final _ceil = _ceilPtr.asFunction<double Function(double)>();

  double ceilf(
    double __x,
  ) {
    return _ceilf(
      __x,
    );
  }

  late final _ceilfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('ceilf');
  late final _ceilf = _ceilfPtr.asFunction<double Function(double)>();

  int clearenv() {
    return _clearenv();
  }

  late final _clearenvPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function()>>('clearenv');
  late final _clearenv = _clearenvPtr.asFunction<int Function()>();

  void clearerr(
    ffi.Pointer<FILE> __stream,
  ) {
    return _clearerr(
      __stream,
    );
  }

  late final _clearerrPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'clearerr');
  late final _clearerr =
      _clearerrPtr.asFunction<void Function(ffi.Pointer<FILE>)>();

  void clearerr_unlocked(
    ffi.Pointer<FILE> __stream,
  ) {
    return _clearerr_unlocked(
      __stream,
    );
  }

  late final _clearerr_unlockedPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'clearerr_unlocked');
  late final _clearerr_unlocked =
      _clearerr_unlockedPtr.asFunction<void Function(ffi.Pointer<FILE>)>();

  double copysign(
    double __x,
    double __y,
  ) {
    return _copysign(
      __x,
      __y,
    );
  }

  late final _copysignPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'copysign');
  late final _copysign =
      _copysignPtr.asFunction<double Function(double, double)>();

  double copysignf(
    double __x,
    double __y,
  ) {
    return _copysignf(
      __x,
      __y,
    );
  }

  late final _copysignfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>(
          'copysignf');
  late final _copysignf =
      _copysignfPtr.asFunction<double Function(double, double)>();

  double cos(
    double __x,
  ) {
    return _cos(
      __x,
    );
  }

  late final _cosPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('cos');
  late final _cos = _cosPtr.asFunction<double Function(double)>();

  double cosf(
    double __x,
  ) {
    return _cosf(
      __x,
    );
  }

  late final _cosfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('cosf');
  late final _cosf = _cosfPtr.asFunction<double Function(double)>();

  double cosh(
    double __x,
  ) {
    return _cosh(
      __x,
    );
  }

  late final _coshPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('cosh');
  late final _cosh = _coshPtr.asFunction<double Function(double)>();

  double coshf(
    double __x,
  ) {
    return _coshf(
      __x,
    );
  }

  late final _coshfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('coshf');
  late final _coshf = _coshfPtr.asFunction<double Function(double)>();

  ffi.Pointer<ffi.Int8> ctermid(
    ffi.Pointer<ffi.Int8> __s,
  ) {
    return _ctermid(
      __s,
    );
  }

  late final _ctermidPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ffi.Int8>)>>('ctermid');
  late final _ctermid = _ctermidPtr
      .asFunction<ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ffi.Int8>)>();

  div_t div(
    int __numer,
    int __denom,
  ) {
    return _div(
      __numer,
      __denom,
    );
  }

  late final _divPtr =
      _lookup<ffi.NativeFunction<div_t Function(ffi.Int32, ffi.Int32)>>('div');
  late final _div = _divPtr.asFunction<div_t Function(int, int)>();

  int dprintf(
    int __fd,
    ffi.Pointer<ffi.Int8> __fmt,
  ) {
    return _dprintf(
      __fd,
      __fmt,
    );
  }

  late final _dprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Int32, ffi.Pointer<ffi.Int8>)>>('dprintf');
  late final _dprintf =
      _dprintfPtr.asFunction<int Function(int, ffi.Pointer<ffi.Int8>)>();

  double drand48() {
    return _drand48();
  }

  late final _drand48Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function()>>('drand48');
  late final _drand48 = _drand48Ptr.asFunction<double Function()>();

  int drand48_r(
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Double> __result,
  ) {
    return _drand48_r(
      __buffer,
      __result,
    );
  }

  late final _drand48_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<drand48_data>,
              ffi.Pointer<ffi.Double>)>>('drand48_r');
  late final _drand48_r = _drand48_rPtr.asFunction<
      int Function(ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Double>)>();

  double drem(
    double __x,
    double __y,
  ) {
    return _drem(
      __x,
      __y,
    );
  }

  late final _dremPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'drem');
  late final _drem = _dremPtr.asFunction<double Function(double, double)>();

  double dremf(
    double __x,
    double __y,
  ) {
    return _dremf(
      __x,
      __y,
    );
  }

  late final _dremfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>(
          'dremf');
  late final _dremf = _dremfPtr.asFunction<double Function(double, double)>();

  ffi.Pointer<ffi.Int8> ecvt(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Int32> __decpt,
    ffi.Pointer<ffi.Int32> __sign,
  ) {
    return _ecvt(
      __value,
      __ndigit,
      __decpt,
      __sign,
    );
  }

  late final _ecvtPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(ffi.Double, ffi.Int32,
              ffi.Pointer<ffi.Int32>, ffi.Pointer<ffi.Int32>)>>('ecvt');
  late final _ecvt = _ecvtPtr.asFunction<
      ffi.Pointer<ffi.Int8> Function(
          double, int, ffi.Pointer<ffi.Int32>, ffi.Pointer<ffi.Int32>)>();

  int ecvt_r(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Int32> __decpt,
    ffi.Pointer<ffi.Int32> __sign,
    ffi.Pointer<ffi.Int8> __buf,
    int __len,
  ) {
    return _ecvt_r(
      __value,
      __ndigit,
      __decpt,
      __sign,
      __buf,
      __len,
    );
  }

  late final _ecvt_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Double,
              ffi.Int32,
              ffi.Pointer<ffi.Int32>,
              ffi.Pointer<ffi.Int32>,
              ffi.Pointer<ffi.Int8>,
              size_t)>>('ecvt_r');
  late final _ecvt_r = _ecvt_rPtr.asFunction<
      int Function(double, int, ffi.Pointer<ffi.Int32>, ffi.Pointer<ffi.Int32>,
          ffi.Pointer<ffi.Int8>, int)>();

  double erand48(
    ffi.Pointer<ffi.Uint16> __xsubi,
  ) {
    return _erand48(
      __xsubi,
    );
  }

  late final _erand48Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Pointer<ffi.Uint16>)>>(
          'erand48');
  late final _erand48 =
      _erand48Ptr.asFunction<double Function(ffi.Pointer<ffi.Uint16>)>();

  int erand48_r(
    ffi.Pointer<ffi.Uint16> __xsubi,
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Double> __result,
  ) {
    return _erand48_r(
      __xsubi,
      __buffer,
      __result,
    );
  }

  late final _erand48_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Uint16>, ffi.Pointer<drand48_data>,
              ffi.Pointer<ffi.Double>)>>('erand48_r');
  late final _erand48_r = _erand48_rPtr.asFunction<
      int Function(ffi.Pointer<ffi.Uint16>, ffi.Pointer<drand48_data>,
          ffi.Pointer<ffi.Double>)>();

  double erf(
    double arg0,
  ) {
    return _erf(
      arg0,
    );
  }

  late final _erfPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('erf');
  late final _erf = _erfPtr.asFunction<double Function(double)>();

  double erfc(
    double arg0,
  ) {
    return _erfc(
      arg0,
    );
  }

  late final _erfcPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('erfc');
  late final _erfc = _erfcPtr.asFunction<double Function(double)>();

  double erfcf(
    double arg0,
  ) {
    return _erfcf(
      arg0,
    );
  }

  late final _erfcfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('erfcf');
  late final _erfcf = _erfcfPtr.asFunction<double Function(double)>();

  double erff(
    double arg0,
  ) {
    return _erff(
      arg0,
    );
  }

  late final _erffPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('erff');
  late final _erff = _erffPtr.asFunction<double Function(double)>();

  void exit(
    int __status,
  ) {
    return _exit(
      __status,
    );
  }

  late final _exitPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int32)>>('exit');
  late final _exit = _exitPtr.asFunction<void Function(int)>();

  double exp(
    double __x,
  ) {
    return _exp(
      __x,
    );
  }

  late final _expPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('exp');
  late final _exp = _expPtr.asFunction<double Function(double)>();

  double exp2(
    double __x,
  ) {
    return _exp2(
      __x,
    );
  }

  late final _exp2Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('exp2');
  late final _exp2 = _exp2Ptr.asFunction<double Function(double)>();

  double exp2f(
    double __x,
  ) {
    return _exp2f(
      __x,
    );
  }

  late final _exp2fPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('exp2f');
  late final _exp2f = _exp2fPtr.asFunction<double Function(double)>();

  double expf(
    double __x,
  ) {
    return _expf(
      __x,
    );
  }

  late final _expfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('expf');
  late final _expf = _expfPtr.asFunction<double Function(double)>();

  void explicit_bzero(
    ffi.Pointer<ffi.Void> __s,
    int __n,
  ) {
    return _explicit_bzero(
      __s,
      __n,
    );
  }

  late final _explicit_bzeroPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>, size_t)>>(
      'explicit_bzero');
  late final _explicit_bzero = _explicit_bzeroPtr
      .asFunction<void Function(ffi.Pointer<ffi.Void>, int)>();

  double expm1(
    double __x,
  ) {
    return _expm1(
      __x,
    );
  }

  late final _expm1Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('expm1');
  late final _expm1 = _expm1Ptr.asFunction<double Function(double)>();

  double expm1f(
    double __x,
  ) {
    return _expm1f(
      __x,
    );
  }

  late final _expm1fPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('expm1f');
  late final _expm1f = _expm1fPtr.asFunction<double Function(double)>();

  double fabs(
    double __x,
  ) {
    return _fabs(
      __x,
    );
  }

  late final _fabsPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('fabs');
  late final _fabs = _fabsPtr.asFunction<double Function(double)>();

  double fabsf(
    double __x,
  ) {
    return _fabsf(
      __x,
    );
  }

  late final _fabsfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('fabsf');
  late final _fabsf = _fabsfPtr.asFunction<double Function(double)>();

  int fclose(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fclose(
      __stream,
    );
  }

  late final _fclosePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<FILE>)>>(
          'fclose');
  late final _fclose = _fclosePtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  ffi.Pointer<ffi.Int8> fcvt(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Int32> __decpt,
    ffi.Pointer<ffi.Int32> __sign,
  ) {
    return _fcvt(
      __value,
      __ndigit,
      __decpt,
      __sign,
    );
  }

  late final _fcvtPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(ffi.Double, ffi.Int32,
              ffi.Pointer<ffi.Int32>, ffi.Pointer<ffi.Int32>)>>('fcvt');
  late final _fcvt = _fcvtPtr.asFunction<
      ffi.Pointer<ffi.Int8> Function(
          double, int, ffi.Pointer<ffi.Int32>, ffi.Pointer<ffi.Int32>)>();

  int fcvt_r(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Int32> __decpt,
    ffi.Pointer<ffi.Int32> __sign,
    ffi.Pointer<ffi.Int8> __buf,
    int __len,
  ) {
    return _fcvt_r(
      __value,
      __ndigit,
      __decpt,
      __sign,
      __buf,
      __len,
    );
  }

  late final _fcvt_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Double,
              ffi.Int32,
              ffi.Pointer<ffi.Int32>,
              ffi.Pointer<ffi.Int32>,
              ffi.Pointer<ffi.Int8>,
              size_t)>>('fcvt_r');
  late final _fcvt_r = _fcvt_rPtr.asFunction<
      int Function(double, int, ffi.Pointer<ffi.Int32>, ffi.Pointer<ffi.Int32>,
          ffi.Pointer<ffi.Int8>, int)>();

  double fdim(
    double __x,
    double __y,
  ) {
    return _fdim(
      __x,
      __y,
    );
  }

  late final _fdimPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'fdim');
  late final _fdim = _fdimPtr.asFunction<double Function(double, double)>();

  double fdimf(
    double __x,
    double __y,
  ) {
    return _fdimf(
      __x,
      __y,
    );
  }

  late final _fdimfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>(
          'fdimf');
  late final _fdimf = _fdimfPtr.asFunction<double Function(double, double)>();

  ffi.Pointer<FILE> fdopen(
    int __fd,
    ffi.Pointer<ffi.Int8> __modes,
  ) {
    return _fdopen(
      __fd,
      __modes,
    );
  }

  late final _fdopenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(
              ffi.Int32, ffi.Pointer<ffi.Int8>)>>('fdopen');
  late final _fdopen = _fdopenPtr
      .asFunction<ffi.Pointer<FILE> Function(int, ffi.Pointer<ffi.Int8>)>();

  int feof(
    ffi.Pointer<FILE> __stream,
  ) {
    return _feof(
      __stream,
    );
  }

  late final _feofPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<FILE>)>>(
          'feof');
  late final _feof = _feofPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int feof_unlocked(
    ffi.Pointer<FILE> __stream,
  ) {
    return _feof_unlocked(
      __stream,
    );
  }

  late final _feof_unlockedPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<FILE>)>>(
          'feof_unlocked');
  late final _feof_unlocked =
      _feof_unlockedPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int ferror(
    ffi.Pointer<FILE> __stream,
  ) {
    return _ferror(
      __stream,
    );
  }

  late final _ferrorPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<FILE>)>>(
          'ferror');
  late final _ferror = _ferrorPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int ferror_unlocked(
    ffi.Pointer<FILE> __stream,
  ) {
    return _ferror_unlocked(
      __stream,
    );
  }

  late final _ferror_unlockedPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<FILE>)>>(
          'ferror_unlocked');
  late final _ferror_unlocked =
      _ferror_unlockedPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fflush(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fflush(
      __stream,
    );
  }

  late final _fflushPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<FILE>)>>(
          'fflush');
  late final _fflush = _fflushPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fflush_unlocked(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fflush_unlocked(
      __stream,
    );
  }

  late final _fflush_unlockedPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<FILE>)>>(
          'fflush_unlocked');
  late final _fflush_unlocked =
      _fflush_unlockedPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int ffs(
    int __i,
  ) {
    return _ffs(
      __i,
    );
  }

  late final _ffsPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32)>>('ffs');
  late final _ffs = _ffsPtr.asFunction<int Function(int)>();

  int ffsl(
    int __l,
  ) {
    return _ffsl(
      __l,
    );
  }

  late final _ffslPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int64)>>('ffsl');
  late final _ffsl = _ffslPtr.asFunction<int Function(int)>();

  int ffsll(
    int __ll,
  ) {
    return _ffsll(
      __ll,
    );
  }

  late final _ffsllPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int64)>>('ffsll');
  late final _ffsll = _ffsllPtr.asFunction<int Function(int)>();

  int fgetc(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fgetc(
      __stream,
    );
  }

  late final _fgetcPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<FILE>)>>(
          'fgetc');
  late final _fgetc = _fgetcPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fgetc_unlocked(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fgetc_unlocked(
      __stream,
    );
  }

  late final _fgetc_unlockedPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<FILE>)>>(
          'fgetc_unlocked');
  late final _fgetc_unlocked =
      _fgetc_unlockedPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fgetpos(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<fpos_t> __pos,
  ) {
    return _fgetpos(
      __stream,
      __pos,
    );
  }

  late final _fgetposPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>>('fgetpos');
  late final _fgetpos = _fgetposPtr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>();

  ffi.Pointer<ffi.Int8> fgets(
    ffi.Pointer<ffi.Int8> __s,
    int __n,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fgets(
      __s,
      __n,
      __stream,
    );
  }

  late final _fgetsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<ffi.Int8>, ffi.Int32, ffi.Pointer<FILE>)>>('fgets');
  late final _fgets = _fgetsPtr.asFunction<
      ffi.Pointer<ffi.Int8> Function(
          ffi.Pointer<ffi.Int8>, int, ffi.Pointer<FILE>)>();

  int fileno(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fileno(
      __stream,
    );
  }

  late final _filenoPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<FILE>)>>(
          'fileno');
  late final _fileno = _filenoPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fileno_unlocked(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fileno_unlocked(
      __stream,
    );
  }

  late final _fileno_unlockedPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<FILE>)>>(
          'fileno_unlocked');
  late final _fileno_unlocked =
      _fileno_unlockedPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int finite(
    double __value,
  ) {
    return _finite(
      __value,
    );
  }

  late final _finitePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Double)>>('finite');
  late final _finite = _finitePtr.asFunction<int Function(double)>();

  int finitef(
    double __value,
  ) {
    return _finitef(
      __value,
    );
  }

  late final _finitefPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Float)>>('finitef');
  late final _finitef = _finitefPtr.asFunction<int Function(double)>();

  void flockfile(
    ffi.Pointer<FILE> __stream,
  ) {
    return _flockfile(
      __stream,
    );
  }

  late final _flockfilePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'flockfile');
  late final _flockfile =
      _flockfilePtr.asFunction<void Function(ffi.Pointer<FILE>)>();

  double floor(
    double __x,
  ) {
    return _floor(
      __x,
    );
  }

  late final _floorPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('floor');
  late final _floor = _floorPtr.asFunction<double Function(double)>();

  double floorf(
    double __x,
  ) {
    return _floorf(
      __x,
    );
  }

  late final _floorfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('floorf');
  late final _floorf = _floorfPtr.asFunction<double Function(double)>();

  double fma(
    double __x,
    double __y,
    double __z,
  ) {
    return _fma(
      __x,
      __y,
      __z,
    );
  }

  late final _fmaPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Double, ffi.Double, ffi.Double)>>('fma');
  late final _fma =
      _fmaPtr.asFunction<double Function(double, double, double)>();

  double fmaf(
    double __x,
    double __y,
    double __z,
  ) {
    return _fmaf(
      __x,
      __y,
      __z,
    );
  }

  late final _fmafPtr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(ffi.Float, ffi.Float, ffi.Float)>>('fmaf');
  late final _fmaf =
      _fmafPtr.asFunction<double Function(double, double, double)>();

  double fmax(
    double __x,
    double __y,
  ) {
    return _fmax(
      __x,
      __y,
    );
  }

  late final _fmaxPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'fmax');
  late final _fmax = _fmaxPtr.asFunction<double Function(double, double)>();

  double fmaxf(
    double __x,
    double __y,
  ) {
    return _fmaxf(
      __x,
      __y,
    );
  }

  late final _fmaxfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>(
          'fmaxf');
  late final _fmaxf = _fmaxfPtr.asFunction<double Function(double, double)>();

  ffi.Pointer<FILE> fmemopen(
    ffi.Pointer<ffi.Void> __s,
    int __len,
    ffi.Pointer<ffi.Int8> __modes,
  ) {
    return _fmemopen(
      __s,
      __len,
      __modes,
    );
  }

  late final _fmemopenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(ffi.Pointer<ffi.Void>, size_t,
              ffi.Pointer<ffi.Int8>)>>('fmemopen');
  late final _fmemopen = _fmemopenPtr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Int8>)>();

  double fmin(
    double __x,
    double __y,
  ) {
    return _fmin(
      __x,
      __y,
    );
  }

  late final _fminPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'fmin');
  late final _fmin = _fminPtr.asFunction<double Function(double, double)>();

  double fminf(
    double __x,
    double __y,
  ) {
    return _fminf(
      __x,
      __y,
    );
  }

  late final _fminfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>(
          'fminf');
  late final _fminf = _fminfPtr.asFunction<double Function(double, double)>();

  double fmod(
    double __x,
    double __y,
  ) {
    return _fmod(
      __x,
      __y,
    );
  }

  late final _fmodPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'fmod');
  late final _fmod = _fmodPtr.asFunction<double Function(double, double)>();

  double fmodf(
    double __x,
    double __y,
  ) {
    return _fmodf(
      __x,
      __y,
    );
  }

  late final _fmodfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>(
          'fmodf');
  late final _fmodf = _fmodfPtr.asFunction<double Function(double, double)>();

  ffi.Pointer<FILE> fopen(
    ffi.Pointer<ffi.Int8> __filename,
    ffi.Pointer<ffi.Int8> __modes,
  ) {
    return _fopen(
      __filename,
      __modes,
    );
  }

  late final _fopenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(
              ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>>('fopen');
  late final _fopen = _fopenPtr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>();

  int fprintf(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Int8> __format,
  ) {
    return _fprintf(
      __stream,
      __format,
    );
  }

  late final _fprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Int8>)>>('fprintf');
  late final _fprintf = _fprintfPtr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Int8>)>();

  int fputc(
    int __c,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fputc(
      __c,
      __stream,
    );
  }

  late final _fputcPtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Int32, ffi.Pointer<FILE>)>>(
      'fputc');
  late final _fputc =
      _fputcPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int fputc_unlocked(
    int __c,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fputc_unlocked(
      __c,
      __stream,
    );
  }

  late final _fputc_unlockedPtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Int32, ffi.Pointer<FILE>)>>(
      'fputc_unlocked');
  late final _fputc_unlocked =
      _fputc_unlockedPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int fputs(
    ffi.Pointer<ffi.Int8> __s,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fputs(
      __s,
      __stream,
    );
  }

  late final _fputsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Int8>, ffi.Pointer<FILE>)>>('fputs');
  late final _fputs = _fputsPtr
      .asFunction<int Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<FILE>)>();

  int fread(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
    int __n,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fread(
      __ptr,
      __size,
      __n,
      __stream,
    );
  }

  late final _freadPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint64 Function(ffi.Pointer<ffi.Void>, size_t, size_t,
              ffi.Pointer<FILE>)>>('fread');
  late final _fread = _freadPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<FILE>)>();

  int fread_unlocked(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
    int __n,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fread_unlocked(
      __ptr,
      __size,
      __n,
      __stream,
    );
  }

  late final _fread_unlockedPtr = _lookup<
      ffi.NativeFunction<
          size_t Function(ffi.Pointer<ffi.Void>, size_t, size_t,
              ffi.Pointer<FILE>)>>('fread_unlocked');
  late final _fread_unlocked = _fread_unlockedPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<FILE>)>();

  void free(
    ffi.Pointer<ffi.Void> __ptr,
  ) {
    return _free(
      __ptr,
    );
  }

  late final _freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'free');
  late final _free =
      _freePtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<FILE> freopen(
    ffi.Pointer<ffi.Int8> __filename,
    ffi.Pointer<ffi.Int8> __modes,
    ffi.Pointer<FILE> __stream,
  ) {
    return _freopen(
      __filename,
      __modes,
      __stream,
    );
  }

  late final _freopenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>, ffi.Pointer<FILE>)>>('freopen');
  late final _freopen = _freopenPtr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>, ffi.Pointer<FILE>)>();

  double frexp(
    double __x,
    ffi.Pointer<ffi.Int32> __exponent,
  ) {
    return _frexp(
      __x,
      __exponent,
    );
  }

  late final _frexpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Double, ffi.Pointer<ffi.Int32>)>>('frexp');
  late final _frexp =
      _frexpPtr.asFunction<double Function(double, ffi.Pointer<ffi.Int32>)>();

  double frexpf(
    double __x,
    ffi.Pointer<ffi.Int32> __exponent,
  ) {
    return _frexpf(
      __x,
      __exponent,
    );
  }

  late final _frexpfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(ffi.Float, ffi.Pointer<ffi.Int32>)>>('frexpf');
  late final _frexpf =
      _frexpfPtr.asFunction<double Function(double, ffi.Pointer<ffi.Int32>)>();

  int fscanf(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Int8> __format,
  ) {
    return _fscanf(
      __stream,
      __format,
    );
  }

  late final _fscanfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Int8>)>>('fscanf');
  late final _fscanf = _fscanfPtr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Int8>)>();

  int fseek(
    ffi.Pointer<FILE> __stream,
    int __off,
    int __whence,
  ) {
    return _fseek(
      __stream,
      __off,
      __whence,
    );
  }

  late final _fseekPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<FILE>, ffi.Int64, ffi.Int32)>>('fseek');
  late final _fseek =
      _fseekPtr.asFunction<int Function(ffi.Pointer<FILE>, int, int)>();

  int fseeko(
    ffi.Pointer<FILE> __stream,
    int __off,
    int __whence,
  ) {
    return _fseeko(
      __stream,
      __off,
      __whence,
    );
  }

  late final _fseekoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>, __off_t, ffi.Int32)>>('fseeko');
  late final _fseeko =
      _fseekoPtr.asFunction<int Function(ffi.Pointer<FILE>, int, int)>();

  int fsetpos(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<fpos_t> __pos,
  ) {
    return _fsetpos(
      __stream,
      __pos,
    );
  }

  late final _fsetposPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>>('fsetpos');
  late final _fsetpos = _fsetposPtr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>();

  int ftell(
    ffi.Pointer<FILE> __stream,
  ) {
    return _ftell(
      __stream,
    );
  }

  late final _ftellPtr =
      _lookup<ffi.NativeFunction<ffi.Int64 Function(ffi.Pointer<FILE>)>>(
          'ftell');
  late final _ftell = _ftellPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int ftello(
    ffi.Pointer<FILE> __stream,
  ) {
    return _ftello(
      __stream,
    );
  }

  late final _ftelloPtr =
      _lookup<ffi.NativeFunction<__off_t Function(ffi.Pointer<FILE>)>>(
          'ftello');
  late final _ftello = _ftelloPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int ftrylockfile(
    ffi.Pointer<FILE> __stream,
  ) {
    return _ftrylockfile(
      __stream,
    );
  }

  late final _ftrylockfilePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<FILE>)>>(
          'ftrylockfile');
  late final _ftrylockfile =
      _ftrylockfilePtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  void funlockfile(
    ffi.Pointer<FILE> __stream,
  ) {
    return _funlockfile(
      __stream,
    );
  }

  late final _funlockfilePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'funlockfile');
  late final _funlockfile =
      _funlockfilePtr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int fwrite(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
    int __n,
    ffi.Pointer<FILE> __s,
  ) {
    return _fwrite(
      __ptr,
      __size,
      __n,
      __s,
    );
  }

  late final _fwritePtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint64 Function(ffi.Pointer<ffi.Void>, size_t, size_t,
              ffi.Pointer<FILE>)>>('fwrite');
  late final _fwrite = _fwritePtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<FILE>)>();

  int fwrite_unlocked(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
    int __n,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fwrite_unlocked(
      __ptr,
      __size,
      __n,
      __stream,
    );
  }

  late final _fwrite_unlockedPtr = _lookup<
      ffi.NativeFunction<
          size_t Function(ffi.Pointer<ffi.Void>, size_t, size_t,
              ffi.Pointer<FILE>)>>('fwrite_unlocked');
  late final _fwrite_unlocked = _fwrite_unlockedPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<FILE>)>();

  double gamma(
    double arg0,
  ) {
    return _gamma(
      arg0,
    );
  }

  late final _gammaPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('gamma');
  late final _gamma = _gammaPtr.asFunction<double Function(double)>();

  double gammaf(
    double arg0,
  ) {
    return _gammaf(
      arg0,
    );
  }

  late final _gammafPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('gammaf');
  late final _gammaf = _gammafPtr.asFunction<double Function(double)>();

  ffi.Pointer<ffi.Int8> gcvt(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Int8> __buf,
  ) {
    return _gcvt(
      __value,
      __ndigit,
      __buf,
    );
  }

  late final _gcvtPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Double, ffi.Int32, ffi.Pointer<ffi.Int8>)>>('gcvt');
  late final _gcvt = _gcvtPtr.asFunction<
      ffi.Pointer<ffi.Int8> Function(double, int, ffi.Pointer<ffi.Int8>)>();

  int getc(
    ffi.Pointer<FILE> __stream,
  ) {
    return _getc(
      __stream,
    );
  }

  late final _getcPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<FILE>)>>(
          'getc');
  late final _getc = _getcPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int getc_unlocked(
    ffi.Pointer<FILE> __stream,
  ) {
    return _getc_unlocked(
      __stream,
    );
  }

  late final _getc_unlockedPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<FILE>)>>(
          'getc_unlocked');
  late final _getc_unlocked =
      _getc_unlockedPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int getchar() {
    return _getchar();
  }

  late final _getcharPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function()>>('getchar');
  late final _getchar = _getcharPtr.asFunction<int Function()>();

  int getchar_unlocked() {
    return _getchar_unlocked();
  }

  late final _getchar_unlockedPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function()>>('getchar_unlocked');
  late final _getchar_unlocked =
      _getchar_unlockedPtr.asFunction<int Function()>();

  int getdelim(
    ffi.Pointer<ffi.Pointer<ffi.Int8>> __lineptr,
    ffi.Pointer<size_t> __n,
    int __delimiter,
    ffi.Pointer<FILE> __stream,
  ) {
    return _getdelim(
      __lineptr,
      __n,
      __delimiter,
      __stream,
    );
  }

  late final _getdelimPtr = _lookup<
      ffi.NativeFunction<
          __ssize_t Function(ffi.Pointer<ffi.Pointer<ffi.Int8>>,
              ffi.Pointer<size_t>, ffi.Int32, ffi.Pointer<FILE>)>>('getdelim');
  late final _getdelim = _getdelimPtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Int8>>, ffi.Pointer<size_t>, int,
          ffi.Pointer<FILE>)>();

  ffi.Pointer<ffi.Int8> getenv(
    ffi.Pointer<ffi.Int8> __name,
  ) {
    return _getenv(
      __name,
    );
  }

  late final _getenvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ffi.Int8>)>>('getenv');
  late final _getenv = _getenvPtr
      .asFunction<ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ffi.Int8>)>();

  int getline(
    ffi.Pointer<ffi.Pointer<ffi.Int8>> __lineptr,
    ffi.Pointer<size_t> __n,
    ffi.Pointer<FILE> __stream,
  ) {
    return _getline(
      __lineptr,
      __n,
      __stream,
    );
  }

  late final _getlinePtr = _lookup<
      ffi.NativeFunction<
          __ssize_t Function(ffi.Pointer<ffi.Pointer<ffi.Int8>>,
              ffi.Pointer<size_t>, ffi.Pointer<FILE>)>>('getline');
  late final _getline = _getlinePtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Int8>>, ffi.Pointer<size_t>,
          ffi.Pointer<FILE>)>();

  int getloadavg(
    ffi.Pointer<ffi.Double> __loadavg,
    int __nelem,
  ) {
    return _getloadavg(
      __loadavg,
      __nelem,
    );
  }

  late final _getloadavgPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Double>, ffi.Int32)>>('getloadavg');
  late final _getloadavg =
      _getloadavgPtr.asFunction<int Function(ffi.Pointer<ffi.Double>, int)>();

  int getsubopt(
    ffi.Pointer<ffi.Pointer<ffi.Int8>> __optionp,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> __tokens,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> __valuep,
  ) {
    return _getsubopt(
      __optionp,
      __tokens,
      __valuep,
    );
  }

  late final _getsuboptPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Pointer<ffi.Int8>>,
              ffi.Pointer<ffi.Pointer<ffi.Int8>>,
              ffi.Pointer<ffi.Pointer<ffi.Int8>>)>>('getsubopt');
  late final _getsubopt = _getsuboptPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Pointer<ffi.Int8>>,
          ffi.Pointer<ffi.Pointer<ffi.Int8>>,
          ffi.Pointer<ffi.Pointer<ffi.Int8>>)>();

  int getw(
    ffi.Pointer<FILE> __stream,
  ) {
    return _getw(
      __stream,
    );
  }

  late final _getwPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<FILE>)>>(
          'getw');
  late final _getw = _getwPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  double hypot(
    double __x,
    double __y,
  ) {
    return _hypot(
      __x,
      __y,
    );
  }

  late final _hypotPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'hypot');
  late final _hypot = _hypotPtr.asFunction<double Function(double, double)>();

  double hypotf(
    double __x,
    double __y,
  ) {
    return _hypotf(
      __x,
      __y,
    );
  }

  late final _hypotfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>(
          'hypotf');
  late final _hypotf = _hypotfPtr.asFunction<double Function(double, double)>();

  int ilogb(
    double __x,
  ) {
    return _ilogb(
      __x,
    );
  }

  late final _ilogbPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Double)>>('ilogb');
  late final _ilogb = _ilogbPtr.asFunction<int Function(double)>();

  int ilogbf(
    double __x,
  ) {
    return _ilogbf(
      __x,
    );
  }

  late final _ilogbfPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Float)>>('ilogbf');
  late final _ilogbf = _ilogbfPtr.asFunction<int Function(double)>();

  ffi.Pointer<ffi.Int8> index(
    ffi.Pointer<ffi.Int8> __s,
    int __c,
  ) {
    return _index(
      __s,
      __c,
    );
  }

  late final _indexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<ffi.Int8>, ffi.Int32)>>('index');
  late final _index = _indexPtr
      .asFunction<ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ffi.Int8>, int)>();

  ffi.Pointer<ffi.Int8> initstate(
    int __seed,
    ffi.Pointer<ffi.Int8> __statebuf,
    int __statelen,
  ) {
    return _initstate(
      __seed,
      __statebuf,
      __statelen,
    );
  }

  late final _initstatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Uint32, ffi.Pointer<ffi.Int8>, size_t)>>('initstate');
  late final _initstate = _initstatePtr.asFunction<
      ffi.Pointer<ffi.Int8> Function(int, ffi.Pointer<ffi.Int8>, int)>();

  int initstate_r(
    int __seed,
    ffi.Pointer<ffi.Int8> __statebuf,
    int __statelen,
    ffi.Pointer<random_data> __buf,
  ) {
    return _initstate_r(
      __seed,
      __statebuf,
      __statelen,
      __buf,
    );
  }

  late final _initstate_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Uint32, ffi.Pointer<ffi.Int8>, size_t,
              ffi.Pointer<random_data>)>>('initstate_r');
  late final _initstate_r = _initstate_rPtr.asFunction<
      int Function(
          int, ffi.Pointer<ffi.Int8>, int, ffi.Pointer<random_data>)>();

  int isinf(
    double __value,
  ) {
    return _isinf(
      __value,
    );
  }

  late final _isinfPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Double)>>('isinf');
  late final _isinf = _isinfPtr.asFunction<int Function(double)>();

  int isinff(
    double __value,
  ) {
    return _isinff(
      __value,
    );
  }

  late final _isinffPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Float)>>('isinff');
  late final _isinff = _isinffPtr.asFunction<int Function(double)>();

  int isnan(
    double __value,
  ) {
    return _isnan(
      __value,
    );
  }

  late final _isnanPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Double)>>('isnan');
  late final _isnan = _isnanPtr.asFunction<int Function(double)>();

  int isnanf(
    double __value,
  ) {
    return _isnanf(
      __value,
    );
  }

  late final _isnanfPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Float)>>('isnanf');
  late final _isnanf = _isnanfPtr.asFunction<int Function(double)>();

  double j0(
    double arg0,
  ) {
    return _j0(
      arg0,
    );
  }

  late final _j0Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('j0');
  late final _j0 = _j0Ptr.asFunction<double Function(double)>();

  double j0f(
    double arg0,
  ) {
    return _j0f(
      arg0,
    );
  }

  late final _j0fPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('j0f');
  late final _j0f = _j0fPtr.asFunction<double Function(double)>();

  double j1(
    double arg0,
  ) {
    return _j1(
      arg0,
    );
  }

  late final _j1Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('j1');
  late final _j1 = _j1Ptr.asFunction<double Function(double)>();

  double j1f(
    double arg0,
  ) {
    return _j1f(
      arg0,
    );
  }

  late final _j1fPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('j1f');
  late final _j1f = _j1fPtr.asFunction<double Function(double)>();

  double jn(
    int arg0,
    double arg1,
  ) {
    return _jn(
      arg0,
      arg1,
    );
  }

  late final _jnPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Int32, ffi.Double)>>(
          'jn');
  late final _jn = _jnPtr.asFunction<double Function(int, double)>();

  double jnf(
    int arg0,
    double arg1,
  ) {
    return _jnf(
      arg0,
      arg1,
    );
  }

  late final _jnfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Int32, ffi.Float)>>(
          'jnf');
  late final _jnf = _jnfPtr.asFunction<double Function(int, double)>();

  int jrand48(
    ffi.Pointer<ffi.Uint16> __xsubi,
  ) {
    return _jrand48(
      __xsubi,
    );
  }

  late final _jrand48Ptr =
      _lookup<ffi.NativeFunction<ffi.Int64 Function(ffi.Pointer<ffi.Uint16>)>>(
          'jrand48');
  late final _jrand48 =
      _jrand48Ptr.asFunction<int Function(ffi.Pointer<ffi.Uint16>)>();

  int jrand48_r(
    ffi.Pointer<ffi.Uint16> __xsubi,
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Int64> __result,
  ) {
    return _jrand48_r(
      __xsubi,
      __buffer,
      __result,
    );
  }

  late final _jrand48_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Uint16>, ffi.Pointer<drand48_data>,
              ffi.Pointer<ffi.Int64>)>>('jrand48_r');
  late final _jrand48_r = _jrand48_rPtr.asFunction<
      int Function(ffi.Pointer<ffi.Uint16>, ffi.Pointer<drand48_data>,
          ffi.Pointer<ffi.Int64>)>();

  ffi.Pointer<ffi.Int8> l64a(
    int __n,
  ) {
    return _l64a(
      __n,
    );
  }

  late final _l64aPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int8> Function(ffi.Int64)>>(
          'l64a');
  late final _l64a = _l64aPtr.asFunction<ffi.Pointer<ffi.Int8> Function(int)>();

  int labs(
    int __x,
  ) {
    return _labs(
      __x,
    );
  }

  late final _labsPtr =
      _lookup<ffi.NativeFunction<ffi.Int64 Function(ffi.Int64)>>('labs');
  late final _labs = _labsPtr.asFunction<int Function(int)>();

  void lcong48(
    ffi.Pointer<ffi.Uint16> __param,
  ) {
    return _lcong48(
      __param,
    );
  }

  late final _lcong48Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Uint16>)>>(
          'lcong48');
  late final _lcong48 =
      _lcong48Ptr.asFunction<void Function(ffi.Pointer<ffi.Uint16>)>();

  int lcong48_r(
    ffi.Pointer<ffi.Uint16> __param,
    ffi.Pointer<drand48_data> __buffer,
  ) {
    return _lcong48_r(
      __param,
      __buffer,
    );
  }

  late final _lcong48_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<drand48_data>)>>('lcong48_r');
  late final _lcong48_r = _lcong48_rPtr.asFunction<
      int Function(ffi.Pointer<ffi.Uint16>, ffi.Pointer<drand48_data>)>();

  double ldexp(
    double __x,
    int __exponent,
  ) {
    return _ldexp(
      __x,
      __exponent,
    );
  }

  late final _ldexpPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Int32)>>(
          'ldexp');
  late final _ldexp = _ldexpPtr.asFunction<double Function(double, int)>();

  double ldexpf(
    double __x,
    int __exponent,
  ) {
    return _ldexpf(
      __x,
      __exponent,
    );
  }

  late final _ldexpfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Int32)>>(
          'ldexpf');
  late final _ldexpf = _ldexpfPtr.asFunction<double Function(double, int)>();

  ldiv_t ldiv(
    int __numer,
    int __denom,
  ) {
    return _ldiv(
      __numer,
      __denom,
    );
  }

  late final _ldivPtr =
      _lookup<ffi.NativeFunction<ldiv_t Function(ffi.Int64, ffi.Int64)>>(
          'ldiv');
  late final _ldiv = _ldivPtr.asFunction<ldiv_t Function(int, int)>();

  double lgamma(
    double arg0,
  ) {
    return _lgamma(
      arg0,
    );
  }

  late final _lgammaPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('lgamma');
  late final _lgamma = _lgammaPtr.asFunction<double Function(double)>();

  double lgamma_r(
    double arg0,
    ffi.Pointer<ffi.Int32> __signgamp,
  ) {
    return _lgamma_r(
      arg0,
      __signgamp,
    );
  }

  late final _lgamma_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Double, ffi.Pointer<ffi.Int32>)>>('lgamma_r');
  late final _lgamma_r = _lgamma_rPtr
      .asFunction<double Function(double, ffi.Pointer<ffi.Int32>)>();

  double lgammaf(
    double arg0,
  ) {
    return _lgammaf(
      arg0,
    );
  }

  late final _lgammafPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('lgammaf');
  late final _lgammaf = _lgammafPtr.asFunction<double Function(double)>();

  double lgammaf_r(
    double arg0,
    ffi.Pointer<ffi.Int32> __signgamp,
  ) {
    return _lgammaf_r(
      arg0,
      __signgamp,
    );
  }

  late final _lgammaf_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(ffi.Float, ffi.Pointer<ffi.Int32>)>>('lgammaf_r');
  late final _lgammaf_r = _lgammaf_rPtr
      .asFunction<double Function(double, ffi.Pointer<ffi.Int32>)>();

  int llabs(
    int __x,
  ) {
    return _llabs(
      __x,
    );
  }

  late final _llabsPtr =
      _lookup<ffi.NativeFunction<ffi.Int64 Function(ffi.Int64)>>('llabs');
  late final _llabs = _llabsPtr.asFunction<int Function(int)>();

  lldiv_t lldiv(
    int __numer,
    int __denom,
  ) {
    return _lldiv(
      __numer,
      __denom,
    );
  }

  late final _lldivPtr =
      _lookup<ffi.NativeFunction<lldiv_t Function(ffi.Int64, ffi.Int64)>>(
          'lldiv');
  late final _lldiv = _lldivPtr.asFunction<lldiv_t Function(int, int)>();

  int llrint(
    double __x,
  ) {
    return _llrint(
      __x,
    );
  }

  late final _llrintPtr =
      _lookup<ffi.NativeFunction<ffi.Int64 Function(ffi.Double)>>('llrint');
  late final _llrint = _llrintPtr.asFunction<int Function(double)>();

  int llrintf(
    double __x,
  ) {
    return _llrintf(
      __x,
    );
  }

  late final _llrintfPtr =
      _lookup<ffi.NativeFunction<ffi.Int64 Function(ffi.Float)>>('llrintf');
  late final _llrintf = _llrintfPtr.asFunction<int Function(double)>();

  int llround(
    double __x,
  ) {
    return _llround(
      __x,
    );
  }

  late final _llroundPtr =
      _lookup<ffi.NativeFunction<ffi.Int64 Function(ffi.Double)>>('llround');
  late final _llround = _llroundPtr.asFunction<int Function(double)>();

  int llroundf(
    double __x,
  ) {
    return _llroundf(
      __x,
    );
  }

  late final _llroundfPtr =
      _lookup<ffi.NativeFunction<ffi.Int64 Function(ffi.Float)>>('llroundf');
  late final _llroundf = _llroundfPtr.asFunction<int Function(double)>();

  double log(
    double __x,
  ) {
    return _log(
      __x,
    );
  }

  late final _logPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('log');
  late final _log = _logPtr.asFunction<double Function(double)>();

  double log10(
    double __x,
  ) {
    return _log10(
      __x,
    );
  }

  late final _log10Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('log10');
  late final _log10 = _log10Ptr.asFunction<double Function(double)>();

  double log10f(
    double __x,
  ) {
    return _log10f(
      __x,
    );
  }

  late final _log10fPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('log10f');
  late final _log10f = _log10fPtr.asFunction<double Function(double)>();

  double log1p(
    double __x,
  ) {
    return _log1p(
      __x,
    );
  }

  late final _log1pPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('log1p');
  late final _log1p = _log1pPtr.asFunction<double Function(double)>();

  double log1pf(
    double __x,
  ) {
    return _log1pf(
      __x,
    );
  }

  late final _log1pfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('log1pf');
  late final _log1pf = _log1pfPtr.asFunction<double Function(double)>();

  double log2(
    double __x,
  ) {
    return _log2(
      __x,
    );
  }

  late final _log2Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('log2');
  late final _log2 = _log2Ptr.asFunction<double Function(double)>();

  double log2f(
    double __x,
  ) {
    return _log2f(
      __x,
    );
  }

  late final _log2fPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('log2f');
  late final _log2f = _log2fPtr.asFunction<double Function(double)>();

  double logb(
    double __x,
  ) {
    return _logb(
      __x,
    );
  }

  late final _logbPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('logb');
  late final _logb = _logbPtr.asFunction<double Function(double)>();

  double logbf(
    double __x,
  ) {
    return _logbf(
      __x,
    );
  }

  late final _logbfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('logbf');
  late final _logbf = _logbfPtr.asFunction<double Function(double)>();

  double logf(
    double __x,
  ) {
    return _logf(
      __x,
    );
  }

  late final _logfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('logf');
  late final _logf = _logfPtr.asFunction<double Function(double)>();

  int lrand48() {
    return _lrand48();
  }

  late final _lrand48Ptr =
      _lookup<ffi.NativeFunction<ffi.Int64 Function()>>('lrand48');
  late final _lrand48 = _lrand48Ptr.asFunction<int Function()>();

  int lrand48_r(
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Int64> __result,
  ) {
    return _lrand48_r(
      __buffer,
      __result,
    );
  }

  late final _lrand48_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Int64>)>>('lrand48_r');
  late final _lrand48_r = _lrand48_rPtr.asFunction<
      int Function(ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Int64>)>();

  int lrint(
    double __x,
  ) {
    return _lrint(
      __x,
    );
  }

  late final _lrintPtr =
      _lookup<ffi.NativeFunction<ffi.Int64 Function(ffi.Double)>>('lrint');
  late final _lrint = _lrintPtr.asFunction<int Function(double)>();

  int lrintf(
    double __x,
  ) {
    return _lrintf(
      __x,
    );
  }

  late final _lrintfPtr =
      _lookup<ffi.NativeFunction<ffi.Int64 Function(ffi.Float)>>('lrintf');
  late final _lrintf = _lrintfPtr.asFunction<int Function(double)>();

  int lround(
    double __x,
  ) {
    return _lround(
      __x,
    );
  }

  late final _lroundPtr =
      _lookup<ffi.NativeFunction<ffi.Int64 Function(ffi.Double)>>('lround');
  late final _lround = _lroundPtr.asFunction<int Function(double)>();

  int lroundf(
    double __x,
  ) {
    return _lroundf(
      __x,
    );
  }

  late final _lroundfPtr =
      _lookup<ffi.NativeFunction<ffi.Int64 Function(ffi.Float)>>('lroundf');
  late final _lroundf = _lroundfPtr.asFunction<int Function(double)>();

  ffi.Pointer<ffi.Void> malloc(
    int __size,
  ) {
    return _malloc(
      __size,
    );
  }

  late final _mallocPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(size_t)>>(
          'malloc');
  late final _malloc =
      _mallocPtr.asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  int mblen(
    ffi.Pointer<ffi.Int8> __s,
    int __n,
  ) {
    return _mblen(
      __s,
      __n,
    );
  }

  late final _mblenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Int8>, size_t)>>('mblen');
  late final _mblen =
      _mblenPtr.asFunction<int Function(ffi.Pointer<ffi.Int8>, int)>();

  int mbstowcs(
    ffi.Pointer<wchar_t> __pwcs,
    ffi.Pointer<ffi.Int8> __s,
    int __n,
  ) {
    return _mbstowcs(
      __pwcs,
      __s,
      __n,
    );
  }

  late final _mbstowcsPtr = _lookup<
      ffi.NativeFunction<
          size_t Function(ffi.Pointer<wchar_t>, ffi.Pointer<ffi.Int8>,
              size_t)>>('mbstowcs');
  late final _mbstowcs = _mbstowcsPtr.asFunction<
      int Function(ffi.Pointer<wchar_t>, ffi.Pointer<ffi.Int8>, int)>();

  int mbtowc(
    ffi.Pointer<wchar_t> __pwc,
    ffi.Pointer<ffi.Int8> __s,
    int __n,
  ) {
    return _mbtowc(
      __pwc,
      __s,
      __n,
    );
  }

  late final _mbtowcPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<wchar_t>, ffi.Pointer<ffi.Int8>, size_t)>>('mbtowc');
  late final _mbtowc = _mbtowcPtr.asFunction<
      int Function(ffi.Pointer<wchar_t>, ffi.Pointer<ffi.Int8>, int)>();

  ffi.Pointer<ffi.Void> memccpy(
    ffi.Pointer<ffi.Void> __dest,
    ffi.Pointer<ffi.Void> __src,
    int __c,
    int __n,
  ) {
    return _memccpy(
      __dest,
      __src,
      __c,
      __n,
    );
  }

  late final _memccpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.Int32, size_t)>>('memccpy');
  late final _memccpy = _memccpyPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int, int)>();

  ffi.Pointer<ffi.Void> memchr(
    ffi.Pointer<ffi.Void> __s,
    int __c,
    int __n,
  ) {
    return _memchr(
      __s,
      __c,
      __n,
    );
  }

  late final _memchrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Int32, size_t)>>('memchr');
  late final _memchr = _memchrPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int, int)>();

  int memcmp(
    ffi.Pointer<ffi.Void> __s1,
    ffi.Pointer<ffi.Void> __s2,
    int __n,
  ) {
    return _memcmp(
      __s1,
      __s2,
      __n,
    );
  }

  late final _memcmpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, size_t)>>('memcmp');
  late final _memcmp = _memcmpPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Void> memcpy(
    ffi.Pointer<ffi.Void> __dest,
    ffi.Pointer<ffi.Void> __src,
    int __n,
  ) {
    return _memcpy(
      __dest,
      __src,
      __n,
    );
  }

  late final _memcpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, size_t)>>('memcpy');
  late final _memcpy = _memcpyPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Void> memmove(
    ffi.Pointer<ffi.Void> __dest,
    ffi.Pointer<ffi.Void> __src,
    int __n,
  ) {
    return _memmove(
      __dest,
      __src,
      __n,
    );
  }

  late final _memmovePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, size_t)>>('memmove');
  late final _memmove = _memmovePtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Void> memset(
    ffi.Pointer<ffi.Void> __s,
    int __c,
    int __n,
  ) {
    return _memset(
      __s,
      __c,
      __n,
    );
  }

  late final _memsetPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Int32, size_t)>>('memset');
  late final _memset = _memsetPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int, int)>();

  ffi.Pointer<ffi.Int8> mkdtemp(
    ffi.Pointer<ffi.Int8> __template,
  ) {
    return _mkdtemp(
      __template,
    );
  }

  late final _mkdtempPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ffi.Int8>)>>('mkdtemp');
  late final _mkdtemp = _mkdtempPtr
      .asFunction<ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ffi.Int8>)>();

  int mkstemp(
    ffi.Pointer<ffi.Int8> __template,
  ) {
    return _mkstemp(
      __template,
    );
  }

  late final _mkstempPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Int8>)>>(
          'mkstemp');
  late final _mkstemp =
      _mkstempPtr.asFunction<int Function(ffi.Pointer<ffi.Int8>)>();

  int mkstemps(
    ffi.Pointer<ffi.Int8> __template,
    int __suffixlen,
  ) {
    return _mkstemps(
      __template,
      __suffixlen,
    );
  }

  late final _mkstempsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Int8>, ffi.Int32)>>('mkstemps');
  late final _mkstemps =
      _mkstempsPtr.asFunction<int Function(ffi.Pointer<ffi.Int8>, int)>();

  ffi.Pointer<ffi.Int8> mktemp(
    ffi.Pointer<ffi.Int8> __template,
  ) {
    return _mktemp(
      __template,
    );
  }

  late final _mktempPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ffi.Int8>)>>('mktemp');
  late final _mktemp = _mktempPtr
      .asFunction<ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ffi.Int8>)>();

  double modf(
    double __x,
    ffi.Pointer<ffi.Double> __iptr,
  ) {
    return _modf(
      __x,
      __iptr,
    );
  }

  late final _modfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Double, ffi.Pointer<ffi.Double>)>>('modf');
  late final _modf =
      _modfPtr.asFunction<double Function(double, ffi.Pointer<ffi.Double>)>();

  double modff(
    double __x,
    ffi.Pointer<ffi.Float> __iptr,
  ) {
    return _modff(
      __x,
      __iptr,
    );
  }

  late final _modffPtr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(ffi.Float, ffi.Pointer<ffi.Float>)>>('modff');
  late final _modff =
      _modffPtr.asFunction<double Function(double, ffi.Pointer<ffi.Float>)>();

  int mrand48() {
    return _mrand48();
  }

  late final _mrand48Ptr =
      _lookup<ffi.NativeFunction<ffi.Int64 Function()>>('mrand48');
  late final _mrand48 = _mrand48Ptr.asFunction<int Function()>();

  int mrand48_r(
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Int64> __result,
  ) {
    return _mrand48_r(
      __buffer,
      __result,
    );
  }

  late final _mrand48_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Int64>)>>('mrand48_r');
  late final _mrand48_r = _mrand48_rPtr.asFunction<
      int Function(ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Int64>)>();

  double nan(
    ffi.Pointer<ffi.Int8> __tagb,
  ) {
    return _nan(
      __tagb,
    );
  }

  late final _nanPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Pointer<ffi.Int8>)>>(
          'nan');
  late final _nan =
      _nanPtr.asFunction<double Function(ffi.Pointer<ffi.Int8>)>();

  double nanf(
    ffi.Pointer<ffi.Int8> __tagb,
  ) {
    return _nanf(
      __tagb,
    );
  }

  late final _nanfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Pointer<ffi.Int8>)>>(
          'nanf');
  late final _nanf =
      _nanfPtr.asFunction<double Function(ffi.Pointer<ffi.Int8>)>();

  double nearbyint(
    double __x,
  ) {
    return _nearbyint(
      __x,
    );
  }

  late final _nearbyintPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('nearbyint');
  late final _nearbyint = _nearbyintPtr.asFunction<double Function(double)>();

  double nearbyintf(
    double __x,
  ) {
    return _nearbyintf(
      __x,
    );
  }

  late final _nearbyintfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('nearbyintf');
  late final _nearbyintf = _nearbyintfPtr.asFunction<double Function(double)>();

  double nextafter(
    double __x,
    double __y,
  ) {
    return _nextafter(
      __x,
      __y,
    );
  }

  late final _nextafterPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'nextafter');
  late final _nextafter =
      _nextafterPtr.asFunction<double Function(double, double)>();

  double nextafterf(
    double __x,
    double __y,
  ) {
    return _nextafterf(
      __x,
      __y,
    );
  }

  late final _nextafterfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>(
          'nextafterf');
  late final _nextafterf =
      _nextafterfPtr.asFunction<double Function(double, double)>();

  int nrand48(
    ffi.Pointer<ffi.Uint16> __xsubi,
  ) {
    return _nrand48(
      __xsubi,
    );
  }

  late final _nrand48Ptr =
      _lookup<ffi.NativeFunction<ffi.Int64 Function(ffi.Pointer<ffi.Uint16>)>>(
          'nrand48');
  late final _nrand48 =
      _nrand48Ptr.asFunction<int Function(ffi.Pointer<ffi.Uint16>)>();

  int nrand48_r(
    ffi.Pointer<ffi.Uint16> __xsubi,
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Int64> __result,
  ) {
    return _nrand48_r(
      __xsubi,
      __buffer,
      __result,
    );
  }

  late final _nrand48_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Uint16>, ffi.Pointer<drand48_data>,
              ffi.Pointer<ffi.Int64>)>>('nrand48_r');
  late final _nrand48_r = _nrand48_rPtr.asFunction<
      int Function(ffi.Pointer<ffi.Uint16>, ffi.Pointer<drand48_data>,
          ffi.Pointer<ffi.Int64>)>();

  int on_exit(
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Void Function(ffi.Int32, ffi.Pointer<ffi.Void>)>>
        __func,
    ffi.Pointer<ffi.Void> __arg,
  ) {
    return _on_exit(
      __func,
      __arg,
    );
  }

  late final _on_exitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(ffi.Int32, ffi.Pointer<ffi.Void>)>>,
              ffi.Pointer<ffi.Void>)>>('on_exit');
  late final _on_exit = _on_exitPtr.asFunction<
      int Function(
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Int32, ffi.Pointer<ffi.Void>)>>,
          ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<FILE> open_memstream(
    ffi.Pointer<ffi.Pointer<ffi.Int8>> __bufloc,
    ffi.Pointer<size_t> __sizeloc,
  ) {
    return _open_memstream(
      __bufloc,
      __sizeloc,
    );
  }

  late final _open_memstreamPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(ffi.Pointer<ffi.Pointer<ffi.Int8>>,
              ffi.Pointer<size_t>)>>('open_memstream');
  late final _open_memstream = _open_memstreamPtr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Pointer<ffi.Int8>>, ffi.Pointer<size_t>)>();

  int pclose(
    ffi.Pointer<FILE> __stream,
  ) {
    return _pclose(
      __stream,
    );
  }

  late final _pclosePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<FILE>)>>(
          'pclose');
  late final _pclose = _pclosePtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  void perror(
    ffi.Pointer<ffi.Int8> __s,
  ) {
    return _perror(
      __s,
    );
  }

  late final _perrorPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int8>)>>(
          'perror');
  late final _perror =
      _perrorPtr.asFunction<void Function(ffi.Pointer<ffi.Int8>)>();

  ffi.Pointer<FILE> popen(
    ffi.Pointer<ffi.Int8> __command,
    ffi.Pointer<ffi.Int8> __modes,
  ) {
    return _popen(
      __command,
      __modes,
    );
  }

  late final _popenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(
              ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>>('popen');
  late final _popen = _popenPtr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>();

  int posix_memalign(
    ffi.Pointer<ffi.Pointer<ffi.Void>> __memptr,
    int __alignment,
    int __size,
  ) {
    return _posix_memalign(
      __memptr,
      __alignment,
      __size,
    );
  }

  late final _posix_memalignPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Pointer<ffi.Void>>, size_t,
              size_t)>>('posix_memalign');
  late final _posix_memalign = _posix_memalignPtr
      .asFunction<int Function(ffi.Pointer<ffi.Pointer<ffi.Void>>, int, int)>();

  double pow(
    double __x,
    double __y,
  ) {
    return _pow(
      __x,
      __y,
    );
  }

  late final _powPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'pow');
  late final _pow = _powPtr.asFunction<double Function(double, double)>();

  double powf(
    double __x,
    double __y,
  ) {
    return _powf(
      __x,
      __y,
    );
  }

  late final _powfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>(
          'powf');
  late final _powf = _powfPtr.asFunction<double Function(double, double)>();

  int printf(
    ffi.Pointer<ffi.Int8> __format,
  ) {
    return _printf(
      __format,
    );
  }

  late final _printfPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Int8>)>>(
          'printf');
  late final _printf =
      _printfPtr.asFunction<int Function(ffi.Pointer<ffi.Int8>)>();

  int pselect(
    int __nfds,
    ffi.Pointer<fd_set> __readfds,
    ffi.Pointer<fd_set> __writefds,
    ffi.Pointer<fd_set> __exceptfds,
    ffi.Pointer<timespec> __timeout,
    ffi.Pointer<__sigset_t> __sigmask,
  ) {
    return _pselect(
      __nfds,
      __readfds,
      __writefds,
      __exceptfds,
      __timeout,
      __sigmask,
    );
  }

  late final _pselectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Int32,
              ffi.Pointer<fd_set>,
              ffi.Pointer<fd_set>,
              ffi.Pointer<fd_set>,
              ffi.Pointer<timespec>,
              ffi.Pointer<__sigset_t>)>>('pselect');
  late final _pselect = _pselectPtr.asFunction<
      int Function(
          int,
          ffi.Pointer<fd_set>,
          ffi.Pointer<fd_set>,
          ffi.Pointer<fd_set>,
          ffi.Pointer<timespec>,
          ffi.Pointer<__sigset_t>)>();

  int putc(
    int __c,
    ffi.Pointer<FILE> __stream,
  ) {
    return _putc(
      __c,
      __stream,
    );
  }

  late final _putcPtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Int32, ffi.Pointer<FILE>)>>(
      'putc');
  late final _putc =
      _putcPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int putc_unlocked(
    int __c,
    ffi.Pointer<FILE> __stream,
  ) {
    return _putc_unlocked(
      __c,
      __stream,
    );
  }

  late final _putc_unlockedPtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Int32, ffi.Pointer<FILE>)>>(
      'putc_unlocked');
  late final _putc_unlocked =
      _putc_unlockedPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int putchar(
    int __c,
  ) {
    return _putchar(
      __c,
    );
  }

  late final _putcharPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32)>>('putchar');
  late final _putchar = _putcharPtr.asFunction<int Function(int)>();

  int putchar_unlocked(
    int __c,
  ) {
    return _putchar_unlocked(
      __c,
    );
  }

  late final _putchar_unlockedPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32)>>(
          'putchar_unlocked');
  late final _putchar_unlocked =
      _putchar_unlockedPtr.asFunction<int Function(int)>();

  int putenv(
    ffi.Pointer<ffi.Int8> __string,
  ) {
    return _putenv(
      __string,
    );
  }

  late final _putenvPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Int8>)>>(
          'putenv');
  late final _putenv =
      _putenvPtr.asFunction<int Function(ffi.Pointer<ffi.Int8>)>();

  int puts(
    ffi.Pointer<ffi.Int8> __s,
  ) {
    return _puts(
      __s,
    );
  }

  late final _putsPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Int8>)>>(
          'puts');
  late final _puts = _putsPtr.asFunction<int Function(ffi.Pointer<ffi.Int8>)>();

  int putw(
    int __w,
    ffi.Pointer<FILE> __stream,
  ) {
    return _putw(
      __w,
      __stream,
    );
  }

  late final _putwPtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Int32, ffi.Pointer<FILE>)>>(
      'putw');
  late final _putw =
      _putwPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  void qsort(
    ffi.Pointer<ffi.Void> __base,
    int __nmemb,
    int __size,
    __compar_fn_t __compar,
  ) {
    return _qsort(
      __base,
      __nmemb,
      __size,
      __compar,
    );
  }

  late final _qsortPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>, size_t, size_t, __compar_fn_t)>>('qsort');
  late final _qsort = _qsortPtr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, int, int, __compar_fn_t)>();

  void quick_exit(
    int __status,
  ) {
    return _quick_exit(
      __status,
    );
  }

  late final _quick_exitPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int32)>>('quick_exit');
  late final _quick_exit = _quick_exitPtr.asFunction<void Function(int)>();

  int rand() {
    return _rand();
  }

  late final _randPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function()>>('rand');
  late final _rand = _randPtr.asFunction<int Function()>();

  int rand_r(
    ffi.Pointer<ffi.Uint32> __seed,
  ) {
    return _rand_r(
      __seed,
    );
  }

  late final _rand_rPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Uint32>)>>(
          'rand_r');
  late final _rand_r =
      _rand_rPtr.asFunction<int Function(ffi.Pointer<ffi.Uint32>)>();

  int random() {
    return _random();
  }

  late final _randomPtr =
      _lookup<ffi.NativeFunction<ffi.Int64 Function()>>('random');
  late final _random = _randomPtr.asFunction<int Function()>();

  int random_r(
    ffi.Pointer<random_data> __buf,
    ffi.Pointer<ffi.Int32> __result,
  ) {
    return _random_r(
      __buf,
      __result,
    );
  }

  late final _random_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<random_data>, ffi.Pointer<ffi.Int32>)>>('random_r');
  late final _random_r = _random_rPtr.asFunction<
      int Function(ffi.Pointer<random_data>, ffi.Pointer<ffi.Int32>)>();

  ffi.Pointer<ffi.Void> realloc(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
  ) {
    return _realloc(
      __ptr,
      __size,
    );
  }

  late final _reallocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, size_t)>>('realloc');
  late final _realloc = _reallocPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Void> reallocarray(
    ffi.Pointer<ffi.Void> __ptr,
    int __nmemb,
    int __size,
  ) {
    return _reallocarray(
      __ptr,
      __nmemb,
      __size,
    );
  }

  late final _reallocarrayPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, size_t, size_t)>>('reallocarray');
  late final _reallocarray = _reallocarrayPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int, int)>();

  ffi.Pointer<ffi.Int8> realpath(
    ffi.Pointer<ffi.Int8> __name,
    ffi.Pointer<ffi.Int8> __resolved,
  ) {
    return _realpath(
      __name,
      __resolved,
    );
  }

  late final _realpathPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>>('realpath');
  late final _realpath = _realpathPtr.asFunction<
      ffi.Pointer<ffi.Int8> Function(
          ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>();

  double remainder(
    double __x,
    double __y,
  ) {
    return _remainder(
      __x,
      __y,
    );
  }

  late final _remainderPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'remainder');
  late final _remainder =
      _remainderPtr.asFunction<double Function(double, double)>();

  double remainderf(
    double __x,
    double __y,
  ) {
    return _remainderf(
      __x,
      __y,
    );
  }

  late final _remainderfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>(
          'remainderf');
  late final _remainderf =
      _remainderfPtr.asFunction<double Function(double, double)>();

  int remove(
    ffi.Pointer<ffi.Int8> __filename,
  ) {
    return _remove(
      __filename,
    );
  }

  late final _removePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Int8>)>>(
          'remove');
  late final _remove =
      _removePtr.asFunction<int Function(ffi.Pointer<ffi.Int8>)>();

  double remquo(
    double __x,
    double __y,
    ffi.Pointer<ffi.Int32> __quo,
  ) {
    return _remquo(
      __x,
      __y,
      __quo,
    );
  }

  late final _remquoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Double, ffi.Double, ffi.Pointer<ffi.Int32>)>>('remquo');
  late final _remquo = _remquoPtr
      .asFunction<double Function(double, double, ffi.Pointer<ffi.Int32>)>();

  double remquof(
    double __x,
    double __y,
    ffi.Pointer<ffi.Int32> __quo,
  ) {
    return _remquof(
      __x,
      __y,
      __quo,
    );
  }

  late final _remquofPtr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(
              ffi.Float, ffi.Float, ffi.Pointer<ffi.Int32>)>>('remquof');
  late final _remquof = _remquofPtr
      .asFunction<double Function(double, double, ffi.Pointer<ffi.Int32>)>();

  int rename(
    ffi.Pointer<ffi.Int8> __old,
    ffi.Pointer<ffi.Int8> __new,
  ) {
    return _rename(
      __old,
      __new,
    );
  }

  late final _renamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>>('rename');
  late final _rename = _renamePtr
      .asFunction<int Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>();

  int renameat(
    int __oldfd,
    ffi.Pointer<ffi.Int8> __old,
    int __newfd,
    ffi.Pointer<ffi.Int8> __new,
  ) {
    return _renameat(
      __oldfd,
      __old,
      __newfd,
      __new,
    );
  }

  late final _renameatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Int32, ffi.Pointer<ffi.Int8>, ffi.Int32,
              ffi.Pointer<ffi.Int8>)>>('renameat');
  late final _renameat = _renameatPtr.asFunction<
      int Function(int, ffi.Pointer<ffi.Int8>, int, ffi.Pointer<ffi.Int8>)>();

  void rewind(
    ffi.Pointer<FILE> __stream,
  ) {
    return _rewind(
      __stream,
    );
  }

  late final _rewindPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'rewind');
  late final _rewind =
      _rewindPtr.asFunction<void Function(ffi.Pointer<FILE>)>();

  ffi.Pointer<ffi.Int8> rindex(
    ffi.Pointer<ffi.Int8> __s,
    int __c,
  ) {
    return _rindex(
      __s,
      __c,
    );
  }

  late final _rindexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<ffi.Int8>, ffi.Int32)>>('rindex');
  late final _rindex = _rindexPtr
      .asFunction<ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ffi.Int8>, int)>();

  double rint(
    double __x,
  ) {
    return _rint(
      __x,
    );
  }

  late final _rintPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('rint');
  late final _rint = _rintPtr.asFunction<double Function(double)>();

  double rintf(
    double __x,
  ) {
    return _rintf(
      __x,
    );
  }

  late final _rintfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('rintf');
  late final _rintf = _rintfPtr.asFunction<double Function(double)>();

  double round(
    double __x,
  ) {
    return _round(
      __x,
    );
  }

  late final _roundPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('round');
  late final _round = _roundPtr.asFunction<double Function(double)>();

  double roundf(
    double __x,
  ) {
    return _roundf(
      __x,
    );
  }

  late final _roundfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('roundf');
  late final _roundf = _roundfPtr.asFunction<double Function(double)>();

  int rpmatch(
    ffi.Pointer<ffi.Int8> __response,
  ) {
    return _rpmatch(
      __response,
    );
  }

  late final _rpmatchPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Int8>)>>(
          'rpmatch');
  late final _rpmatch =
      _rpmatchPtr.asFunction<int Function(ffi.Pointer<ffi.Int8>)>();

  double scalb(
    double __x,
    double __n,
  ) {
    return _scalb(
      __x,
      __n,
    );
  }

  late final _scalbPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'scalb');
  late final _scalb = _scalbPtr.asFunction<double Function(double, double)>();

  double scalbf(
    double __x,
    double __n,
  ) {
    return _scalbf(
      __x,
      __n,
    );
  }

  late final _scalbfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>(
          'scalbf');
  late final _scalbf = _scalbfPtr.asFunction<double Function(double, double)>();

  double scalbln(
    double __x,
    int __n,
  ) {
    return _scalbln(
      __x,
      __n,
    );
  }

  late final _scalblnPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Int64)>>(
          'scalbln');
  late final _scalbln = _scalblnPtr.asFunction<double Function(double, int)>();

  double scalblnf(
    double __x,
    int __n,
  ) {
    return _scalblnf(
      __x,
      __n,
    );
  }

  late final _scalblnfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Int64)>>(
          'scalblnf');
  late final _scalblnf =
      _scalblnfPtr.asFunction<double Function(double, int)>();

  double scalbn(
    double __x,
    int __n,
  ) {
    return _scalbn(
      __x,
      __n,
    );
  }

  late final _scalbnPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Int32)>>(
          'scalbn');
  late final _scalbn = _scalbnPtr.asFunction<double Function(double, int)>();

  double scalbnf(
    double __x,
    int __n,
  ) {
    return _scalbnf(
      __x,
      __n,
    );
  }

  late final _scalbnfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Int32)>>(
          'scalbnf');
  late final _scalbnf = _scalbnfPtr.asFunction<double Function(double, int)>();

  int scanf(
    ffi.Pointer<ffi.Int8> __format,
  ) {
    return _scanf(
      __format,
    );
  }

  late final _scanfPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Int8>)>>(
          'scanf');
  late final _scanf =
      _scanfPtr.asFunction<int Function(ffi.Pointer<ffi.Int8>)>();

  ffi.Pointer<ffi.Uint16> seed48(
    ffi.Pointer<ffi.Uint16> __seed16v,
  ) {
    return _seed48(
      __seed16v,
    );
  }

  late final _seed48Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Uint16> Function(ffi.Pointer<ffi.Uint16>)>>('seed48');
  late final _seed48 = _seed48Ptr
      .asFunction<ffi.Pointer<ffi.Uint16> Function(ffi.Pointer<ffi.Uint16>)>();

  int seed48_r(
    ffi.Pointer<ffi.Uint16> __seed16v,
    ffi.Pointer<drand48_data> __buffer,
  ) {
    return _seed48_r(
      __seed16v,
      __buffer,
    );
  }

  late final _seed48_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Uint16>, ffi.Pointer<drand48_data>)>>('seed48_r');
  late final _seed48_r = _seed48_rPtr.asFunction<
      int Function(ffi.Pointer<ffi.Uint16>, ffi.Pointer<drand48_data>)>();

  int select(
    int __nfds,
    ffi.Pointer<fd_set> __readfds,
    ffi.Pointer<fd_set> __writefds,
    ffi.Pointer<fd_set> __exceptfds,
    ffi.Pointer<timeval> __timeout,
  ) {
    return _select(
      __nfds,
      __readfds,
      __writefds,
      __exceptfds,
      __timeout,
    );
  }

  late final _selectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Int32,
              ffi.Pointer<fd_set>,
              ffi.Pointer<fd_set>,
              ffi.Pointer<fd_set>,
              ffi.Pointer<timeval>)>>('select');
  late final _select = _selectPtr.asFunction<
      int Function(int, ffi.Pointer<fd_set>, ffi.Pointer<fd_set>,
          ffi.Pointer<fd_set>, ffi.Pointer<timeval>)>();

  void setbuf(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Int8> __buf,
  ) {
    return _setbuf(
      __stream,
      __buf,
    );
  }

  late final _setbufPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Int8>)>>('setbuf');
  late final _setbuf = _setbufPtr
      .asFunction<void Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Int8>)>();

  void setbuffer(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Int8> __buf,
    int __size,
  ) {
    return _setbuffer(
      __stream,
      __buf,
      __size,
    );
  }

  late final _setbufferPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Int8>, size_t)>>('setbuffer');
  late final _setbuffer = _setbufferPtr.asFunction<
      void Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Int8>, int)>();

  int setenv(
    ffi.Pointer<ffi.Int8> __name,
    ffi.Pointer<ffi.Int8> __value,
    int __replace,
  ) {
    return _setenv(
      __name,
      __value,
      __replace,
    );
  }

  late final _setenvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>,
              ffi.Int32)>>('setenv');
  late final _setenv = _setenvPtr.asFunction<
      int Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>, int)>();

  void setlinebuf(
    ffi.Pointer<FILE> __stream,
  ) {
    return _setlinebuf(
      __stream,
    );
  }

  late final _setlinebufPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'setlinebuf');
  late final _setlinebuf =
      _setlinebufPtr.asFunction<void Function(ffi.Pointer<FILE>)>();

  ffi.Pointer<ffi.Int8> setstate(
    ffi.Pointer<ffi.Int8> __statebuf,
  ) {
    return _setstate(
      __statebuf,
    );
  }

  late final _setstatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ffi.Int8>)>>('setstate');
  late final _setstate = _setstatePtr
      .asFunction<ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ffi.Int8>)>();

  int setstate_r(
    ffi.Pointer<ffi.Int8> __statebuf,
    ffi.Pointer<random_data> __buf,
  ) {
    return _setstate_r(
      __statebuf,
      __buf,
    );
  }

  late final _setstate_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Int8>, ffi.Pointer<random_data>)>>('setstate_r');
  late final _setstate_r = _setstate_rPtr.asFunction<
      int Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<random_data>)>();

  int setvbuf(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Int8> __buf,
    int __modes,
    int __n,
  ) {
    return _setvbuf(
      __stream,
      __buf,
      __modes,
      __n,
    );
  }

  late final _setvbufPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Int8>,
              ffi.Int32, size_t)>>('setvbuf');
  late final _setvbuf = _setvbufPtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Int8>, int, int)>();

  late final ffi.Pointer<ffi.Int32> _signgam = _lookup<ffi.Int32>('signgam');

  int get signgam => _signgam.value;

  set signgam(int value) => _signgam.value = value;

  double significand(
    double __x,
  ) {
    return _significand(
      __x,
    );
  }

  late final _significandPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>(
          'significand');
  late final _significand =
      _significandPtr.asFunction<double Function(double)>();

  double significandf(
    double __x,
  ) {
    return _significandf(
      __x,
    );
  }

  late final _significandfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>(
          'significandf');
  late final _significandf =
      _significandfPtr.asFunction<double Function(double)>();

  double sin(
    double __x,
  ) {
    return _sin(
      __x,
    );
  }

  late final _sinPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('sin');
  late final _sin = _sinPtr.asFunction<double Function(double)>();

  double sinf(
    double __x,
  ) {
    return _sinf(
      __x,
    );
  }

  late final _sinfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('sinf');
  late final _sinf = _sinfPtr.asFunction<double Function(double)>();

  double sinh(
    double __x,
  ) {
    return _sinh(
      __x,
    );
  }

  late final _sinhPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('sinh');
  late final _sinh = _sinhPtr.asFunction<double Function(double)>();

  double sinhf(
    double __x,
  ) {
    return _sinhf(
      __x,
    );
  }

  late final _sinhfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('sinhf');
  late final _sinhf = _sinhfPtr.asFunction<double Function(double)>();

  int snprintf(
    ffi.Pointer<ffi.Int8> __s,
    int __maxlen,
    ffi.Pointer<ffi.Int8> __format,
  ) {
    return _snprintf(
      __s,
      __maxlen,
      __format,
    );
  }

  late final _snprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Int8>, size_t,
              ffi.Pointer<ffi.Int8>)>>('snprintf');
  late final _snprintf = _snprintfPtr.asFunction<
      int Function(ffi.Pointer<ffi.Int8>, int, ffi.Pointer<ffi.Int8>)>();

  int sprintf(
    ffi.Pointer<ffi.Int8> __s,
    ffi.Pointer<ffi.Int8> __format,
  ) {
    return _sprintf(
      __s,
      __format,
    );
  }

  late final _sprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>>('sprintf');
  late final _sprintf = _sprintfPtr
      .asFunction<int Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>();

  double sqrt(
    double __x,
  ) {
    return _sqrt(
      __x,
    );
  }

  late final _sqrtPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('sqrt');
  late final _sqrt = _sqrtPtr.asFunction<double Function(double)>();

  double sqrtf(
    double __x,
  ) {
    return _sqrtf(
      __x,
    );
  }

  late final _sqrtfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('sqrtf');
  late final _sqrtf = _sqrtfPtr.asFunction<double Function(double)>();

  void srand(
    int __seed,
  ) {
    return _srand(
      __seed,
    );
  }

  late final _srandPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Uint32)>>('srand');
  late final _srand = _srandPtr.asFunction<void Function(int)>();

  void srand48(
    int __seedval,
  ) {
    return _srand48(
      __seedval,
    );
  }

  late final _srand48Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>('srand48');
  late final _srand48 = _srand48Ptr.asFunction<void Function(int)>();

  int srand48_r(
    int __seedval,
    ffi.Pointer<drand48_data> __buffer,
  ) {
    return _srand48_r(
      __seedval,
      __buffer,
    );
  }

  late final _srand48_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Int64, ffi.Pointer<drand48_data>)>>('srand48_r');
  late final _srand48_r =
      _srand48_rPtr.asFunction<int Function(int, ffi.Pointer<drand48_data>)>();

  void srandom(
    int __seed,
  ) {
    return _srandom(
      __seed,
    );
  }

  late final _srandomPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Uint32)>>('srandom');
  late final _srandom = _srandomPtr.asFunction<void Function(int)>();

  int srandom_r(
    int __seed,
    ffi.Pointer<random_data> __buf,
  ) {
    return _srandom_r(
      __seed,
      __buf,
    );
  }

  late final _srandom_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Uint32, ffi.Pointer<random_data>)>>('srandom_r');
  late final _srandom_r =
      _srandom_rPtr.asFunction<int Function(int, ffi.Pointer<random_data>)>();

  int sscanf(
    ffi.Pointer<ffi.Int8> __s,
    ffi.Pointer<ffi.Int8> __format,
  ) {
    return _sscanf(
      __s,
      __format,
    );
  }

  late final _sscanfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>>('sscanf');
  late final _sscanf = _sscanfPtr
      .asFunction<int Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>();

  late final ffi.Pointer<ffi.Pointer<FILE>> _stderr =
      _lookup<ffi.Pointer<FILE>>('stderr');

  ffi.Pointer<FILE> get stderr => _stderr.value;

  set stderr(ffi.Pointer<FILE> value) => _stderr.value = value;

  late final ffi.Pointer<ffi.Pointer<FILE>> _stdin =
      _lookup<ffi.Pointer<FILE>>('stdin');

  ffi.Pointer<FILE> get stdin => _stdin.value;

  set stdin(ffi.Pointer<FILE> value) => _stdin.value = value;

  late final ffi.Pointer<ffi.Pointer<FILE>> _stdout =
      _lookup<ffi.Pointer<FILE>>('stdout');

  ffi.Pointer<FILE> get stdout => _stdout.value;

  set stdout(ffi.Pointer<FILE> value) => _stdout.value = value;

  ffi.Pointer<ffi.Int8> stpcpy(
    ffi.Pointer<ffi.Int8> __dest,
    ffi.Pointer<ffi.Int8> __src,
  ) {
    return _stpcpy(
      __dest,
      __src,
    );
  }

  late final _stpcpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>>('stpcpy');
  late final _stpcpy = _stpcpyPtr.asFunction<
      ffi.Pointer<ffi.Int8> Function(
          ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>();

  ffi.Pointer<ffi.Int8> stpncpy(
    ffi.Pointer<ffi.Int8> __dest,
    ffi.Pointer<ffi.Int8> __src,
    int __n,
  ) {
    return _stpncpy(
      __dest,
      __src,
      __n,
    );
  }

  late final _stpncpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>, size_t)>>('stpncpy');
  late final _stpncpy = _stpncpyPtr.asFunction<
      ffi.Pointer<ffi.Int8> Function(
          ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>, int)>();

  int strcasecmp(
    ffi.Pointer<ffi.Int8> __s1,
    ffi.Pointer<ffi.Int8> __s2,
  ) {
    return _strcasecmp(
      __s1,
      __s2,
    );
  }

  late final _strcasecmpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>>('strcasecmp');
  late final _strcasecmp = _strcasecmpPtr
      .asFunction<int Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>();

  int strcasecmp_l(
    ffi.Pointer<ffi.Int8> __s1,
    ffi.Pointer<ffi.Int8> __s2,
    locale_t __loc,
  ) {
    return _strcasecmp_l(
      __s1,
      __s2,
      __loc,
    );
  }

  late final _strcasecmp_lPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>,
              locale_t)>>('strcasecmp_l');
  late final _strcasecmp_l = _strcasecmp_lPtr.asFunction<
      int Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>, locale_t)>();

  ffi.Pointer<ffi.Int8> strcat(
    ffi.Pointer<ffi.Int8> __dest,
    ffi.Pointer<ffi.Int8> __src,
  ) {
    return _strcat(
      __dest,
      __src,
    );
  }

  late final _strcatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>>('strcat');
  late final _strcat = _strcatPtr.asFunction<
      ffi.Pointer<ffi.Int8> Function(
          ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>();

  ffi.Pointer<ffi.Int8> strchr(
    ffi.Pointer<ffi.Int8> __s,
    int __c,
  ) {
    return _strchr(
      __s,
      __c,
    );
  }

  late final _strchrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<ffi.Int8>, ffi.Int32)>>('strchr');
  late final _strchr = _strchrPtr
      .asFunction<ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ffi.Int8>, int)>();

  int strcmp(
    ffi.Pointer<ffi.Int8> __s1,
    ffi.Pointer<ffi.Int8> __s2,
  ) {
    return _strcmp(
      __s1,
      __s2,
    );
  }

  late final _strcmpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>>('strcmp');
  late final _strcmp = _strcmpPtr
      .asFunction<int Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>();

  int strcoll(
    ffi.Pointer<ffi.Int8> __s1,
    ffi.Pointer<ffi.Int8> __s2,
  ) {
    return _strcoll(
      __s1,
      __s2,
    );
  }

  late final _strcollPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>>('strcoll');
  late final _strcoll = _strcollPtr
      .asFunction<int Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>();

  int strcoll_l(
    ffi.Pointer<ffi.Int8> __s1,
    ffi.Pointer<ffi.Int8> __s2,
    locale_t __l,
  ) {
    return _strcoll_l(
      __s1,
      __s2,
      __l,
    );
  }

  late final _strcoll_lPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>,
              locale_t)>>('strcoll_l');
  late final _strcoll_l = _strcoll_lPtr.asFunction<
      int Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>, locale_t)>();

  ffi.Pointer<ffi.Int8> strcpy(
    ffi.Pointer<ffi.Int8> __dest,
    ffi.Pointer<ffi.Int8> __src,
  ) {
    return _strcpy(
      __dest,
      __src,
    );
  }

  late final _strcpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>>('strcpy');
  late final _strcpy = _strcpyPtr.asFunction<
      ffi.Pointer<ffi.Int8> Function(
          ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>();

  int strcspn(
    ffi.Pointer<ffi.Int8> __s,
    ffi.Pointer<ffi.Int8> __reject,
  ) {
    return _strcspn(
      __s,
      __reject,
    );
  }

  late final _strcspnPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint64 Function(
              ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>>('strcspn');
  late final _strcspn = _strcspnPtr
      .asFunction<int Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>();

  ffi.Pointer<ffi.Int8> strdup(
    ffi.Pointer<ffi.Int8> __s,
  ) {
    return _strdup(
      __s,
    );
  }

  late final _strdupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ffi.Int8>)>>('strdup');
  late final _strdup = _strdupPtr
      .asFunction<ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ffi.Int8>)>();

  ffi.Pointer<ffi.Int8> strerror(
    int __errnum,
  ) {
    return _strerror(
      __errnum,
    );
  }

  late final _strerrorPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int8> Function(ffi.Int32)>>(
          'strerror');
  late final _strerror =
      _strerrorPtr.asFunction<ffi.Pointer<ffi.Int8> Function(int)>();

  ffi.Pointer<ffi.Int8> strerror_l(
    int __errnum,
    locale_t __l,
  ) {
    return _strerror_l(
      __errnum,
      __l,
    );
  }

  late final _strerror_lPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(ffi.Int32, locale_t)>>('strerror_l');
  late final _strerror_l = _strerror_lPtr
      .asFunction<ffi.Pointer<ffi.Int8> Function(int, locale_t)>();

  int strerror_r(
    int __errnum,
    ffi.Pointer<ffi.Int8> __buf,
    int __buflen,
  ) {
    return _strerror_r(
      __errnum,
      __buf,
      __buflen,
    );
  }

  late final _strerror_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Int32, ffi.Pointer<ffi.Int8>, size_t)>>('strerror_r');
  late final _strerror_r = _strerror_rPtr
      .asFunction<int Function(int, ffi.Pointer<ffi.Int8>, int)>();

  int strlen(
    ffi.Pointer<ffi.Int8> __s,
  ) {
    return _strlen(
      __s,
    );
  }

  late final _strlenPtr =
      _lookup<ffi.NativeFunction<ffi.Uint64 Function(ffi.Pointer<ffi.Int8>)>>(
          'strlen');
  late final _strlen =
      _strlenPtr.asFunction<int Function(ffi.Pointer<ffi.Int8>)>();

  int strncasecmp(
    ffi.Pointer<ffi.Int8> __s1,
    ffi.Pointer<ffi.Int8> __s2,
    int __n,
  ) {
    return _strncasecmp(
      __s1,
      __s2,
      __n,
    );
  }

  late final _strncasecmpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>,
              size_t)>>('strncasecmp');
  late final _strncasecmp = _strncasecmpPtr.asFunction<
      int Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>, int)>();

  int strncasecmp_l(
    ffi.Pointer<ffi.Int8> __s1,
    ffi.Pointer<ffi.Int8> __s2,
    int __n,
    locale_t __loc,
  ) {
    return _strncasecmp_l(
      __s1,
      __s2,
      __n,
      __loc,
    );
  }

  late final _strncasecmp_lPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>,
              size_t, locale_t)>>('strncasecmp_l');
  late final _strncasecmp_l = _strncasecmp_lPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>, int, locale_t)>();

  ffi.Pointer<ffi.Int8> strncat(
    ffi.Pointer<ffi.Int8> __dest,
    ffi.Pointer<ffi.Int8> __src,
    int __n,
  ) {
    return _strncat(
      __dest,
      __src,
      __n,
    );
  }

  late final _strncatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>, size_t)>>('strncat');
  late final _strncat = _strncatPtr.asFunction<
      ffi.Pointer<ffi.Int8> Function(
          ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>, int)>();

  int strncmp(
    ffi.Pointer<ffi.Int8> __s1,
    ffi.Pointer<ffi.Int8> __s2,
    int __n,
  ) {
    return _strncmp(
      __s1,
      __s2,
      __n,
    );
  }

  late final _strncmpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>,
              size_t)>>('strncmp');
  late final _strncmp = _strncmpPtr.asFunction<
      int Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>, int)>();

  ffi.Pointer<ffi.Int8> strncpy(
    ffi.Pointer<ffi.Int8> __dest,
    ffi.Pointer<ffi.Int8> __src,
    int __n,
  ) {
    return _strncpy(
      __dest,
      __src,
      __n,
    );
  }

  late final _strncpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>, size_t)>>('strncpy');
  late final _strncpy = _strncpyPtr.asFunction<
      ffi.Pointer<ffi.Int8> Function(
          ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>, int)>();

  ffi.Pointer<ffi.Int8> strndup(
    ffi.Pointer<ffi.Int8> __string,
    int __n,
  ) {
    return _strndup(
      __string,
      __n,
    );
  }

  late final _strndupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<ffi.Int8>, size_t)>>('strndup');
  late final _strndup = _strndupPtr
      .asFunction<ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ffi.Int8>, int)>();

  int strnlen(
    ffi.Pointer<ffi.Int8> __string,
    int __maxlen,
  ) {
    return _strnlen(
      __string,
      __maxlen,
    );
  }

  late final _strnlenPtr = _lookup<
          ffi.NativeFunction<size_t Function(ffi.Pointer<ffi.Int8>, size_t)>>(
      'strnlen');
  late final _strnlen =
      _strnlenPtr.asFunction<int Function(ffi.Pointer<ffi.Int8>, int)>();

  ffi.Pointer<ffi.Int8> strpbrk(
    ffi.Pointer<ffi.Int8> __s,
    ffi.Pointer<ffi.Int8> __accept,
  ) {
    return _strpbrk(
      __s,
      __accept,
    );
  }

  late final _strpbrkPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>>('strpbrk');
  late final _strpbrk = _strpbrkPtr.asFunction<
      ffi.Pointer<ffi.Int8> Function(
          ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>();

  ffi.Pointer<ffi.Int8> strrchr(
    ffi.Pointer<ffi.Int8> __s,
    int __c,
  ) {
    return _strrchr(
      __s,
      __c,
    );
  }

  late final _strrchrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<ffi.Int8>, ffi.Int32)>>('strrchr');
  late final _strrchr = _strrchrPtr
      .asFunction<ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ffi.Int8>, int)>();

  ffi.Pointer<ffi.Int8> strsep(
    ffi.Pointer<ffi.Pointer<ffi.Int8>> __stringp,
    ffi.Pointer<ffi.Int8> __delim,
  ) {
    return _strsep(
      __stringp,
      __delim,
    );
  }

  late final _strsepPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ffi.Pointer<ffi.Int8>>,
              ffi.Pointer<ffi.Int8>)>>('strsep');
  late final _strsep = _strsepPtr.asFunction<
      ffi.Pointer<ffi.Int8> Function(
          ffi.Pointer<ffi.Pointer<ffi.Int8>>, ffi.Pointer<ffi.Int8>)>();

  ffi.Pointer<ffi.Int8> strsignal(
    int __sig,
  ) {
    return _strsignal(
      __sig,
    );
  }

  late final _strsignalPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int8> Function(ffi.Int32)>>(
          'strsignal');
  late final _strsignal =
      _strsignalPtr.asFunction<ffi.Pointer<ffi.Int8> Function(int)>();

  int strspn(
    ffi.Pointer<ffi.Int8> __s,
    ffi.Pointer<ffi.Int8> __accept,
  ) {
    return _strspn(
      __s,
      __accept,
    );
  }

  late final _strspnPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint64 Function(
              ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>>('strspn');
  late final _strspn = _strspnPtr
      .asFunction<int Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>();

  ffi.Pointer<ffi.Int8> strstr(
    ffi.Pointer<ffi.Int8> __haystack,
    ffi.Pointer<ffi.Int8> __needle,
  ) {
    return _strstr(
      __haystack,
      __needle,
    );
  }

  late final _strstrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>>('strstr');
  late final _strstr = _strstrPtr.asFunction<
      ffi.Pointer<ffi.Int8> Function(
          ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>();

  double strtod(
    ffi.Pointer<ffi.Int8> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> __endptr,
  ) {
    return _strtod(
      __nptr,
      __endptr,
    );
  }

  late final _strtodPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Pointer<ffi.Int8>>)>>('strtod');
  late final _strtod = _strtodPtr.asFunction<
      double Function(
          ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Pointer<ffi.Int8>>)>();

  double strtof(
    ffi.Pointer<ffi.Int8> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> __endptr,
  ) {
    return _strtof(
      __nptr,
      __endptr,
    );
  }

  late final _strtofPtr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Pointer<ffi.Int8>>)>>('strtof');
  late final _strtof = _strtofPtr.asFunction<
      double Function(
          ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Pointer<ffi.Int8>>)>();

  ffi.Pointer<ffi.Int8> strtok(
    ffi.Pointer<ffi.Int8> __s,
    ffi.Pointer<ffi.Int8> __delim,
  ) {
    return _strtok(
      __s,
      __delim,
    );
  }

  late final _strtokPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>>('strtok');
  late final _strtok = _strtokPtr.asFunction<
      ffi.Pointer<ffi.Int8> Function(
          ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>();

  ffi.Pointer<ffi.Int8> strtok_r(
    ffi.Pointer<ffi.Int8> __s,
    ffi.Pointer<ffi.Int8> __delim,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> __save_ptr,
  ) {
    return _strtok_r(
      __s,
      __delim,
      __save_ptr,
    );
  }

  late final _strtok_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Pointer<ffi.Int8>>)>>('strtok_r');
  late final _strtok_r = _strtok_rPtr.asFunction<
      ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ffi.Int8>,
          ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Pointer<ffi.Int8>>)>();

  int strtol(
    ffi.Pointer<ffi.Int8> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> __endptr,
    int __base,
  ) {
    return _strtol(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtolPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Pointer<ffi.Int8>>, ffi.Int32)>>('strtol');
  late final _strtol = _strtolPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Pointer<ffi.Int8>>, int)>();

  int strtoll(
    ffi.Pointer<ffi.Int8> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> __endptr,
    int __base,
  ) {
    return _strtoll(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtollPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Pointer<ffi.Int8>>, ffi.Int32)>>('strtoll');
  late final _strtoll = _strtollPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Pointer<ffi.Int8>>, int)>();

  int strtoq(
    ffi.Pointer<ffi.Int8> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> __endptr,
    int __base,
  ) {
    return _strtoq(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtoqPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Pointer<ffi.Int8>>, ffi.Int32)>>('strtoq');
  late final _strtoq = _strtoqPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Pointer<ffi.Int8>>, int)>();

  int strtoul(
    ffi.Pointer<ffi.Int8> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> __endptr,
    int __base,
  ) {
    return _strtoul(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtoulPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint64 Function(ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Pointer<ffi.Int8>>, ffi.Int32)>>('strtoul');
  late final _strtoul = _strtoulPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Pointer<ffi.Int8>>, int)>();

  int strtoull(
    ffi.Pointer<ffi.Int8> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> __endptr,
    int __base,
  ) {
    return _strtoull(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtoullPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint64 Function(ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Pointer<ffi.Int8>>, ffi.Int32)>>('strtoull');
  late final _strtoull = _strtoullPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Pointer<ffi.Int8>>, int)>();

  int strtouq(
    ffi.Pointer<ffi.Int8> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> __endptr,
    int __base,
  ) {
    return _strtouq(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtouqPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint64 Function(ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Pointer<ffi.Int8>>, ffi.Int32)>>('strtouq');
  late final _strtouq = _strtouqPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Pointer<ffi.Int8>>, int)>();

  int strxfrm(
    ffi.Pointer<ffi.Int8> __dest,
    ffi.Pointer<ffi.Int8> __src,
    int __n,
  ) {
    return _strxfrm(
      __dest,
      __src,
      __n,
    );
  }

  late final _strxfrmPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint64 Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>,
              size_t)>>('strxfrm');
  late final _strxfrm = _strxfrmPtr.asFunction<
      int Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>, int)>();

  int strxfrm_l(
    ffi.Pointer<ffi.Int8> __dest,
    ffi.Pointer<ffi.Int8> __src,
    int __n,
    locale_t __l,
  ) {
    return _strxfrm_l(
      __dest,
      __src,
      __n,
      __l,
    );
  }

  late final _strxfrm_lPtr = _lookup<
      ffi.NativeFunction<
          size_t Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>, size_t,
              locale_t)>>('strxfrm_l');
  late final _strxfrm_l = _strxfrm_lPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>, int, locale_t)>();

  late final ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Int8>>> _sys_errlist =
      _lookup<ffi.Pointer<ffi.Pointer<ffi.Int8>>>('sys_errlist');

  ffi.Pointer<ffi.Pointer<ffi.Int8>> get sys_errlist => _sys_errlist.value;

  set sys_errlist(ffi.Pointer<ffi.Pointer<ffi.Int8>> value) =>
      _sys_errlist.value = value;

  late final ffi.Pointer<ffi.Int32> _sys_nerr = _lookup<ffi.Int32>('sys_nerr');

  int get sys_nerr => _sys_nerr.value;

  set sys_nerr(int value) => _sys_nerr.value = value;

  int system(
    ffi.Pointer<ffi.Int8> __command,
  ) {
    return _system(
      __command,
    );
  }

  late final _systemPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Int8>)>>(
          'system');
  late final _system =
      _systemPtr.asFunction<int Function(ffi.Pointer<ffi.Int8>)>();

  double tan(
    double __x,
  ) {
    return _tan(
      __x,
    );
  }

  late final _tanPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('tan');
  late final _tan = _tanPtr.asFunction<double Function(double)>();

  double tanf(
    double __x,
  ) {
    return _tanf(
      __x,
    );
  }

  late final _tanfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('tanf');
  late final _tanf = _tanfPtr.asFunction<double Function(double)>();

  double tanh(
    double __x,
  ) {
    return _tanh(
      __x,
    );
  }

  late final _tanhPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('tanh');
  late final _tanh = _tanhPtr.asFunction<double Function(double)>();

  double tanhf(
    double __x,
  ) {
    return _tanhf(
      __x,
    );
  }

  late final _tanhfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('tanhf');
  late final _tanhf = _tanhfPtr.asFunction<double Function(double)>();

  ffi.Pointer<ffi.Int8> tempnam(
    ffi.Pointer<ffi.Int8> __dir,
    ffi.Pointer<ffi.Int8> __pfx,
  ) {
    return _tempnam(
      __dir,
      __pfx,
    );
  }

  late final _tempnamPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>>('tempnam');
  late final _tempnam = _tempnamPtr.asFunction<
      ffi.Pointer<ffi.Int8> Function(
          ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>();

  double tgamma(
    double arg0,
  ) {
    return _tgamma(
      arg0,
    );
  }

  late final _tgammaPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('tgamma');
  late final _tgamma = _tgammaPtr.asFunction<double Function(double)>();

  double tgammaf(
    double arg0,
  ) {
    return _tgammaf(
      arg0,
    );
  }

  late final _tgammafPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('tgammaf');
  late final _tgammaf = _tgammafPtr.asFunction<double Function(double)>();

  ffi.Pointer<FILE> tmpfile() {
    return _tmpfile();
  }

  late final _tmpfilePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<FILE> Function()>>('tmpfile');
  late final _tmpfile = _tmpfilePtr.asFunction<ffi.Pointer<FILE> Function()>();

  ffi.Pointer<ffi.Int8> tmpnam(
    ffi.Pointer<ffi.Int8> __s,
  ) {
    return _tmpnam(
      __s,
    );
  }

  late final _tmpnamPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ffi.Int8>)>>('tmpnam');
  late final _tmpnam = _tmpnamPtr
      .asFunction<ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ffi.Int8>)>();

  ffi.Pointer<ffi.Int8> tmpnam_r(
    ffi.Pointer<ffi.Int8> __s,
  ) {
    return _tmpnam_r(
      __s,
    );
  }

  late final _tmpnam_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ffi.Int8>)>>('tmpnam_r');
  late final _tmpnam_r = _tmpnam_rPtr
      .asFunction<ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ffi.Int8>)>();

  double trunc(
    double __x,
  ) {
    return _trunc(
      __x,
    );
  }

  late final _truncPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('trunc');
  late final _trunc = _truncPtr.asFunction<double Function(double)>();

  double truncf(
    double __x,
  ) {
    return _truncf(
      __x,
    );
  }

  late final _truncfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('truncf');
  late final _truncf = _truncfPtr.asFunction<double Function(double)>();

  int ungetc(
    int __c,
    ffi.Pointer<FILE> __stream,
  ) {
    return _ungetc(
      __c,
      __stream,
    );
  }

  late final _ungetcPtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Int32, ffi.Pointer<FILE>)>>(
      'ungetc');
  late final _ungetc =
      _ungetcPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int unsetenv(
    ffi.Pointer<ffi.Int8> __name,
  ) {
    return _unsetenv(
      __name,
    );
  }

  late final _unsetenvPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Int8>)>>(
          'unsetenv');
  late final _unsetenv =
      _unsetenvPtr.asFunction<int Function(ffi.Pointer<ffi.Int8>)>();

  ffi.Pointer<ffi.Void> valloc(
    int __size,
  ) {
    return _valloc(
      __size,
    );
  }

  late final _vallocPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(size_t)>>(
          'valloc');
  late final _valloc =
      _vallocPtr.asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  int vdprintf(
    int __fd,
    ffi.Pointer<ffi.Int8> __fmt,
    ffi.Pointer<__va_list_tag> __arg,
  ) {
    return _vdprintf(
      __fd,
      __fmt,
      __arg,
    );
  }

  late final _vdprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Int32, ffi.Pointer<ffi.Int8>,
              ffi.Pointer<__va_list_tag>)>>('vdprintf');
  late final _vdprintf = _vdprintfPtr.asFunction<
      int Function(int, ffi.Pointer<ffi.Int8>, ffi.Pointer<__va_list_tag>)>();

  int vfprintf(
    ffi.Pointer<FILE> __s,
    ffi.Pointer<ffi.Int8> __format,
    ffi.Pointer<__va_list_tag> __arg,
  ) {
    return _vfprintf(
      __s,
      __format,
      __arg,
    );
  }

  late final _vfprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Int8>,
              ffi.Pointer<__va_list_tag>)>>('vfprintf');
  late final _vfprintf = _vfprintfPtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Int8>,
          ffi.Pointer<__va_list_tag>)>();

  int vfscanf(
    ffi.Pointer<FILE> __s,
    ffi.Pointer<ffi.Int8> __format,
    ffi.Pointer<__va_list_tag> __arg,
  ) {
    return _vfscanf(
      __s,
      __format,
      __arg,
    );
  }

  late final _vfscanfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Int8>,
              ffi.Pointer<__va_list_tag>)>>('vfscanf');
  late final _vfscanf = _vfscanfPtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Int8>,
          ffi.Pointer<__va_list_tag>)>();

  int vprintf(
    ffi.Pointer<ffi.Int8> __format,
    ffi.Pointer<__va_list_tag> __arg,
  ) {
    return _vprintf(
      __format,
      __arg,
    );
  }

  late final _vprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Int8>, ffi.Pointer<__va_list_tag>)>>('vprintf');
  late final _vprintf = _vprintfPtr.asFunction<
      int Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<__va_list_tag>)>();

  int vscanf(
    ffi.Pointer<ffi.Int8> __format,
    ffi.Pointer<__va_list_tag> __arg,
  ) {
    return _vscanf(
      __format,
      __arg,
    );
  }

  late final _vscanfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Int8>, ffi.Pointer<__va_list_tag>)>>('vscanf');
  late final _vscanf = _vscanfPtr.asFunction<
      int Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<__va_list_tag>)>();

  int vsnprintf(
    ffi.Pointer<ffi.Int8> __s,
    int __maxlen,
    ffi.Pointer<ffi.Int8> __format,
    ffi.Pointer<__va_list_tag> __arg,
  ) {
    return _vsnprintf(
      __s,
      __maxlen,
      __format,
      __arg,
    );
  }

  late final _vsnprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Int8>, size_t,
              ffi.Pointer<ffi.Int8>, ffi.Pointer<__va_list_tag>)>>('vsnprintf');
  late final _vsnprintf = _vsnprintfPtr.asFunction<
      int Function(ffi.Pointer<ffi.Int8>, int, ffi.Pointer<ffi.Int8>,
          ffi.Pointer<__va_list_tag>)>();

  int vsprintf(
    ffi.Pointer<ffi.Int8> __s,
    ffi.Pointer<ffi.Int8> __format,
    ffi.Pointer<__va_list_tag> __arg,
  ) {
    return _vsprintf(
      __s,
      __format,
      __arg,
    );
  }

  late final _vsprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>,
              ffi.Pointer<__va_list_tag>)>>('vsprintf');
  late final _vsprintf = _vsprintfPtr.asFunction<
      int Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>,
          ffi.Pointer<__va_list_tag>)>();

  int vsscanf(
    ffi.Pointer<ffi.Int8> __s,
    ffi.Pointer<ffi.Int8> __format,
    ffi.Pointer<__va_list_tag> __arg,
  ) {
    return _vsscanf(
      __s,
      __format,
      __arg,
    );
  }

  late final _vsscanfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>,
              ffi.Pointer<__va_list_tag>)>>('vsscanf');
  late final _vsscanf = _vsscanfPtr.asFunction<
      int Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>,
          ffi.Pointer<__va_list_tag>)>();

  int wcstombs(
    ffi.Pointer<ffi.Int8> __s,
    ffi.Pointer<wchar_t> __pwcs,
    int __n,
  ) {
    return _wcstombs(
      __s,
      __pwcs,
      __n,
    );
  }

  late final _wcstombsPtr = _lookup<
      ffi.NativeFunction<
          size_t Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<wchar_t>,
              size_t)>>('wcstombs');
  late final _wcstombs = _wcstombsPtr.asFunction<
      int Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<wchar_t>, int)>();

  int wctomb(
    ffi.Pointer<ffi.Int8> __s,
    int __wchar,
  ) {
    return _wctomb(
      __s,
      __wchar,
    );
  }

  late final _wctombPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Int8>, wchar_t)>>('wctomb');
  late final _wctomb =
      _wctombPtr.asFunction<int Function(ffi.Pointer<ffi.Int8>, int)>();

  double y0(
    double arg0,
  ) {
    return _y0(
      arg0,
    );
  }

  late final _y0Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('y0');
  late final _y0 = _y0Ptr.asFunction<double Function(double)>();

  double y0f(
    double arg0,
  ) {
    return _y0f(
      arg0,
    );
  }

  late final _y0fPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('y0f');
  late final _y0f = _y0fPtr.asFunction<double Function(double)>();

  double y1(
    double arg0,
  ) {
    return _y1(
      arg0,
    );
  }

  late final _y1Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('y1');
  late final _y1 = _y1Ptr.asFunction<double Function(double)>();

  double y1f(
    double arg0,
  ) {
    return _y1f(
      arg0,
    );
  }

  late final _y1fPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('y1f');
  late final _y1f = _y1fPtr.asFunction<double Function(double)>();

  double yn(
    int arg0,
    double arg1,
  ) {
    return _yn(
      arg0,
      arg1,
    );
  }

  late final _ynPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Int32, ffi.Double)>>(
          'yn');
  late final _yn = _ynPtr.asFunction<double Function(int, double)>();

  double ynf(
    int arg0,
    double arg1,
  ) {
    return _ynf(
      arg0,
      arg1,
    );
  }

  late final _ynfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Int32, ffi.Float)>>(
          'ynf');
  late final _ynf = _ynfPtr.asFunction<double Function(int, double)>();
}

const int BIG_ENDIAN = 4321;

const int BUFSIZ = 8192;

const int BYTE_ORDER = 1234;

const int CAIRO_BOILERPLATE_OPEN_NO_DAEMON = 1;

const int CAIRO_FONT_TYPE_ATSUI = 3;

const int CAIRO_HAS_PNG_FUNCTIONS = 1;

const String CAIRO_MIME_TYPE_CCITT_FAX = 'image/g3fax';

const String CAIRO_MIME_TYPE_CCITT_FAX_PARAMS =
    'application/x-cairo.ccitt.params';

const String CAIRO_MIME_TYPE_EPS = 'application/postscript';

const String CAIRO_MIME_TYPE_EPS_PARAMS = 'application/x-cairo.eps.params';

const String CAIRO_MIME_TYPE_JBIG2 = 'application/x-cairo.jbig2';

const String CAIRO_MIME_TYPE_JBIG2_GLOBAL = 'application/x-cairo.jbig2-global';

const String CAIRO_MIME_TYPE_JBIG2_GLOBAL_ID =
    'application/x-cairo.jbig2-global-id';

const String CAIRO_MIME_TYPE_JP2 = 'image/jp2';

const String CAIRO_MIME_TYPE_JPEG = 'image/jpeg';

const String CAIRO_MIME_TYPE_PNG = 'image/png';

const String CAIRO_MIME_TYPE_UNIQUE_ID = 'application/x-cairo.uuid';

const String CAIRO_MIME_TYPE_URI = 'text/x-uri';

const String CAIRO_TAG_DEST = 'cairo.dest';

const String CAIRO_TAG_LINK = 'Link';

const int CAIRO_TEST_CONTENT_COLOR_ALPHA_FLATTENED = 4294967295;

const int CAIRO_VERSION = 11705;

const int CAIRO_VERSION_MAJOR = 1;

const int CAIRO_VERSION_MICRO = 5;

const int CAIRO_VERSION_MINOR = 17;

const String CAIRO_VERSION_STRING = '1.17.5';

const int EOF = -1;

const int EXIT_FAILURE = 1;

const int EXIT_SUCCESS = 0;

const int FALSE = 0;

const int FD_SETSIZE = 1024;

typedef FILE = _IO_FILE;

const int FILENAME_MAX = 4096;

const int FOPEN_MAX = 16;

const int FP_ILOGB0 = -2147483648;

const int FP_ILOGBNAN = -2147483648;

const int FP_INFINITE = 1;

const int FP_INFINITE1 = 1;

const int FP_NAN = 0;

const int FP_NAN1 = 0;

const int FP_NORMAL = 4;

const int FP_NORMAL1 = 4;

const int FP_SUBNORMAL = 3;

const int FP_SUBNORMAL1 = 3;

const int FP_ZERO = 2;

const int FP_ZERO1 = 2;

const int HAVE_UINT64_T = 1;

const double HUGE_VAL = double.infinity;

const double HUGE_VALF = double.infinity;

const double HUGE_VALL = double.infinity;

const double INFINITY = double.infinity;

const int INT16_MAX = 32767;

const int INT16_MIN = -32768;

const int LITTLE_ENDIAN = 1234;

const int L_ctermid = 9;

const int L_tmpnam = 20;

const int MATH_ERREXCEPT = 2;

const int MATH_ERRNO = 1;

const double M_1_PI = 0.3183098861837907;

const double M_2_PI = 0.6366197723675814;

const double M_2_SQRTPI = 1.1283791670955126;

const double M_E = 2.718281828459045;

const double M_LN10 = 2.302585092994046;

const double M_LN2 = 0.6931471805599453;

const double M_LOG10E = 0.4342944819032518;

const double M_LOG2E = 1.4426950408889634;

const double M_PI = 3.141592653589793;

const double M_PI_2 = 1.5707963267948966;

const double M_PI_4 = 0.7853981633974483;

const double M_SQRT1_2 = 0.7071067811865476;

const double M_SQRT2 = 1.4142135623730951;

const double NAN = double.nan;

const int NFDBITS = 64;

const int NULL = 0;

const int PDP_ENDIAN = 3412;

const String P_tmpdir = '/tmp';

const int RAND_MAX = 2147483647;

const int SEEK_CUR = 1;

const int SEEK_END = 2;

const int SEEK_SET = 0;

const int TMP_MAX = 238328;

const int TRUE = 1;

const int UINT16_MAX = 65535;

class UnnamedStruct1 extends ffi.Struct {
  @ffi.Int32()
  external int type;

  @ffi.Int32()
  external int length;
}

class UnnamedStruct2 extends ffi.Struct {
  @ffi.Double()
  external double x;

  @ffi.Double()
  external double y;
}

class UnnamedUnion1 extends ffi.Union {
  @ffi.Uint32()
  external int __wch;

  @ffi.Array.multi([4])
  external ffi.Array<ffi.Int8> __wchb;
}

const int WCONTINUED = 8;

const int WEXITED = 4;

const int WNOHANG = 1;

const int WNOWAIT = 16777216;

const int WSTOPPED = 2;

const int WUNTRACED = 2;

const int _ALLOCA_H = 1;

const int _ATFILE_SOURCE = 1;

const int _BITS_BYTESWAP_H = 1;

const int _BITS_ENDIANNESS_H = 1;

const int _BITS_ENDIAN_H = 1;

const int _BITS_LIBM_SIMD_DECL_STUBS_H = 1;

const int _BITS_PTHREADTYPES_ARCH_H = 1;

const int _BITS_PTHREADTYPES_COMMON_H = 1;

const int _BITS_STDINT_INTN_H = 1;

const int _BITS_STDIO_LIM_H = 1;

const int _BITS_TIME64_H = 1;

const int _BITS_TYPESIZES_H = 1;

const int _BITS_TYPES_H = 1;

const int _BITS_TYPES_LOCALE_T_H = 1;

const int _BITS_TYPES___LOCALE_T_H = 1;

const int _BITS_UINTN_IDENTITY_H = 1;

const int _DEFAULT_SOURCE = 1;

const int _ENDIAN_H = 1;

const int _FEATURES_H = 1;

class _G_fpos64_t extends ffi.Struct {
  @__off64_t()
  external int __pos;

  external __mbstate_t __state;
}

class _G_fpos_t extends ffi.Struct {
  @__off_t()
  external int __pos;

  external __mbstate_t __state;
}

const int _IOFBF = 0;

const int _IOLBF = 1;

const int _IONBF = 2;

const int _IO_EOF_SEEN = 16;

const int _IO_ERR_SEEN = 32;

class _IO_FILE extends ffi.Struct {
  @ffi.Int32()
  external int _flags;

  external ffi.Pointer<ffi.Int8> _IO_read_ptr;

  external ffi.Pointer<ffi.Int8> _IO_read_end;

  external ffi.Pointer<ffi.Int8> _IO_read_base;

  external ffi.Pointer<ffi.Int8> _IO_write_base;

  external ffi.Pointer<ffi.Int8> _IO_write_ptr;

  external ffi.Pointer<ffi.Int8> _IO_write_end;

  external ffi.Pointer<ffi.Int8> _IO_buf_base;

  external ffi.Pointer<ffi.Int8> _IO_buf_end;

  external ffi.Pointer<ffi.Int8> _IO_save_base;

  external ffi.Pointer<ffi.Int8> _IO_backup_base;

  external ffi.Pointer<ffi.Int8> _IO_save_end;

  external ffi.Pointer<_IO_marker> _markers;

  external ffi.Pointer<_IO_FILE> _chain;

  @ffi.Int32()
  external int _fileno;

  @ffi.Int32()
  external int _flags2;

  @__off_t()
  external int _old_offset;

  @ffi.Uint16()
  external int _cur_column;

  @ffi.Int8()
  external int _vtable_offset;

  @ffi.Array.multi([1])
  external ffi.Array<ffi.Int8> _shortbuf;

  external ffi.Pointer<_IO_lock_t> _lock;

  @__off64_t()
  external int _offset;

  external ffi.Pointer<_IO_codecvt> _codecvt;

  external ffi.Pointer<_IO_wide_data> _wide_data;

  external ffi.Pointer<_IO_FILE> _freeres_list;

  external ffi.Pointer<ffi.Void> _freeres_buf;

  @size_t()
  external int __pad5;

  @ffi.Int32()
  external int _mode;

  @ffi.Array.multi([20])
  external ffi.Array<ffi.Int8> _unused2;
}

const int _IO_USER_LOCK = 32768;

class _IO_codecvt extends ffi.Opaque {}

typedef _IO_lock_t = ffi.Void;

class _IO_marker extends ffi.Opaque {}

class _IO_wide_data extends ffi.Opaque {}

const int _MATH_H = 1;

const int _POSIX_C_SOURCE = 200809;

const int _POSIX_SOURCE = 1;

const int _SIGSET_NWORDS = 16;

const int _STDC_PREDEF_H = 1;

const int _STDIO_H = 1;

const int _STDLIB_H = 1;

const int _STRINGS_H = 1;

const int _STRING_H = 1;

const int _STRUCT_TIMESPEC = 1;

const int _SYS_CDEFS_H = 1;

const int _SYS_SELECT_H = 1;

const int _SYS_TYPES_H = 1;

const int _THREAD_MUTEX_INTERNAL_H = 1;

const int _THREAD_SHARED_TYPES_H = 1;

const int __BIG_ENDIAN = 4321;

const int __BIT_TYPES_DEFINED__ = 1;

const int __BYTE_ORDER = 1234;

const int __ENUM_IDTYPE_T = 1;

const int __FD_SETSIZE = 1024;

const String __FD_ZERO_STOS = 'stosq';

const int __FILE_defined = 1;

const int __FLOAT_WORD_ORDER = 1234;

const int __FP_LOGB0_IS_MIN = 1;

const int __FP_LOGBNAN_IS_MIN = 1;

const int __GLIBC_FLT_EVAL_METHOD = 0;

const int __GLIBC_MINOR__ = 31;

const int __GLIBC_USE_DEPRECATED_GETS = 0;

const int __GLIBC_USE_DEPRECATED_SCANF = 0;

const int __GLIBC_USE_IEC_60559_BFP_EXT = 1;

const int __GLIBC_USE_IEC_60559_BFP_EXT_C2X = 1;

const int __GLIBC_USE_IEC_60559_FUNCS_EXT = 1;

const int __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X = 1;

const int __GLIBC_USE_IEC_60559_TYPES_EXT = 1;

const int __GLIBC_USE_ISOC2X = 1;

const int __GLIBC_USE_LIB_EXT2 = 1;

const int __GLIBC__ = 2;

const int __GNUC_VA_LIST = 1;

const int __GNU_LIBRARY__ = 6;

const int __HAVE_DISTINCT_FLOAT128 = 0;

const int __HAVE_DISTINCT_FLOAT128X = 0;

const int __HAVE_DISTINCT_FLOAT16 = 0;

const int __HAVE_DISTINCT_FLOAT32 = 0;

const int __HAVE_DISTINCT_FLOAT32X = 0;

const int __HAVE_DISTINCT_FLOAT64 = 0;

const int __HAVE_DISTINCT_FLOAT64X = 0;

const int __HAVE_FLOAT128 = 0;

const int __HAVE_FLOAT128X = 0;

const int __HAVE_FLOAT128_UNLIKE_LDBL = 0;

const int __HAVE_FLOAT16 = 0;

const int __HAVE_FLOAT32 = 1;

const int __HAVE_FLOAT32X = 1;

const int __HAVE_FLOAT64 = 1;

const int __HAVE_FLOAT64X = 1;

const int __HAVE_FLOAT64X_LONG_DOUBLE = 1;

const int __HAVE_FLOATN_NOT_TYPEDEF = 0;

const int __HAVE_GENERIC_SELECTION = 0;

const int __INO_T_MATCHES_INO64_T = 1;

const int __LITTLE_ENDIAN = 1234;

const int __LONG_DOUBLE_USES_FLOAT128 = 0;

const int __MATH_DECLARE_LDOUBLE = 1;

const int __NFDBITS = 64;

const int __OFF_T_MATCHES_OFF64_T = 1;

const int __PDP_ENDIAN = 3412;

const int __PTHREAD_MUTEX_HAVE_PREV = 1;

const int __PTHREAD_RWLOCK_ELISION_EXTRA = 0;

const int __RLIM_T_MATCHES_RLIM64_T = 1;

const int __SIZEOF_PTHREAD_ATTR_T = 56;

const int __SIZEOF_PTHREAD_BARRIERATTR_T = 4;

const int __SIZEOF_PTHREAD_BARRIER_T = 32;

const int __SIZEOF_PTHREAD_CONDATTR_T = 4;

const int __SIZEOF_PTHREAD_COND_T = 48;

const int __SIZEOF_PTHREAD_MUTEXATTR_T = 4;

const int __SIZEOF_PTHREAD_MUTEX_T = 40;

const int __SIZEOF_PTHREAD_RWLOCKATTR_T = 8;

const int __SIZEOF_PTHREAD_RWLOCK_T = 56;

const int __STATFS_MATCHES_STATFS64 = 1;

const int __STDC_IEC_559_COMPLEX__ = 1;

const int __STDC_IEC_559__ = 1;

const int __STDC_ISO_10646__ = 201706;

const int __SYSCALL_WORDSIZE = 64;

const int __TIMESIZE = 64;

const int __USE_ATFILE = 1;

const int __USE_FORTIFY_LEVEL = 0;

const int __USE_ISOC11 = 1;

const int __USE_ISOC95 = 1;

const int __USE_ISOC99 = 1;

const int __USE_MISC = 1;

const int __USE_POSIX = 1;

const int __USE_POSIX199309 = 1;

const int __USE_POSIX199506 = 1;

const int __USE_POSIX2 = 1;

const int __USE_XOPEN2K = 1;

const int __USE_XOPEN2K8 = 1;

const int __WALL = 1073741824;

const int __WCLONE = 2147483648;

const int __WCOREFLAG = 128;

const int __WNOTHREAD = 536870912;

const int __WORDSIZE = 64;

const int __WORDSIZE_TIME64_COMPAT32 = 1;

const int __W_CONTINUED = 65535;

const int ____FILE_defined = 1;

const int _____fpos64_t_defined = 1;

const int _____fpos_t_defined = 1;

const int ____mbstate_t_defined = 1;

const int __clock_t_defined = 1;

const int __clockid_t_defined = 1;

typedef __compar_fn_t = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int32 Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>;
typedef __fd_mask = ffi.Int64;
typedef __fpos_t = _G_fpos_t;

class __fsid_t extends ffi.Struct {
  @ffi.Array.multi([2])
  external ffi.Array<ffi.Int32> __val;
}

const int __glibc_c99_flexarr_available = 1;

const int __have_pthread_attr_t = 1;

const int __ldiv_t_defined = 1;

const int __lldiv_t_defined = 1;

class __locale_data extends ffi.Opaque {}

class __locale_struct extends ffi.Struct {
  @ffi.Array.multi([13])
  external ffi.Array<ffi.Pointer<__locale_data>> __locales;

  external ffi.Pointer<ffi.Uint16> __ctype_b;

  external ffi.Pointer<ffi.Int32> __ctype_tolower;

  external ffi.Pointer<ffi.Int32> __ctype_toupper;

  @ffi.Array.multi([13])
  external ffi.Array<ffi.Pointer<ffi.Int8>> __names;
}

typedef __locale_t = ffi.Pointer<__locale_struct>;

class __mbstate_t extends ffi.Struct {
  @ffi.Int32()
  external int __count;

  external UnnamedUnion1 __value;
}

typedef __off64_t = ffi.Int64;
typedef __off_t = ffi.Int64;

class __pthread_cond_s extends ffi.Struct {
  @ffi.Array.multi([2])
  external ffi.Array<ffi.Uint32> __g_refs;

  @ffi.Array.multi([2])
  external ffi.Array<ffi.Uint32> __g_size;

  @ffi.Uint32()
  external int __g1_orig_size;

  @ffi.Uint32()
  external int __wrefs;

  @ffi.Array.multi([2])
  external ffi.Array<ffi.Uint32> __g_signals;
}

class __pthread_internal_list extends ffi.Struct {
  external ffi.Pointer<__pthread_internal_list> __prev;

  external ffi.Pointer<__pthread_internal_list> __next;
}

class __pthread_internal_slist extends ffi.Struct {
  external ffi.Pointer<__pthread_internal_slist> __next;
}

typedef __pthread_list_t = __pthread_internal_list;

class __pthread_mutex_s extends ffi.Struct {
  @ffi.Int32()
  external int __lock;

  @ffi.Uint32()
  external int __count;

  @ffi.Int32()
  external int __owner;

  @ffi.Uint32()
  external int __nusers;

  @ffi.Int32()
  external int __kind;

  @ffi.Int16()
  external int __spins;

  @ffi.Int16()
  external int __elision;

  external __pthread_list_t __list;
}

class __pthread_rwlock_arch_t extends ffi.Struct {
  @ffi.Uint32()
  external int __readers;

  @ffi.Uint32()
  external int __writers;

  @ffi.Uint32()
  external int __wrphase_futex;

  @ffi.Uint32()
  external int __writers_futex;

  @ffi.Uint32()
  external int __pad3;

  @ffi.Uint32()
  external int __pad4;

  @ffi.Int32()
  external int __cur_writer;

  @ffi.Int32()
  external int __shared;

  @ffi.Int8()
  external int __rwelision;

  @ffi.Array.multi([7])
  external ffi.Array<ffi.Uint8> __pad1;

  @ffi.Uint64()
  external int __pad2;

  @ffi.Uint32()
  external int __flags;
}

class __sigset_t extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<ffi.Uint64> __val;
}

const int __sigset_t_defined = 1;

typedef __ssize_t = ffi.Int64;

const int __struct_FILE_defined = 1;

typedef __suseconds_t = ffi.Int64;
typedef __syscall_slong_t = ffi.Int64;
typedef __time_t = ffi.Int64;

const int __time_t_defined = 1;

const int __timer_t_defined = 1;

const int __timeval_defined = 1;

class __va_list_tag extends ffi.Struct {
  @ffi.Uint32()
  external int gp_offset;

  @ffi.Uint32()
  external int fp_offset;

  external ffi.Pointer<ffi.Void> overflow_arg_area;

  external ffi.Pointer<ffi.Void> reg_save_area;
}

class _cairo extends ffi.Opaque {}

class _cairo_boilerplate_target extends ffi.Struct {
  external ffi.Pointer<ffi.Int8> name;

  external ffi.Pointer<ffi.Int8> basename;

  external ffi.Pointer<ffi.Int8> file_extension;

  external ffi.Pointer<ffi.Int8> reference_target;

  @ffi.Int32()
  external int expected_type;

  @ffi.Int32()
  external int content;

  @ffi.Uint32()
  external int error_tolerance;

  /// runtime dl check
  external ffi.Pointer<ffi.Int8> probe;

  external cairo_boilerplate_create_surface_t create_surface;

  external cairo_boilerplate_create_similar_t create_similar;

  external cairo_boilerplate_force_fallbacks_t force_fallbacks;

  external cairo_boilerplate_finish_surface_t finish_surface;

  external cairo_boilerplate_get_image_surface_t get_image_surface;

  external cairo_boilerplate_write_to_png_t write_to_png;

  external cairo_boilerplate_cleanup_t cleanup;

  external cairo_boilerplate_wait_t synchronize;

  external cairo_boilerplate_describe_t describe;

  @cairo_bool_t()
  external int is_measurable;

  @cairo_bool_t()
  external int is_vector;

  @cairo_bool_t()
  external int is_recording;
}

class _cairo_device extends ffi.Opaque {}

class _cairo_font_face extends ffi.Opaque {}

class _cairo_font_options extends ffi.Opaque {}

/// cairo_matrix_t:
/// @xx: xx component of the affine transformation
/// @yx: yx component of the affine transformation
/// @xy: xy component of the affine transformation
/// @yy: yy component of the affine transformation
/// @x0: X translation component of the affine transformation
/// @y0: Y translation component of the affine transformation
///
/// A #cairo_matrix_t holds an affine transformation, such as a scale,
/// rotation, shear, or a combination of those. The transformation of
/// a point (x, y) is given by:
/// <programlisting>
/// x_new = xx * x + xy * y + x0;
/// y_new = yx * x + yy * y + y0;
/// </programlisting>
///
/// Since: 1.0
class _cairo_matrix extends ffi.Struct {
  @ffi.Double()
  external double xx;

  @ffi.Double()
  external double yx;

  @ffi.Double()
  external double xy;

  @ffi.Double()
  external double yy;

  @ffi.Double()
  external double x0;

  @ffi.Double()
  external double y0;
}

class _cairo_path_data_t extends ffi.Union {
  external UnnamedStruct1 header;

  external UnnamedStruct2 point;
}

class _cairo_pattern extends ffi.Opaque {}

/// cairo_rectangle_t:
/// @x: X coordinate of the left side of the rectangle
/// @y: Y coordinate of the the top side of the rectangle
/// @width: width of the rectangle
/// @height: height of the rectangle
///
/// A data structure for holding a rectangle.
///
/// Since: 1.4
class _cairo_rectangle extends ffi.Struct {
  @ffi.Double()
  external double x;

  @ffi.Double()
  external double y;

  @ffi.Double()
  external double width;

  @ffi.Double()
  external double height;
}

/// cairo_rectangle_int_t:
/// @x: X coordinate of the left side of the rectangle
/// @y: Y coordinate of the the top side of the rectangle
/// @width: width of the rectangle
/// @height: height of the rectangle
///
/// A data structure for holding a rectangle with integer coordinates.
///
/// Since: 1.10
class _cairo_rectangle_int extends ffi.Struct {
  @ffi.Int32()
  external int x;

  @ffi.Int32()
  external int y;

  @ffi.Int32()
  external int width;

  @ffi.Int32()
  external int height;
}

/// cairo_rectangle_list_t:
/// @status: Error status of the rectangle list
/// @rectangles: Array containing the rectangles
/// @num_rectangles: Number of rectangles in this list
///
/// A data structure for holding a dynamically allocated
/// array of rectangles.
///
/// Since: 1.4
class _cairo_rectangle_list extends ffi.Struct {
  @ffi.Int32()
  external int status;

  external ffi.Pointer<cairo_rectangle_t> rectangles;

  @ffi.Int32()
  external int num_rectangles;
}

class _cairo_region extends ffi.Opaque {}

class _cairo_scaled_font extends ffi.Opaque {}

class _cairo_surface extends ffi.Opaque {}

/// cairo_user_data_key_t:
/// @unused: not used; ignore.
///
/// #cairo_user_data_key_t is used for attaching user data to cairo
/// data structures.  The actual contents of the struct is never used,
/// and there is no need to initialize the object; only the unique
/// address of a #cairo_data_key_t object is used.  Typically, you
/// would just use the address of a static #cairo_data_key_t object.
///
/// Since: 1.0
class _cairo_user_data_key extends ffi.Struct {
  @ffi.Int32()
  external int unused;
}

/// cairo_antialias_t:
/// @CAIRO_ANTIALIAS_DEFAULT: Use the default antialiasing for
/// the subsystem and target device, since 1.0
/// @CAIRO_ANTIALIAS_NONE: Use a bilevel alpha mask, since 1.0
/// @CAIRO_ANTIALIAS_GRAY: Perform single-color antialiasing (using
/// shades of gray for black text on a white background, for example), since 1.0
/// @CAIRO_ANTIALIAS_SUBPIXEL: Perform antialiasing by taking
/// advantage of the order of subpixel elements on devices
/// such as LCD panels, since 1.0
/// @CAIRO_ANTIALIAS_FAST: Hint that the backend should perform some
/// antialiasing but prefer speed over quality, since 1.12
/// @CAIRO_ANTIALIAS_GOOD: The backend should balance quality against
/// performance, since 1.12
/// @CAIRO_ANTIALIAS_BEST: Hint that the backend should render at the highest
/// quality, sacrificing speed if necessary, since 1.12
///
/// Specifies the type of antialiasing to do when rendering text or shapes.
///
/// As it is not necessarily clear from the above what advantages a particular
/// antialias method provides, since 1.12, there is also a set of hints:
/// @CAIRO_ANTIALIAS_FAST: Allow the backend to degrade raster quality for speed
/// @CAIRO_ANTIALIAS_GOOD: A balance between speed and quality
/// @CAIRO_ANTIALIAS_BEST: A high-fidelity, but potentially slow, raster mode
///
/// These make no guarantee on how the backend will perform its rasterisation
/// (if it even rasterises!), nor that they have any differing effect other
/// than to enable some form of antialiasing. In the case of glyph rendering,
/// @CAIRO_ANTIALIAS_FAST and @CAIRO_ANTIALIAS_GOOD will be mapped to
/// @CAIRO_ANTIALIAS_GRAY, with @CAIRO_ANTALIAS_BEST being equivalent to
/// @CAIRO_ANTIALIAS_SUBPIXEL.
///
/// The interpretation of @CAIRO_ANTIALIAS_DEFAULT is left entirely up to
/// the backend, typically this will be similar to @CAIRO_ANTIALIAS_GOOD.
///
/// Since: 1.0
abstract class cairo_antialias {
  static const int CAIRO_ANTIALIAS_DEFAULT = 0;

  /// method
  static const int CAIRO_ANTIALIAS_NONE = 1;
  static const int CAIRO_ANTIALIAS_GRAY = 2;
  static const int CAIRO_ANTIALIAS_SUBPIXEL = 3;

  /// hints
  static const int CAIRO_ANTIALIAS_FAST = 4;
  static const int CAIRO_ANTIALIAS_GOOD = 5;
  static const int CAIRO_ANTIALIAS_BEST = 6;
}

typedef cairo_boilerplate_cleanup_t
    = ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>;
typedef cairo_boilerplate_create_similar_t = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Pointer<cairo_surface_t> Function(
            ffi.Pointer<cairo_surface_t>, ffi.Int32, ffi.Int32, ffi.Int32)>>;
typedef cairo_boilerplate_create_surface_t = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Pointer<cairo_surface_t> Function(
            ffi.Pointer<ffi.Int8>,
            ffi.Int32,
            ffi.Double,
            ffi.Double,
            ffi.Double,
            ffi.Double,
            ffi.Int32,
            ffi.Pointer<ffi.Pointer<ffi.Void>>)>>;
typedef cairo_boilerplate_describe_t = ffi.Pointer<
    ffi.NativeFunction<ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ffi.Void>)>>;
typedef cairo_boilerplate_finish_surface_t = ffi.Pointer<
    ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<cairo_surface_t>)>>;
typedef cairo_boilerplate_force_fallbacks_t = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(
            ffi.Pointer<cairo_surface_t>, ffi.Double, ffi.Double)>>;
typedef cairo_boilerplate_get_image_surface_t = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Pointer<cairo_surface_t> Function(
            ffi.Pointer<cairo_surface_t>, ffi.Int32, ffi.Int32, ffi.Int32)>>;

abstract class cairo_boilerplate_mode_t {
  static const int CAIRO_BOILERPLATE_MODE_TEST = 0;
  static const int CAIRO_BOILERPLATE_MODE_PERF = 1;

  /// This will allow running performance test with threads. The
  /// GL backend is very slow on some drivers when run with thread
  /// awareness turned on.
  static const int CAIRO_BOILERPLATE_MODE_PERF_THREADS = 2;
}

typedef cairo_boilerplate_target_t = _cairo_boilerplate_target;
typedef cairo_boilerplate_wait_t
    = ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>;
typedef cairo_boilerplate_write_to_png_t = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int32 Function(
            ffi.Pointer<cairo_surface_t>, ffi.Pointer<ffi.Int8>)>>;

/// cairo_bool_t:
///
/// #cairo_bool_t is used for boolean values. Returns of type
/// #cairo_bool_t will always be either 0 or 1, but testing against
/// these values explicitly is not encouraged; just use the
/// value as a boolean condition.
///
/// <informalexample><programlisting>
/// if (cairo_in_stroke (cr, x, y)) {
/// /<!-- -->* do something *<!-- -->/
/// }
/// </programlisting></informalexample>
///
/// Since: 1.0
typedef cairo_bool_t = ffi.Int32;

/// cairo_content_t:
/// @CAIRO_CONTENT_COLOR: The surface will hold color content only. (Since 1.0)
/// @CAIRO_CONTENT_ALPHA: The surface will hold alpha content only. (Since 1.0)
/// @CAIRO_CONTENT_COLOR_ALPHA: The surface will hold color and alpha content. (Since 1.0)
///
/// #cairo_content_t is used to describe the content that a surface will
/// contain, whether color information, alpha information (translucence
/// vs. opacity), or both.
///
/// Note: The large values here are designed to keep #cairo_content_t
/// values distinct from #cairo_format_t values so that the
/// implementation can detect the error if users confuse the two types.
///
/// Since: 1.0
abstract class cairo_content {
  static const int CAIRO_CONTENT_COLOR = 4096;
  static const int CAIRO_CONTENT_ALPHA = 8192;
  static const int CAIRO_CONTENT_COLOR_ALPHA = 12288;
}

/// cairo_destroy_func_t:
/// @data: The data element being destroyed.
///
/// #cairo_destroy_func_t the type of function which is called when a
/// data element is destroyed. It is passed the pointer to the data
/// element and should free any memory and resources allocated for it.
///
/// Since: 1.0
typedef cairo_destroy_func_t
    = ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>;

/// cairo_device_t:
///
/// A #cairo_device_t represents the driver interface for drawing
/// operations to a #cairo_surface_t.  There are different subtypes of
/// #cairo_device_t for different drawing backends; for example,
/// cairo_egl_device_create() creates a device that wraps an EGL display and
/// context.
///
/// The type of a device can be queried with cairo_device_get_type().
///
/// Memory management of #cairo_device_t is done with
/// cairo_device_reference() and cairo_device_destroy().
///
/// Since: 1.10
typedef cairo_device_t = _cairo_device;

/// cairo_device_type_t:
/// @CAIRO_DEVICE_TYPE_DRM: The device is of type Direct Render Manager, since 1.10
/// @CAIRO_DEVICE_TYPE_GL: The device is of type OpenGL, since 1.10
/// @CAIRO_DEVICE_TYPE_SCRIPT: The device is of type script, since 1.10
/// @CAIRO_DEVICE_TYPE_XCB: The device is of type xcb, since 1.10
/// @CAIRO_DEVICE_TYPE_XLIB: The device is of type xlib, since 1.10
/// @CAIRO_DEVICE_TYPE_XML: The device is of type XML, since 1.10
/// @CAIRO_DEVICE_TYPE_COGL: The device is of type cogl, since 1.12
/// @CAIRO_DEVICE_TYPE_WIN32: The device is of type win32, since 1.12
/// @CAIRO_DEVICE_TYPE_INVALID: The device is invalid, since 1.10
///
/// #cairo_device_type_t is used to describe the type of a given
/// device. The devices types are also known as "backends" within cairo.
///
/// The device type can be queried with cairo_device_get_type()
///
/// The various #cairo_device_t functions can be used with devices of
/// any type, but some backends also provide type-specific functions
/// that must only be called with a device of the appropriate
/// type. These functions have names that begin with
/// <literal>cairo_<emphasis>type</emphasis>_device</literal> such as
/// cairo_xcb_device_debug_cap_xrender_version().
///
/// The behavior of calling a type-specific function with a device of
/// the wrong type is undefined.
///
/// New entries may be added in future versions.
///
/// Since: 1.10
abstract class cairo_device_type {
  static const int CAIRO_DEVICE_TYPE_DRM = 0;
  static const int CAIRO_DEVICE_TYPE_GL = 1;
  static const int CAIRO_DEVICE_TYPE_SCRIPT = 2;
  static const int CAIRO_DEVICE_TYPE_XCB = 3;
  static const int CAIRO_DEVICE_TYPE_XLIB = 4;
  static const int CAIRO_DEVICE_TYPE_XML = 5;
  static const int CAIRO_DEVICE_TYPE_COGL = 6;
  static const int CAIRO_DEVICE_TYPE_WIN32 = 7;
  static const int CAIRO_DEVICE_TYPE_INVALID = -1;
}

/// cairo_extend_t:
/// @CAIRO_EXTEND_NONE: pixels outside of the source pattern
/// are fully transparent (Since 1.0)
/// @CAIRO_EXTEND_REPEAT: the pattern is tiled by repeating (Since 1.0)
/// @CAIRO_EXTEND_REFLECT: the pattern is tiled by reflecting
/// at the edges (Since 1.0; but only implemented for surface patterns since 1.6)
/// @CAIRO_EXTEND_PAD: pixels outside of the pattern copy
/// the closest pixel from the source (Since 1.2; but only
/// implemented for surface patterns since 1.6)
///
/// #cairo_extend_t is used to describe how pattern color/alpha will be
/// determined for areas "outside" the pattern's natural area, (for
/// example, outside the surface bounds or outside the gradient
/// geometry).
///
/// Mesh patterns are not affected by the extend mode.
///
/// The default extend mode is %CAIRO_EXTEND_NONE for surface patterns
/// and %CAIRO_EXTEND_PAD for gradient patterns.
///
/// New entries may be added in future versions.
///
/// Since: 1.0
abstract class cairo_extend {
  static const int CAIRO_EXTEND_NONE = 0;
  static const int CAIRO_EXTEND_REPEAT = 1;
  static const int CAIRO_EXTEND_REFLECT = 2;
  static const int CAIRO_EXTEND_PAD = 3;
}

/// cairo_fill_rule_t:
/// @CAIRO_FILL_RULE_WINDING: If the path crosses the ray from
/// left-to-right, counts +1. If the path crosses the ray
/// from right to left, counts -1. (Left and right are determined
/// from the perspective of looking along the ray from the starting
/// point.) If the total count is non-zero, the point will be filled. (Since 1.0)
/// @CAIRO_FILL_RULE_EVEN_ODD: Counts the total number of
/// intersections, without regard to the orientation of the contour. If
/// the total number of intersections is odd, the point will be
/// filled. (Since 1.0)
///
/// #cairo_fill_rule_t is used to select how paths are filled. For both
/// fill rules, whether or not a point is included in the fill is
/// determined by taking a ray from that point to infinity and looking
/// at intersections with the path. The ray can be in any direction,
/// as long as it doesn't pass through the end point of a segment
/// or have a tricky intersection such as intersecting tangent to the path.
/// (Note that filling is not actually implemented in this way. This
/// is just a description of the rule that is applied.)
///
/// The default fill rule is %CAIRO_FILL_RULE_WINDING.
///
/// New entries may be added in future versions.
///
/// Since: 1.0
abstract class cairo_fill_rule {
  static const int CAIRO_FILL_RULE_WINDING = 0;
  static const int CAIRO_FILL_RULE_EVEN_ODD = 1;
}

/// cairo_filter_t:
/// @CAIRO_FILTER_FAST: A high-performance filter, with quality similar
/// to %CAIRO_FILTER_NEAREST (Since 1.0)
/// @CAIRO_FILTER_GOOD: A reasonable-performance filter, with quality
/// similar to %CAIRO_FILTER_BILINEAR (Since 1.0)
/// @CAIRO_FILTER_BEST: The highest-quality available, performance may
/// not be suitable for interactive use. (Since 1.0)
/// @CAIRO_FILTER_NEAREST: Nearest-neighbor filtering (Since 1.0)
/// @CAIRO_FILTER_BILINEAR: Linear interpolation in two dimensions (Since 1.0)
/// @CAIRO_FILTER_GAUSSIAN: This filter value is currently
/// unimplemented, and should not be used in current code. (Since 1.0)
///
/// #cairo_filter_t is used to indicate what filtering should be
/// applied when reading pixel values from patterns. See
/// cairo_pattern_set_filter() for indicating the desired filter to be
/// used with a particular pattern.
///
/// Since: 1.0
abstract class cairo_filter {
  static const int CAIRO_FILTER_FAST = 0;
  static const int CAIRO_FILTER_GOOD = 1;
  static const int CAIRO_FILTER_BEST = 2;
  static const int CAIRO_FILTER_NEAREST = 3;
  static const int CAIRO_FILTER_BILINEAR = 4;
  static const int CAIRO_FILTER_GAUSSIAN = 5;
}

/// cairo_font_extents_t:
/// @ascent: the distance that the font extends above the baseline.
/// Note that this is not always exactly equal to the maximum
/// of the extents of all the glyphs in the font, but rather
/// is picked to express the font designer's intent as to
/// how the font should align with elements above it.
/// @descent: the distance that the font extends below the baseline.
/// This value is positive for typical fonts that include
/// portions below the baseline. Note that this is not always
/// exactly equal to the maximum of the extents of all the
/// glyphs in the font, but rather is picked to express the
/// font designer's intent as to how the font should
/// align with elements below it.
/// @height: the recommended vertical distance between baselines when
/// setting consecutive lines of text with the font. This
/// is greater than @ascent+@descent by a
/// quantity known as the <firstterm>line spacing</firstterm>
/// or <firstterm>external leading</firstterm>. When space
/// is at a premium, most fonts can be set with only
/// a distance of @ascent+@descent between lines.
/// @max_x_advance: the maximum distance in the X direction that
/// the origin is advanced for any glyph in the font.
/// @max_y_advance: the maximum distance in the Y direction that
/// the origin is advanced for any glyph in the font.
/// This will be zero for normal fonts used for horizontal
/// writing. (The scripts of East Asia are sometimes written
/// vertically.)
///
/// The #cairo_font_extents_t structure stores metric information for
/// a font. Values are given in the current user-space coordinate
/// system.
///
/// Because font metrics are in user-space coordinates, they are
/// mostly, but not entirely, independent of the current transformation
/// matrix. If you call <literal>cairo_scale(cr, 2.0, 2.0)</literal>,
/// text will be drawn twice as big, but the reported text extents will
/// not be doubled. They will change slightly due to hinting (so you
/// can't assume that metrics are independent of the transformation
/// matrix), but otherwise will remain unchanged.
///
/// Since: 1.0
class cairo_font_extents_t extends ffi.Struct {
  @ffi.Double()
  external double ascent;

  @ffi.Double()
  external double descent;

  @ffi.Double()
  external double height;

  @ffi.Double()
  external double max_x_advance;

  @ffi.Double()
  external double max_y_advance;
}

/// cairo_font_face_t:
///
/// A #cairo_font_face_t specifies all aspects of a font other
/// than the size or font matrix (a font matrix is used to distort
/// a font by shearing it or scaling it unequally in the two
/// directions) . A font face can be set on a #cairo_t by using
/// cairo_set_font_face(); the size and font matrix are set with
/// cairo_set_font_size() and cairo_set_font_matrix().
///
/// There are various types of font faces, depending on the
/// <firstterm>font backend</firstterm> they use. The type of a
/// font face can be queried using cairo_font_face_get_type().
///
/// Memory management of #cairo_font_face_t is done with
/// cairo_font_face_reference() and cairo_font_face_destroy().
///
/// Since: 1.0
typedef cairo_font_face_t = _cairo_font_face;

/// cairo_font_options_t:
///
/// An opaque structure holding all options that are used when
/// rendering fonts.
///
/// Individual features of a #cairo_font_options_t can be set or
/// accessed using functions named
/// <function>cairo_font_options_set_<emphasis>feature_name</emphasis>()</function> and
/// <function>cairo_font_options_get_<emphasis>feature_name</emphasis>()</function>, like
/// cairo_font_options_set_antialias() and
/// cairo_font_options_get_antialias().
///
/// New features may be added to a #cairo_font_options_t in the
/// future.  For this reason, cairo_font_options_copy(),
/// cairo_font_options_equal(), cairo_font_options_merge(), and
/// cairo_font_options_hash() should be used to copy, check
/// for equality, merge, or compute a hash value of
/// #cairo_font_options_t objects.
///
/// Since: 1.0
typedef cairo_font_options_t = _cairo_font_options;

/// cairo_font_slant_t:
/// @CAIRO_FONT_SLANT_NORMAL: Upright font style, since 1.0
/// @CAIRO_FONT_SLANT_ITALIC: Italic font style, since 1.0
/// @CAIRO_FONT_SLANT_OBLIQUE: Oblique font style, since 1.0
///
/// Specifies variants of a font face based on their slant.
///
/// Since: 1.0
abstract class cairo_font_slant {
  static const int CAIRO_FONT_SLANT_NORMAL = 0;
  static const int CAIRO_FONT_SLANT_ITALIC = 1;
  static const int CAIRO_FONT_SLANT_OBLIQUE = 2;
}

/// cairo_font_type_t:
/// @CAIRO_FONT_TYPE_TOY: The font was created using cairo's toy font api (Since: 1.2)
/// @CAIRO_FONT_TYPE_FT: The font is of type FreeType (Since: 1.2)
/// @CAIRO_FONT_TYPE_WIN32: The font is of type Win32 (Since: 1.2)
/// @CAIRO_FONT_TYPE_QUARTZ: The font is of type Quartz (Since: 1.6, in 1.2 and
/// 1.4 it was named CAIRO_FONT_TYPE_ATSUI)
/// @CAIRO_FONT_TYPE_USER: The font was create using cairo's user font api (Since: 1.8)
///
/// #cairo_font_type_t is used to describe the type of a given font
/// face or scaled font. The font types are also known as "font
/// backends" within cairo.
///
/// The type of a font face is determined by the function used to
/// create it, which will generally be of the form
/// <function>cairo_<emphasis>type</emphasis>_font_face_create(<!-- -->)</function>.
/// The font face type can be queried with cairo_font_face_get_type()
///
/// The various #cairo_font_face_t functions can be used with a font face
/// of any type.
///
/// The type of a scaled font is determined by the type of the font
/// face passed to cairo_scaled_font_create(). The scaled font type can
/// be queried with cairo_scaled_font_get_type()
///
/// The various #cairo_scaled_font_t functions can be used with scaled
/// fonts of any type, but some font backends also provide
/// type-specific functions that must only be called with a scaled font
/// of the appropriate type. These functions have names that begin with
/// <function>cairo_<emphasis>type</emphasis>_scaled_font(<!-- -->)</function>
/// such as cairo_ft_scaled_font_lock_face().
///
/// The behavior of calling a type-specific function with a scaled font
/// of the wrong type is undefined.
///
/// New entries may be added in future versions.
///
/// Since: 1.2
abstract class cairo_font_type {
  static const int CAIRO_FONT_TYPE_TOY = 0;
  static const int CAIRO_FONT_TYPE_FT = 1;
  static const int CAIRO_FONT_TYPE_WIN32 = 2;
  static const int CAIRO_FONT_TYPE_QUARTZ = 3;
  static const int CAIRO_FONT_TYPE_USER = 4;
}

/// cairo_font_weight_t:
/// @CAIRO_FONT_WEIGHT_NORMAL: Normal font weight, since 1.0
/// @CAIRO_FONT_WEIGHT_BOLD: Bold font weight, since 1.0
///
/// Specifies variants of a font face based on their weight.
///
/// Since: 1.0
abstract class cairo_font_weight {
  static const int CAIRO_FONT_WEIGHT_NORMAL = 0;
  static const int CAIRO_FONT_WEIGHT_BOLD = 1;
}

/// cairo_format_t:
/// @CAIRO_FORMAT_INVALID: no such format exists or is supported.
/// @CAIRO_FORMAT_ARGB32: each pixel is a 32-bit quantity, with
/// alpha in the upper 8 bits, then red, then green, then blue.
/// The 32-bit quantities are stored native-endian. Pre-multiplied
/// alpha is used. (That is, 50% transparent red is 0x80800000,
/// not 0x80ff0000.) (Since 1.0)
/// @CAIRO_FORMAT_RGB24: each pixel is a 32-bit quantity, with
/// the upper 8 bits unused. Red, Green, and Blue are stored
/// in the remaining 24 bits in that order. (Since 1.0)
/// @CAIRO_FORMAT_A8: each pixel is a 8-bit quantity holding
/// an alpha value. (Since 1.0)
/// @CAIRO_FORMAT_A1: each pixel is a 1-bit quantity holding
/// an alpha value. Pixels are packed together into 32-bit
/// quantities. The ordering of the bits matches the
/// endianness of the platform. On a big-endian machine, the
/// first pixel is in the uppermost bit, on a little-endian
/// machine the first pixel is in the least-significant bit. (Since 1.0)
/// @CAIRO_FORMAT_RGB16_565: each pixel is a 16-bit quantity
/// with red in the upper 5 bits, then green in the middle
/// 6 bits, and blue in the lower 5 bits. (Since 1.2)
/// @CAIRO_FORMAT_RGB30: like RGB24 but with 10bpc. (Since 1.12)
/// @CAIRO_FORMAT_RGB96F: 3 floats, R, G, B. (Since 1.17.2)
/// @CAIRO_FORMAT_RGBA128F: 4 floats, R, G, B, A. (Since 1.17.2)
///
/// #cairo_format_t is used to identify the memory format of
/// image data.
///
/// New entries may be added in future versions.
///
/// Since: 1.0
abstract class cairo_format {
  static const int CAIRO_FORMAT_INVALID = -1;
  static const int CAIRO_FORMAT_ARGB32 = 0;
  static const int CAIRO_FORMAT_RGB24 = 1;
  static const int CAIRO_FORMAT_A8 = 2;
  static const int CAIRO_FORMAT_A1 = 3;
  static const int CAIRO_FORMAT_RGB16_565 = 4;
  static const int CAIRO_FORMAT_RGB30 = 5;
  static const int CAIRO_FORMAT_RGB96F = 6;
  static const int CAIRO_FORMAT_RGBA128F = 7;
}

/// cairo_glyph_t:
/// @index: glyph index in the font. The exact interpretation of the
/// glyph index depends on the font technology being used.
/// @x: the offset in the X direction between the origin used for
/// drawing or measuring the string and the origin of this glyph.
/// @y: the offset in the Y direction between the origin used for
/// drawing or measuring the string and the origin of this glyph.
///
/// The #cairo_glyph_t structure holds information about a single glyph
/// when drawing or measuring text. A font is (in simple terms) a
/// collection of shapes used to draw text. A glyph is one of these
/// shapes. There can be multiple glyphs for a single character
/// (alternates to be used in different contexts, for example), or a
/// glyph can be a <firstterm>ligature</firstterm> of multiple
/// characters. Cairo doesn't expose any way of converting input text
/// into glyphs, so in order to use the Cairo interfaces that take
/// arrays of glyphs, you must directly access the appropriate
/// underlying font system.
///
/// Note that the offsets given by @x and @y are not cumulative. When
/// drawing or measuring text, each glyph is individually positioned
/// with respect to the overall origin
///
/// Since: 1.0
class cairo_glyph_t extends ffi.Struct {
  @ffi.Uint64()
  external int index;

  @ffi.Double()
  external double x;

  @ffi.Double()
  external double y;
}

/// cairo_hint_metrics_t:
/// @CAIRO_HINT_METRICS_DEFAULT: Hint metrics in the default
/// manner for the font backend and target device, since 1.0
/// @CAIRO_HINT_METRICS_OFF: Do not hint font metrics, since 1.0
/// @CAIRO_HINT_METRICS_ON: Hint font metrics, since 1.0
///
/// Specifies whether to hint font metrics; hinting font metrics
/// means quantizing them so that they are integer values in
/// device space. Doing this improves the consistency of
/// letter and line spacing, however it also means that text
/// will be laid out differently at different zoom factors.
///
/// Since: 1.0
abstract class cairo_hint_metrics {
  static const int CAIRO_HINT_METRICS_DEFAULT = 0;
  static const int CAIRO_HINT_METRICS_OFF = 1;
  static const int CAIRO_HINT_METRICS_ON = 2;
}

/// cairo_hint_style_t:
/// @CAIRO_HINT_STYLE_DEFAULT: Use the default hint style for
/// font backend and target device, since 1.0
/// @CAIRO_HINT_STYLE_NONE: Do not hint outlines, since 1.0
/// @CAIRO_HINT_STYLE_SLIGHT: Hint outlines slightly to improve
/// contrast while retaining good fidelity to the original
/// shapes, since 1.0
/// @CAIRO_HINT_STYLE_MEDIUM: Hint outlines with medium strength
/// giving a compromise between fidelity to the original shapes
/// and contrast, since 1.0
/// @CAIRO_HINT_STYLE_FULL: Hint outlines to maximize contrast, since 1.0
///
/// Specifies the type of hinting to do on font outlines. Hinting
/// is the process of fitting outlines to the pixel grid in order
/// to improve the appearance of the result. Since hinting outlines
/// involves distorting them, it also reduces the faithfulness
/// to the original outline shapes. Not all of the outline hinting
/// styles are supported by all font backends.
///
/// New entries may be added in future versions.
///
/// Since: 1.0
abstract class cairo_hint_style {
  static const int CAIRO_HINT_STYLE_DEFAULT = 0;
  static const int CAIRO_HINT_STYLE_NONE = 1;
  static const int CAIRO_HINT_STYLE_SLIGHT = 2;
  static const int CAIRO_HINT_STYLE_MEDIUM = 3;
  static const int CAIRO_HINT_STYLE_FULL = 4;
}

/// cairo_line_cap_t:
/// @CAIRO_LINE_CAP_BUTT: start(stop) the line exactly at the start(end) point (Since 1.0)
/// @CAIRO_LINE_CAP_ROUND: use a round ending, the center of the circle is the end point (Since 1.0)
/// @CAIRO_LINE_CAP_SQUARE: use squared ending, the center of the square is the end point (Since 1.0)
///
/// Specifies how to render the endpoints of the path when stroking.
///
/// The default line cap style is %CAIRO_LINE_CAP_BUTT.
///
/// Since: 1.0
abstract class cairo_line_cap {
  static const int CAIRO_LINE_CAP_BUTT = 0;
  static const int CAIRO_LINE_CAP_ROUND = 1;
  static const int CAIRO_LINE_CAP_SQUARE = 2;
}

/// cairo_line_join_t:
/// @CAIRO_LINE_JOIN_MITER: use a sharp (angled) corner, see
/// cairo_set_miter_limit() (Since 1.0)
/// @CAIRO_LINE_JOIN_ROUND: use a rounded join, the center of the circle is the
/// joint point (Since 1.0)
/// @CAIRO_LINE_JOIN_BEVEL: use a cut-off join, the join is cut off at half
/// the line width from the joint point (Since 1.0)
///
/// Specifies how to render the junction of two lines when stroking.
///
/// The default line join style is %CAIRO_LINE_JOIN_MITER.
///
/// Since: 1.0
abstract class cairo_line_join {
  static const int CAIRO_LINE_JOIN_MITER = 0;
  static const int CAIRO_LINE_JOIN_ROUND = 1;
  static const int CAIRO_LINE_JOIN_BEVEL = 2;
}

/// cairo_matrix_t:
/// @xx: xx component of the affine transformation
/// @yx: yx component of the affine transformation
/// @xy: xy component of the affine transformation
/// @yy: yy component of the affine transformation
/// @x0: X translation component of the affine transformation
/// @y0: Y translation component of the affine transformation
///
/// A #cairo_matrix_t holds an affine transformation, such as a scale,
/// rotation, shear, or a combination of those. The transformation of
/// a point (x, y) is given by:
/// <programlisting>
/// x_new = xx * x + xy * y + x0;
/// y_new = yx * x + yy * y + y0;
/// </programlisting>
///
/// Since: 1.0
typedef cairo_matrix_t = _cairo_matrix;

/// cairo_operator_t:
/// @CAIRO_OPERATOR_CLEAR: clear destination layer (bounded) (Since 1.0)
/// @CAIRO_OPERATOR_SOURCE: replace destination layer (bounded) (Since 1.0)
/// @CAIRO_OPERATOR_OVER: draw source layer on top of destination layer
/// (bounded) (Since 1.0)
/// @CAIRO_OPERATOR_IN: draw source where there was destination content
/// (unbounded) (Since 1.0)
/// @CAIRO_OPERATOR_OUT: draw source where there was no destination
/// content (unbounded) (Since 1.0)
/// @CAIRO_OPERATOR_ATOP: draw source on top of destination content and
/// only there (Since 1.0)
/// @CAIRO_OPERATOR_DEST: ignore the source (Since 1.0)
/// @CAIRO_OPERATOR_DEST_OVER: draw destination on top of source (Since 1.0)
/// @CAIRO_OPERATOR_DEST_IN: leave destination only where there was
/// source content (unbounded) (Since 1.0)
/// @CAIRO_OPERATOR_DEST_OUT: leave destination only where there was no
/// source content (Since 1.0)
/// @CAIRO_OPERATOR_DEST_ATOP: leave destination on top of source content
/// and only there (unbounded) (Since 1.0)
/// @CAIRO_OPERATOR_XOR: source and destination are shown where there is only
/// one of them (Since 1.0)
/// @CAIRO_OPERATOR_ADD: source and destination layers are accumulated (Since 1.0)
/// @CAIRO_OPERATOR_SATURATE: like over, but assuming source and dest are
/// disjoint geometries (Since 1.0)
/// @CAIRO_OPERATOR_MULTIPLY: source and destination layers are multiplied.
/// This causes the result to be at least as dark as the darker inputs. (Since 1.10)
/// @CAIRO_OPERATOR_SCREEN: source and destination are complemented and
/// multiplied. This causes the result to be at least as light as the lighter
/// inputs. (Since 1.10)
/// @CAIRO_OPERATOR_OVERLAY: multiplies or screens, depending on the
/// lightness of the destination color. (Since 1.10)
/// @CAIRO_OPERATOR_DARKEN: replaces the destination with the source if it
/// is darker, otherwise keeps the source. (Since 1.10)
/// @CAIRO_OPERATOR_LIGHTEN: replaces the destination with the source if it
/// is lighter, otherwise keeps the source. (Since 1.10)
/// @CAIRO_OPERATOR_COLOR_DODGE: brightens the destination color to reflect
/// the source color. (Since 1.10)
/// @CAIRO_OPERATOR_COLOR_BURN: darkens the destination color to reflect
/// the source color. (Since 1.10)
/// @CAIRO_OPERATOR_HARD_LIGHT: Multiplies or screens, dependent on source
/// color. (Since 1.10)
/// @CAIRO_OPERATOR_SOFT_LIGHT: Darkens or lightens, dependent on source
/// color. (Since 1.10)
/// @CAIRO_OPERATOR_DIFFERENCE: Takes the difference of the source and
/// destination color. (Since 1.10)
/// @CAIRO_OPERATOR_EXCLUSION: Produces an effect similar to difference, but
/// with lower contrast. (Since 1.10)
/// @CAIRO_OPERATOR_HSL_HUE: Creates a color with the hue of the source
/// and the saturation and luminosity of the target. (Since 1.10)
/// @CAIRO_OPERATOR_HSL_SATURATION: Creates a color with the saturation
/// of the source and the hue and luminosity of the target. Painting with
/// this mode onto a gray area produces no change. (Since 1.10)
/// @CAIRO_OPERATOR_HSL_COLOR: Creates a color with the hue and saturation
/// of the source and the luminosity of the target. This preserves the gray
/// levels of the target and is useful for coloring monochrome images or
/// tinting color images. (Since 1.10)
/// @CAIRO_OPERATOR_HSL_LUMINOSITY: Creates a color with the luminosity of
/// the source and the hue and saturation of the target. This produces an
/// inverse effect to @CAIRO_OPERATOR_HSL_COLOR. (Since 1.10)
///
/// #cairo_operator_t is used to set the compositing operator for all cairo
/// drawing operations.
///
/// The default operator is %CAIRO_OPERATOR_OVER.
///
/// The operators marked as <firstterm>unbounded</firstterm> modify their
/// destination even outside of the mask layer (that is, their effect is not
/// bound by the mask layer).  However, their effect can still be limited by
/// way of clipping.
///
/// To keep things simple, the operator descriptions here
/// document the behavior for when both source and destination are either fully
/// transparent or fully opaque.  The actual implementation works for
/// translucent layers too.
/// For a more detailed explanation of the effects of each operator, including
/// the mathematical definitions, see
/// <ulink url="https://cairographics.org/operators/">https://cairographics.org/operators/</ulink>.
///
/// Since: 1.0
abstract class cairo_operator {
  static const int CAIRO_OPERATOR_CLEAR = 0;
  static const int CAIRO_OPERATOR_SOURCE = 1;
  static const int CAIRO_OPERATOR_OVER = 2;
  static const int CAIRO_OPERATOR_IN = 3;
  static const int CAIRO_OPERATOR_OUT = 4;
  static const int CAIRO_OPERATOR_ATOP = 5;
  static const int CAIRO_OPERATOR_DEST = 6;
  static const int CAIRO_OPERATOR_DEST_OVER = 7;
  static const int CAIRO_OPERATOR_DEST_IN = 8;
  static const int CAIRO_OPERATOR_DEST_OUT = 9;
  static const int CAIRO_OPERATOR_DEST_ATOP = 10;
  static const int CAIRO_OPERATOR_XOR = 11;
  static const int CAIRO_OPERATOR_ADD = 12;
  static const int CAIRO_OPERATOR_SATURATE = 13;
  static const int CAIRO_OPERATOR_MULTIPLY = 14;
  static const int CAIRO_OPERATOR_SCREEN = 15;
  static const int CAIRO_OPERATOR_OVERLAY = 16;
  static const int CAIRO_OPERATOR_DARKEN = 17;
  static const int CAIRO_OPERATOR_LIGHTEN = 18;
  static const int CAIRO_OPERATOR_COLOR_DODGE = 19;
  static const int CAIRO_OPERATOR_COLOR_BURN = 20;
  static const int CAIRO_OPERATOR_HARD_LIGHT = 21;
  static const int CAIRO_OPERATOR_SOFT_LIGHT = 22;
  static const int CAIRO_OPERATOR_DIFFERENCE = 23;
  static const int CAIRO_OPERATOR_EXCLUSION = 24;
  static const int CAIRO_OPERATOR_HSL_HUE = 25;
  static const int CAIRO_OPERATOR_HSL_SATURATION = 26;
  static const int CAIRO_OPERATOR_HSL_COLOR = 27;
  static const int CAIRO_OPERATOR_HSL_LUMINOSITY = 28;
}

/// cairo_path_t:
/// @status: the current error status
/// @data: the elements in the path
/// @num_data: the number of elements in the data array
///
/// A data structure for holding a path. This data structure serves as
/// the return value for cairo_copy_path() and
/// cairo_copy_path_flat() as well the input value for
/// cairo_append_path().
///
/// See #cairo_path_data_t for hints on how to iterate over the
/// actual data within the path.
///
/// The num_data member gives the number of elements in the data
/// array. This number is larger than the number of independent path
/// portions (defined in #cairo_path_data_type_t), since the data
/// includes both headers and coordinates for each portion.
///
/// Since: 1.0
class cairo_path extends ffi.Struct {
  @ffi.Int32()
  external int status;

  external ffi.Pointer<cairo_path_data_t> data;

  @ffi.Int32()
  external int num_data;
}

/// cairo_path_data_t:
///
/// #cairo_path_data_t is used to represent the path data inside a
/// #cairo_path_t.
///
/// The data structure is designed to try to balance the demands of
/// efficiency and ease-of-use. A path is represented as an array of
/// #cairo_path_data_t, which is a union of headers and points.
///
/// Each portion of the path is represented by one or more elements in
/// the array, (one header followed by 0 or more points). The length
/// value of the header is the number of array elements for the current
/// portion including the header, (ie. length == 1 + # of points), and
/// where the number of points for each element type is as follows:
///
/// <programlisting>
/// %CAIRO_PATH_MOVE_TO:     1 point
/// %CAIRO_PATH_LINE_TO:     1 point
/// %CAIRO_PATH_CURVE_TO:    3 points
/// %CAIRO_PATH_CLOSE_PATH:  0 points
/// </programlisting>
///
/// The semantics and ordering of the coordinate values are consistent
/// with cairo_move_to(), cairo_line_to(), cairo_curve_to(), and
/// cairo_close_path().
///
/// Here is sample code for iterating through a #cairo_path_t:
///
/// <informalexample><programlisting>
/// int i;
/// cairo_path_t *path;
/// cairo_path_data_t *data;
/// &nbsp;
/// path = cairo_copy_path (cr);
/// &nbsp;
/// for (i=0; i < path->num_data; i += path->data[i].header.length) {
/// data = &amp;path->data[i];
/// switch (data->header.type) {
/// case CAIRO_PATH_MOVE_TO:
/// do_move_to_things (data[1].point.x, data[1].point.y);
/// break;
/// case CAIRO_PATH_LINE_TO:
/// do_line_to_things (data[1].point.x, data[1].point.y);
/// break;
/// case CAIRO_PATH_CURVE_TO:
/// do_curve_to_things (data[1].point.x, data[1].point.y,
/// data[2].point.x, data[2].point.y,
/// data[3].point.x, data[3].point.y);
/// break;
/// case CAIRO_PATH_CLOSE_PATH:
/// do_close_path_things ();
/// break;
/// }
/// }
/// cairo_path_destroy (path);
/// </programlisting></informalexample>
///
/// As of cairo 1.4, cairo does not mind if there are more elements in
/// a portion of the path than needed.  Such elements can be used by
/// users of the cairo API to hold extra values in the path data
/// structure.  For this reason, it is recommended that applications
/// always use <literal>data->header.length</literal> to
/// iterate over the path data, instead of hardcoding the number of
/// elements for each element type.
///
/// Since: 1.0
typedef cairo_path_data_t = _cairo_path_data_t;

/// cairo_path_data_type_t:
/// @CAIRO_PATH_MOVE_TO: A move-to operation, since 1.0
/// @CAIRO_PATH_LINE_TO: A line-to operation, since 1.0
/// @CAIRO_PATH_CURVE_TO: A curve-to operation, since 1.0
/// @CAIRO_PATH_CLOSE_PATH: A close-path operation, since 1.0
///
/// #cairo_path_data_t is used to describe the type of one portion
/// of a path when represented as a #cairo_path_t.
/// See #cairo_path_data_t for details.
///
/// Since: 1.0
abstract class cairo_path_data_type {
  static const int CAIRO_PATH_MOVE_TO = 0;
  static const int CAIRO_PATH_LINE_TO = 1;
  static const int CAIRO_PATH_CURVE_TO = 2;
  static const int CAIRO_PATH_CLOSE_PATH = 3;
}

/// cairo_path_t:
/// @status: the current error status
/// @data: the elements in the path
/// @num_data: the number of elements in the data array
///
/// A data structure for holding a path. This data structure serves as
/// the return value for cairo_copy_path() and
/// cairo_copy_path_flat() as well the input value for
/// cairo_append_path().
///
/// See #cairo_path_data_t for hints on how to iterate over the
/// actual data within the path.
///
/// The num_data member gives the number of elements in the data
/// array. This number is larger than the number of independent path
/// portions (defined in #cairo_path_data_type_t), since the data
/// includes both headers and coordinates for each portion.
///
/// Since: 1.0
typedef cairo_path_t = cairo_path;

/// cairo_pattern_t:
///
/// A #cairo_pattern_t represents a source when drawing onto a
/// surface. There are different subtypes of #cairo_pattern_t,
/// for different types of sources; for example,
/// cairo_pattern_create_rgb() creates a pattern for a solid
/// opaque color.
///
/// Other than various
/// <function>cairo_pattern_create_<emphasis>type</emphasis>()</function>
/// functions, some of the pattern types can be implicitly created using various
/// <function>cairo_set_source_<emphasis>type</emphasis>()</function> functions;
/// for example cairo_set_source_rgb().
///
/// The type of a pattern can be queried with cairo_pattern_get_type().
///
/// Memory management of #cairo_pattern_t is done with
/// cairo_pattern_reference() and cairo_pattern_destroy().
///
/// Since: 1.0
typedef cairo_pattern_t = _cairo_pattern;

/// cairo_pattern_type_t:
/// @CAIRO_PATTERN_TYPE_SOLID: The pattern is a solid (uniform)
/// color. It may be opaque or translucent, since 1.2.
/// @CAIRO_PATTERN_TYPE_SURFACE: The pattern is a based on a surface (an image), since 1.2.
/// @CAIRO_PATTERN_TYPE_LINEAR: The pattern is a linear gradient, since 1.2.
/// @CAIRO_PATTERN_TYPE_RADIAL: The pattern is a radial gradient, since 1.2.
/// @CAIRO_PATTERN_TYPE_MESH: The pattern is a mesh, since 1.12.
/// @CAIRO_PATTERN_TYPE_RASTER_SOURCE: The pattern is a user pattern providing raster data, since 1.12.
///
/// #cairo_pattern_type_t is used to describe the type of a given pattern.
///
/// The type of a pattern is determined by the function used to create
/// it. The cairo_pattern_create_rgb() and cairo_pattern_create_rgba()
/// functions create SOLID patterns. The remaining
/// cairo_pattern_create<!-- --> functions map to pattern types in obvious
/// ways.
///
/// The pattern type can be queried with cairo_pattern_get_type()
///
/// Most #cairo_pattern_t functions can be called with a pattern of any
/// type, (though trying to change the extend or filter for a solid
/// pattern will have no effect). A notable exception is
/// cairo_pattern_add_color_stop_rgb() and
/// cairo_pattern_add_color_stop_rgba() which must only be called with
/// gradient patterns (either LINEAR or RADIAL). Otherwise the pattern
/// will be shutdown and put into an error state.
///
/// New entries may be added in future versions.
///
/// Since: 1.2
abstract class cairo_pattern_type {
  static const int CAIRO_PATTERN_TYPE_SOLID = 0;
  static const int CAIRO_PATTERN_TYPE_SURFACE = 1;
  static const int CAIRO_PATTERN_TYPE_LINEAR = 2;
  static const int CAIRO_PATTERN_TYPE_RADIAL = 3;
  static const int CAIRO_PATTERN_TYPE_MESH = 4;
  static const int CAIRO_PATTERN_TYPE_RASTER_SOURCE = 5;
}

/// cairo_raster_source_acquire_func_t:
/// @pattern: the pattern being rendered from
/// @callback_data: the user data supplied during creation
/// @target: the rendering target surface
/// @extents: rectangular region of interest in pixels in sample space
///
/// #cairo_raster_source_acquire_func_t is the type of function which is
/// called when a pattern is being rendered from. It should create a surface
/// that provides the pixel data for the region of interest as defined by
/// extents, though the surface itself does not have to be limited to that
/// area. For convenience the surface should probably be of image type,
/// created with cairo_surface_create_similar_image() for the target (which
/// enables the number of copies to be reduced during transfer to the
/// device). Another option, might be to return a similar surface to the
/// target for explicit handling by the application of a set of cached sources
/// on the device. The region of sample data provided should be defined using
/// cairo_surface_set_device_offset() to specify the top-left corner of the
/// sample data (along with width and height of the surface).
///
/// Returns: a #cairo_surface_t
///
/// Since: 1.12
typedef cairo_raster_source_acquire_func_t = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Pointer<cairo_surface_t> Function(
            ffi.Pointer<cairo_pattern_t>,
            ffi.Pointer<ffi.Void>,
            ffi.Pointer<cairo_surface_t>,
            ffi.Pointer<cairo_rectangle_int_t>)>>;

/// cairo_raster_source_copy_func_t:
/// @pattern: the #cairo_pattern_t that was copied to
/// @callback_data: the user data supplied during creation
/// @other: the #cairo_pattern_t being used as the source for the copy
///
/// #cairo_raster_source_copy_func_t is the type of function which is
/// called when the pattern gets copied as a normal part of rendering.
///
/// Return value: CAIRO_STATUS_SUCCESS on success, or one of the
/// #cairo_status_t error codes for failure.
///
/// Since: 1.12
typedef cairo_raster_source_copy_func_t = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int32 Function(ffi.Pointer<cairo_pattern_t>, ffi.Pointer<ffi.Void>,
            ffi.Pointer<cairo_pattern_t>)>>;

/// cairo_raster_source_finish_func_t:
/// @pattern: the pattern being rendered from
/// @callback_data: the user data supplied during creation
///
/// #cairo_raster_source_finish_func_t is the type of function which is
/// called when the pattern (or a copy thereof) is no longer required.
///
/// Since: 1.12
typedef cairo_raster_source_finish_func_t = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(
            ffi.Pointer<cairo_pattern_t>, ffi.Pointer<ffi.Void>)>>;

/// cairo_raster_source_release_func_t:
/// @pattern: the pattern being rendered from
/// @callback_data: the user data supplied during creation
/// @surface: the surface created during acquire
///
/// #cairo_raster_source_release_func_t is the type of function which is
/// called when the pixel data is no longer being access by the pattern
/// for the rendering operation. Typically this function will simply
/// destroy the surface created during acquire.
///
/// Since: 1.12
typedef cairo_raster_source_release_func_t = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(ffi.Pointer<cairo_pattern_t>, ffi.Pointer<ffi.Void>,
            ffi.Pointer<cairo_surface_t>)>>;

/// cairo_raster_source_snapshot_func_t:
/// @pattern: the pattern being rendered from
/// @callback_data: the user data supplied during creation
///
/// #cairo_raster_source_snapshot_func_t is the type of function which is
/// called when the pixel data needs to be preserved for later use
/// during printing. This pattern will be accessed again later, and it
/// is expected to provide the pixel data that was current at the time
/// of snapshotting.
///
/// Return value: CAIRO_STATUS_SUCCESS on success, or one of the
/// #cairo_status_t error codes for failure.
///
/// Since: 1.12
typedef cairo_raster_source_snapshot_func_t = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int32 Function(
            ffi.Pointer<cairo_pattern_t>, ffi.Pointer<ffi.Void>)>>;

/// cairo_read_func_t:
/// @closure: the input closure
/// @data: the buffer into which to read the data
/// @length: the amount of data to read
///
/// #cairo_read_func_t is the type of function which is called when a
/// backend needs to read data from an input stream.  It is passed the
/// closure which was specified by the user at the time the read
/// function was registered, the buffer to read the data into and the
/// length of the data in bytes.  The read function should return
/// %CAIRO_STATUS_SUCCESS if all the data was successfully read,
/// %CAIRO_STATUS_READ_ERROR otherwise.
///
/// Returns: the status code of the read operation
///
/// Since: 1.0
typedef cairo_read_func_t = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int32 Function(
            ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Uint8>, ffi.Uint32)>>;

/// cairo_rectangle_int_t:
/// @x: X coordinate of the left side of the rectangle
/// @y: Y coordinate of the the top side of the rectangle
/// @width: width of the rectangle
/// @height: height of the rectangle
///
/// A data structure for holding a rectangle with integer coordinates.
///
/// Since: 1.10
typedef cairo_rectangle_int_t = _cairo_rectangle_int;

/// cairo_rectangle_list_t:
/// @status: Error status of the rectangle list
/// @rectangles: Array containing the rectangles
/// @num_rectangles: Number of rectangles in this list
///
/// A data structure for holding a dynamically allocated
/// array of rectangles.
///
/// Since: 1.4
typedef cairo_rectangle_list_t = _cairo_rectangle_list;

/// cairo_rectangle_t:
/// @x: X coordinate of the left side of the rectangle
/// @y: Y coordinate of the the top side of the rectangle
/// @width: width of the rectangle
/// @height: height of the rectangle
///
/// A data structure for holding a rectangle.
///
/// Since: 1.4
typedef cairo_rectangle_t = _cairo_rectangle;

/// cairo_region_overlap_t:
/// @CAIRO_REGION_OVERLAP_IN: The contents are entirely inside the region. (Since 1.10)
/// @CAIRO_REGION_OVERLAP_OUT: The contents are entirely outside the region. (Since 1.10)
/// @CAIRO_REGION_OVERLAP_PART: The contents are partially inside and
/// partially outside the region. (Since 1.10)
///
/// Used as the return value for cairo_region_contains_rectangle().
///
/// Since: 1.10
abstract class cairo_region_overlap {
  /// completely inside region
  static const int CAIRO_REGION_OVERLAP_IN = 0;

  /// completely outside region
  static const int CAIRO_REGION_OVERLAP_OUT = 1;

  /// partly inside region
  static const int CAIRO_REGION_OVERLAP_PART = 2;
}

/// cairo_region_t:
///
/// A #cairo_region_t represents a set of integer-aligned rectangles.
///
/// It allows set-theoretical operations like cairo_region_union() and
/// cairo_region_intersect() to be performed on them.
///
/// Memory management of #cairo_region_t is done with
/// cairo_region_reference() and cairo_region_destroy().
///
/// Since: 1.10
typedef cairo_region_t = _cairo_region;

/// cairo_scaled_font_t:
///
/// A #cairo_scaled_font_t is a font scaled to a particular size and device
/// resolution. A #cairo_scaled_font_t is most useful for low-level font
/// usage where a library or application wants to cache a reference
/// to a scaled font to speed up the computation of metrics.
///
/// There are various types of scaled fonts, depending on the
/// <firstterm>font backend</firstterm> they use. The type of a
/// scaled font can be queried using cairo_scaled_font_get_type().
///
/// Memory management of #cairo_scaled_font_t is done with
/// cairo_scaled_font_reference() and cairo_scaled_font_destroy().
///
/// Since: 1.0
typedef cairo_scaled_font_t = _cairo_scaled_font;

/// cairo_status_t:
/// @CAIRO_STATUS_SUCCESS: no error has occurred (Since 1.0)
/// @CAIRO_STATUS_NO_MEMORY: out of memory (Since 1.0)
/// @CAIRO_STATUS_INVALID_RESTORE: cairo_restore() called without matching cairo_save() (Since 1.0)
/// @CAIRO_STATUS_INVALID_POP_GROUP: no saved group to pop, i.e. cairo_pop_group() without matching cairo_push_group() (Since 1.0)
/// @CAIRO_STATUS_NO_CURRENT_POINT: no current point defined (Since 1.0)
/// @CAIRO_STATUS_INVALID_MATRIX: invalid matrix (not invertible) (Since 1.0)
/// @CAIRO_STATUS_INVALID_STATUS: invalid value for an input #cairo_status_t (Since 1.0)
/// @CAIRO_STATUS_NULL_POINTER: %NULL pointer (Since 1.0)
/// @CAIRO_STATUS_INVALID_STRING: input string not valid UTF-8 (Since 1.0)
/// @CAIRO_STATUS_INVALID_PATH_DATA: input path data not valid (Since 1.0)
/// @CAIRO_STATUS_READ_ERROR: error while reading from input stream (Since 1.0)
/// @CAIRO_STATUS_WRITE_ERROR: error while writing to output stream (Since 1.0)
/// @CAIRO_STATUS_SURFACE_FINISHED: target surface has been finished (Since 1.0)
/// @CAIRO_STATUS_SURFACE_TYPE_MISMATCH: the surface type is not appropriate for the operation (Since 1.0)
/// @CAIRO_STATUS_PATTERN_TYPE_MISMATCH: the pattern type is not appropriate for the operation (Since 1.0)
/// @CAIRO_STATUS_INVALID_CONTENT: invalid value for an input #cairo_content_t (Since 1.0)
/// @CAIRO_STATUS_INVALID_FORMAT: invalid value for an input #cairo_format_t (Since 1.0)
/// @CAIRO_STATUS_INVALID_VISUAL: invalid value for an input Visual* (Since 1.0)
/// @CAIRO_STATUS_FILE_NOT_FOUND: file not found (Since 1.0)
/// @CAIRO_STATUS_INVALID_DASH: invalid value for a dash setting (Since 1.0)
/// @CAIRO_STATUS_INVALID_DSC_COMMENT: invalid value for a DSC comment (Since 1.2)
/// @CAIRO_STATUS_INVALID_INDEX: invalid index passed to getter (Since 1.4)
/// @CAIRO_STATUS_CLIP_NOT_REPRESENTABLE: clip region not representable in desired format (Since 1.4)
/// @CAIRO_STATUS_TEMP_FILE_ERROR: error creating or writing to a temporary file (Since 1.6)
/// @CAIRO_STATUS_INVALID_STRIDE: invalid value for stride (Since 1.6)
/// @CAIRO_STATUS_FONT_TYPE_MISMATCH: the font type is not appropriate for the operation (Since 1.8)
/// @CAIRO_STATUS_USER_FONT_IMMUTABLE: the user-font is immutable (Since 1.8)
/// @CAIRO_STATUS_USER_FONT_ERROR: error occurred in a user-font callback function (Since 1.8)
/// @CAIRO_STATUS_NEGATIVE_COUNT: negative number used where it is not allowed (Since 1.8)
/// @CAIRO_STATUS_INVALID_CLUSTERS: input clusters do not represent the accompanying text and glyph array (Since 1.8)
/// @CAIRO_STATUS_INVALID_SLANT: invalid value for an input #cairo_font_slant_t (Since 1.8)
/// @CAIRO_STATUS_INVALID_WEIGHT: invalid value for an input #cairo_font_weight_t (Since 1.8)
/// @CAIRO_STATUS_INVALID_SIZE: invalid value (typically too big) for the size of the input (surface, pattern, etc.) (Since 1.10)
/// @CAIRO_STATUS_USER_FONT_NOT_IMPLEMENTED: user-font method not implemented (Since 1.10)
/// @CAIRO_STATUS_DEVICE_TYPE_MISMATCH: the device type is not appropriate for the operation (Since 1.10)
/// @CAIRO_STATUS_DEVICE_ERROR: an operation to the device caused an unspecified error (Since 1.10)
/// @CAIRO_STATUS_INVALID_MESH_CONSTRUCTION: a mesh pattern
/// construction operation was used outside of a
/// cairo_mesh_pattern_begin_patch()/cairo_mesh_pattern_end_patch()
/// pair (Since 1.12)
/// @CAIRO_STATUS_DEVICE_FINISHED: target device has been finished (Since 1.12)
/// @CAIRO_STATUS_JBIG2_GLOBAL_MISSING: %CAIRO_MIME_TYPE_JBIG2_GLOBAL_ID has been used on at least one image
/// but no image provided %CAIRO_MIME_TYPE_JBIG2_GLOBAL (Since 1.14)
/// @CAIRO_STATUS_PNG_ERROR: error occurred in libpng while reading from or writing to a PNG file (Since 1.16)
/// @CAIRO_STATUS_FREETYPE_ERROR: error occurred in libfreetype (Since 1.16)
/// @CAIRO_STATUS_WIN32_GDI_ERROR: error occurred in the Windows Graphics Device Interface (Since 1.16)
/// @CAIRO_STATUS_TAG_ERROR: invalid tag name, attributes, or nesting (Since 1.16)
/// @CAIRO_STATUS_LAST_STATUS: this is a special value indicating the number of
/// status values defined in this enumeration.  When using this value, note
/// that the version of cairo at run-time may have additional status values
/// defined than the value of this symbol at compile-time. (Since 1.10)
///
/// #cairo_status_t is used to indicate errors that can occur when
/// using Cairo. In some cases it is returned directly by functions.
/// but when using #cairo_t, the last error, if any, is stored in
/// the context and can be retrieved with cairo_status().
///
/// New entries may be added in future versions.  Use cairo_status_to_string()
/// to get a human-readable representation of an error message.
///
/// Since: 1.0
abstract class cairo_status1 {
  static const int CAIRO_STATUS_SUCCESS = 0;
  static const int CAIRO_STATUS_NO_MEMORY = 1;
  static const int CAIRO_STATUS_INVALID_RESTORE = 2;
  static const int CAIRO_STATUS_INVALID_POP_GROUP = 3;
  static const int CAIRO_STATUS_NO_CURRENT_POINT = 4;
  static const int CAIRO_STATUS_INVALID_MATRIX = 5;
  static const int CAIRO_STATUS_INVALID_STATUS = 6;
  static const int CAIRO_STATUS_NULL_POINTER = 7;
  static const int CAIRO_STATUS_INVALID_STRING = 8;
  static const int CAIRO_STATUS_INVALID_PATH_DATA = 9;
  static const int CAIRO_STATUS_READ_ERROR = 10;
  static const int CAIRO_STATUS_WRITE_ERROR = 11;
  static const int CAIRO_STATUS_SURFACE_FINISHED = 12;
  static const int CAIRO_STATUS_SURFACE_TYPE_MISMATCH = 13;
  static const int CAIRO_STATUS_PATTERN_TYPE_MISMATCH = 14;
  static const int CAIRO_STATUS_INVALID_CONTENT = 15;
  static const int CAIRO_STATUS_INVALID_FORMAT = 16;
  static const int CAIRO_STATUS_INVALID_VISUAL = 17;
  static const int CAIRO_STATUS_FILE_NOT_FOUND = 18;
  static const int CAIRO_STATUS_INVALID_DASH = 19;
  static const int CAIRO_STATUS_INVALID_DSC_COMMENT = 20;
  static const int CAIRO_STATUS_INVALID_INDEX = 21;
  static const int CAIRO_STATUS_CLIP_NOT_REPRESENTABLE = 22;
  static const int CAIRO_STATUS_TEMP_FILE_ERROR = 23;
  static const int CAIRO_STATUS_INVALID_STRIDE = 24;
  static const int CAIRO_STATUS_FONT_TYPE_MISMATCH = 25;
  static const int CAIRO_STATUS_USER_FONT_IMMUTABLE = 26;
  static const int CAIRO_STATUS_USER_FONT_ERROR = 27;
  static const int CAIRO_STATUS_NEGATIVE_COUNT = 28;
  static const int CAIRO_STATUS_INVALID_CLUSTERS = 29;
  static const int CAIRO_STATUS_INVALID_SLANT = 30;
  static const int CAIRO_STATUS_INVALID_WEIGHT = 31;
  static const int CAIRO_STATUS_INVALID_SIZE = 32;
  static const int CAIRO_STATUS_USER_FONT_NOT_IMPLEMENTED = 33;
  static const int CAIRO_STATUS_DEVICE_TYPE_MISMATCH = 34;
  static const int CAIRO_STATUS_DEVICE_ERROR = 35;
  static const int CAIRO_STATUS_INVALID_MESH_CONSTRUCTION = 36;
  static const int CAIRO_STATUS_DEVICE_FINISHED = 37;
  static const int CAIRO_STATUS_JBIG2_GLOBAL_MISSING = 38;
  static const int CAIRO_STATUS_PNG_ERROR = 39;
  static const int CAIRO_STATUS_FREETYPE_ERROR = 40;
  static const int CAIRO_STATUS_WIN32_GDI_ERROR = 41;
  static const int CAIRO_STATUS_TAG_ERROR = 42;
  static const int CAIRO_STATUS_LAST_STATUS = 43;
}

/// cairo_subpixel_order_t:
/// @CAIRO_SUBPIXEL_ORDER_DEFAULT: Use the default subpixel order for
/// for the target device, since 1.0
/// @CAIRO_SUBPIXEL_ORDER_RGB: Subpixel elements are arranged horizontally
/// with red at the left, since 1.0
/// @CAIRO_SUBPIXEL_ORDER_BGR:  Subpixel elements are arranged horizontally
/// with blue at the left, since 1.0
/// @CAIRO_SUBPIXEL_ORDER_VRGB: Subpixel elements are arranged vertically
/// with red at the top, since 1.0
/// @CAIRO_SUBPIXEL_ORDER_VBGR: Subpixel elements are arranged vertically
/// with blue at the top, since 1.0
///
/// The subpixel order specifies the order of color elements within
/// each pixel on the display device when rendering with an
/// antialiasing mode of %CAIRO_ANTIALIAS_SUBPIXEL.
///
/// Since: 1.0
abstract class cairo_subpixel_order {
  static const int CAIRO_SUBPIXEL_ORDER_DEFAULT = 0;
  static const int CAIRO_SUBPIXEL_ORDER_RGB = 1;
  static const int CAIRO_SUBPIXEL_ORDER_BGR = 2;
  static const int CAIRO_SUBPIXEL_ORDER_VRGB = 3;
  static const int CAIRO_SUBPIXEL_ORDER_VBGR = 4;
}

typedef cairo_surface_observer_callback_t = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(ffi.Pointer<cairo_surface_t>,
            ffi.Pointer<cairo_surface_t>, ffi.Pointer<ffi.Void>)>>;

/// cairo_surface_observer_mode_t:
/// @CAIRO_SURFACE_OBSERVER_NORMAL: no recording is done
/// @CAIRO_SURFACE_OBSERVER_RECORD_OPERATIONS: operations are recorded
///
/// Whether operations should be recorded.
///
/// Since: 1.12
abstract class cairo_surface_observer_mode_t {
  static const int CAIRO_SURFACE_OBSERVER_NORMAL = 0;
  static const int CAIRO_SURFACE_OBSERVER_RECORD_OPERATIONS = 1;
}

/// cairo_surface_t:
///
/// A #cairo_surface_t represents an image, either as the destination
/// of a drawing operation or as source when drawing onto another
/// surface.  To draw to a #cairo_surface_t, create a cairo context
/// with the surface as the target, using cairo_create().
///
/// There are different subtypes of #cairo_surface_t for
/// different drawing backends; for example, cairo_image_surface_create()
/// creates a bitmap image in memory.
/// The type of a surface can be queried with cairo_surface_get_type().
///
/// The initial contents of a surface after creation depend upon the manner
/// of its creation. If cairo creates the surface and backing storage for
/// the user, it will be initially cleared; for example,
/// cairo_image_surface_create() and cairo_surface_create_similar().
/// Alternatively, if the user passes in a reference to some backing storage
/// and asks cairo to wrap that in a #cairo_surface_t, then the contents are
/// not modified; for example, cairo_image_surface_create_for_data() and
/// cairo_xlib_surface_create().
///
/// Memory management of #cairo_surface_t is done with
/// cairo_surface_reference() and cairo_surface_destroy().
///
/// Since: 1.0
typedef cairo_surface_t = _cairo_surface;

/// cairo_surface_type_t:
/// @CAIRO_SURFACE_TYPE_IMAGE: The surface is of type image, since 1.2
/// @CAIRO_SURFACE_TYPE_PDF: The surface is of type pdf, since 1.2
/// @CAIRO_SURFACE_TYPE_PS: The surface is of type ps, since 1.2
/// @CAIRO_SURFACE_TYPE_XLIB: The surface is of type xlib, since 1.2
/// @CAIRO_SURFACE_TYPE_XCB: The surface is of type xcb, since 1.2
/// @CAIRO_SURFACE_TYPE_GLITZ: The surface is of type glitz, since 1.2
/// @CAIRO_SURFACE_TYPE_QUARTZ: The surface is of type quartz, since 1.2
/// @CAIRO_SURFACE_TYPE_WIN32: The surface is of type win32, since 1.2
/// @CAIRO_SURFACE_TYPE_BEOS: The surface is of type beos, since 1.2
/// @CAIRO_SURFACE_TYPE_DIRECTFB: The surface is of type directfb, since 1.2
/// @CAIRO_SURFACE_TYPE_SVG: The surface is of type svg, since 1.2
/// @CAIRO_SURFACE_TYPE_OS2: The surface is of type os2, since 1.4
/// @CAIRO_SURFACE_TYPE_WIN32_PRINTING: The surface is a win32 printing surface, since 1.6
/// @CAIRO_SURFACE_TYPE_QUARTZ_IMAGE: The surface is of type quartz_image, since 1.6
/// @CAIRO_SURFACE_TYPE_SCRIPT: The surface is of type script, since 1.10
/// @CAIRO_SURFACE_TYPE_QT: The surface is of type Qt, since 1.10
/// @CAIRO_SURFACE_TYPE_RECORDING: The surface is of type recording, since 1.10
/// @CAIRO_SURFACE_TYPE_VG: The surface is a OpenVG surface, since 1.10
/// @CAIRO_SURFACE_TYPE_GL: The surface is of type OpenGL, since 1.10
/// @CAIRO_SURFACE_TYPE_DRM: The surface is of type Direct Render Manager, since 1.10
/// @CAIRO_SURFACE_TYPE_TEE: The surface is of type 'tee' (a multiplexing surface), since 1.10
/// @CAIRO_SURFACE_TYPE_XML: The surface is of type XML (for debugging), since 1.10
/// @CAIRO_SURFACE_TYPE_SUBSURFACE: The surface is a subsurface created with
/// cairo_surface_create_for_rectangle(), since 1.10
/// @CAIRO_SURFACE_TYPE_COGL: This surface is of type Cogl, since 1.12
///
/// #cairo_surface_type_t is used to describe the type of a given
/// surface. The surface types are also known as "backends" or "surface
/// backends" within cairo.
///
/// The type of a surface is determined by the function used to create
/// it, which will generally be of the form
/// <function>cairo_<emphasis>type</emphasis>_surface_create(<!-- -->)</function>,
/// (though see cairo_surface_create_similar() as well).
///
/// The surface type can be queried with cairo_surface_get_type()
///
/// The various #cairo_surface_t functions can be used with surfaces of
/// any type, but some backends also provide type-specific functions
/// that must only be called with a surface of the appropriate
/// type. These functions have names that begin with
/// <literal>cairo_<emphasis>type</emphasis>_surface</literal> such as cairo_image_surface_get_width().
///
/// The behavior of calling a type-specific function with a surface of
/// the wrong type is undefined.
///
/// New entries may be added in future versions.
///
/// Since: 1.2
abstract class cairo_surface_type {
  static const int CAIRO_SURFACE_TYPE_IMAGE = 0;
  static const int CAIRO_SURFACE_TYPE_PDF = 1;
  static const int CAIRO_SURFACE_TYPE_PS = 2;
  static const int CAIRO_SURFACE_TYPE_XLIB = 3;
  static const int CAIRO_SURFACE_TYPE_XCB = 4;
  static const int CAIRO_SURFACE_TYPE_GLITZ = 5;
  static const int CAIRO_SURFACE_TYPE_QUARTZ = 6;
  static const int CAIRO_SURFACE_TYPE_WIN32 = 7;
  static const int CAIRO_SURFACE_TYPE_BEOS = 8;
  static const int CAIRO_SURFACE_TYPE_DIRECTFB = 9;
  static const int CAIRO_SURFACE_TYPE_SVG = 10;
  static const int CAIRO_SURFACE_TYPE_OS2 = 11;
  static const int CAIRO_SURFACE_TYPE_WIN32_PRINTING = 12;
  static const int CAIRO_SURFACE_TYPE_QUARTZ_IMAGE = 13;
  static const int CAIRO_SURFACE_TYPE_SCRIPT = 14;
  static const int CAIRO_SURFACE_TYPE_QT = 15;
  static const int CAIRO_SURFACE_TYPE_RECORDING = 16;
  static const int CAIRO_SURFACE_TYPE_VG = 17;
  static const int CAIRO_SURFACE_TYPE_GL = 18;
  static const int CAIRO_SURFACE_TYPE_DRM = 19;
  static const int CAIRO_SURFACE_TYPE_TEE = 20;
  static const int CAIRO_SURFACE_TYPE_XML = 21;
  static const int CAIRO_SURFACE_TYPE_SKIA = 22;
  static const int CAIRO_SURFACE_TYPE_SUBSURFACE = 23;
  static const int CAIRO_SURFACE_TYPE_COGL = 24;
}

/// cairo_t:
///
/// A #cairo_t contains the current state of the rendering device,
/// including coordinates of yet to be drawn shapes.
///
/// Cairo contexts, as #cairo_t objects are named, are central to
/// cairo and all drawing with cairo is always done to a #cairo_t
/// object.
///
/// Memory management of #cairo_t is done with
/// cairo_reference() and cairo_destroy().
///
/// Since: 1.0
typedef cairo_t = _cairo;

/// cairo_text_cluster_flags_t:
/// @CAIRO_TEXT_CLUSTER_FLAG_BACKWARD: The clusters in the cluster array
/// map to glyphs in the glyph array from end to start. (Since 1.8)
///
/// Specifies properties of a text cluster mapping.
///
/// Since: 1.8
abstract class cairo_text_cluster_flags {
  static const int CAIRO_TEXT_CLUSTER_FLAG_BACKWARD = 1;
}

/// cairo_text_cluster_t:
/// @num_bytes: the number of bytes of UTF-8 text covered by cluster
/// @num_glyphs: the number of glyphs covered by cluster
///
/// The #cairo_text_cluster_t structure holds information about a single
/// <firstterm>text cluster</firstterm>.  A text cluster is a minimal
/// mapping of some glyphs corresponding to some UTF-8 text.
///
/// For a cluster to be valid, both @num_bytes and @num_glyphs should
/// be non-negative, and at least one should be non-zero.
/// Note that clusters with zero glyphs are not as well supported as
/// normal clusters.  For example, PDF rendering applications typically
/// ignore those clusters when PDF text is being selected.
///
/// See cairo_show_text_glyphs() for how clusters are used in advanced
/// text operations.
///
/// Since: 1.8
class cairo_text_cluster_t extends ffi.Struct {
  @ffi.Int32()
  external int num_bytes;

  @ffi.Int32()
  external int num_glyphs;
}

/// cairo_text_extents_t:
/// @x_bearing: the horizontal distance from the origin to the
/// leftmost part of the glyphs as drawn. Positive if the
/// glyphs lie entirely to the right of the origin.
/// @y_bearing: the vertical distance from the origin to the
/// topmost part of the glyphs as drawn. Positive only if the
/// glyphs lie completely below the origin; will usually be
/// negative.
/// @width: width of the glyphs as drawn
/// @height: height of the glyphs as drawn
/// @x_advance:distance to advance in the X direction
/// after drawing these glyphs
/// @y_advance: distance to advance in the Y direction
/// after drawing these glyphs. Will typically be zero except
/// for vertical text layout as found in East-Asian languages.
///
/// The #cairo_text_extents_t structure stores the extents of a single
/// glyph or a string of glyphs in user-space coordinates. Because text
/// extents are in user-space coordinates, they are mostly, but not
/// entirely, independent of the current transformation matrix. If you call
/// <literal>cairo_scale(cr, 2.0, 2.0)</literal>, text will
/// be drawn twice as big, but the reported text extents will not be
/// doubled. They will change slightly due to hinting (so you can't
/// assume that metrics are independent of the transformation matrix),
/// but otherwise will remain unchanged.
///
/// Since: 1.0
class cairo_text_extents_t extends ffi.Struct {
  @ffi.Double()
  external double x_bearing;

  @ffi.Double()
  external double y_bearing;

  @ffi.Double()
  external double width;

  @ffi.Double()
  external double height;

  @ffi.Double()
  external double x_advance;

  @ffi.Double()
  external double y_advance;
}

/// cairo_user_data_key_t:
/// @unused: not used; ignore.
///
/// #cairo_user_data_key_t is used for attaching user data to cairo
/// data structures.  The actual contents of the struct is never used,
/// and there is no need to initialize the object; only the unique
/// address of a #cairo_data_key_t object is used.  Typically, you
/// would just use the address of a static #cairo_data_key_t object.
///
/// Since: 1.0
typedef cairo_user_data_key_t = _cairo_user_data_key;

/// cairo_user_scaled_font_init_func_t:
/// @scaled_font: the scaled-font being created
/// @cr: a cairo context, in font space
/// @extents: font extents to fill in, in font space
///
/// #cairo_user_scaled_font_init_func_t is the type of function which is
/// called when a scaled-font needs to be created for a user font-face.
///
/// The cairo context @cr is not used by the caller, but is prepared in font
/// space, similar to what the cairo contexts passed to the render_glyph
/// method will look like.  The callback can use this context for extents
/// computation for example.  After the callback is called, @cr is checked
/// for any error status.
///
/// The @extents argument is where the user font sets the font extents for
/// @scaled_font.  It is in font space, which means that for most cases its
/// ascent and descent members should add to 1.0.  @extents is preset to
/// hold a value of 1.0 for ascent, height, and max_x_advance, and 0.0 for
/// descent and max_y_advance members.
///
/// The callback is optional.  If not set, default font extents as described
/// in the previous paragraph will be used.
///
/// Note that @scaled_font is not fully initialized at this
/// point and trying to use it for text operations in the callback will result
/// in deadlock.
///
/// Returns: %CAIRO_STATUS_SUCCESS upon success, or an error status on error.
///
/// Since: 1.8
typedef cairo_user_scaled_font_init_func_t = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int32 Function(ffi.Pointer<cairo_scaled_font_t>,
            ffi.Pointer<cairo_t>, ffi.Pointer<cairo_font_extents_t>)>>;

/// cairo_user_scaled_font_render_glyph_func_t:
/// @scaled_font: user scaled-font
/// @glyph: glyph code to render
/// @cr: cairo context to draw to, in font space
/// @extents: glyph extents to fill in, in font space
///
/// #cairo_user_scaled_font_render_glyph_func_t is the type of function which
/// is called when a user scaled-font needs to render a glyph.
///
/// The callback is mandatory, and expected to draw the glyph with code @glyph to
/// the cairo context @cr.  @cr is prepared such that the glyph drawing is done in
/// font space.  That is, the matrix set on @cr is the scale matrix of @scaled_font.
/// The @extents argument is where the user font sets the font extents for
/// @scaled_font.  However, if user prefers to draw in user space, they can
/// achieve that by changing the matrix on @cr.
///
/// All cairo rendering operations to @cr are permitted. However, when
/// this callback is set with
/// cairo_user_font_face_set_render_glyph_func(), the result is
/// undefined if any source other than the default source on @cr is
/// used.  That means, glyph bitmaps should be rendered using
/// cairo_mask() instead of cairo_paint(). When this callback is set with
/// cairo_user_font_face_set_render_color_glyph_func(), setting the
/// source is a valid operation.
///
/// When this callback is set with
/// cairo_user_font_face_set_render_color_glyph_func(), the default
/// source is the current source color of the context that is rendering
/// the user font. That is, the same color a non-color user font will
/// be rendered in. In most cases the callback will want to set a
/// specific color. If the callback wishes to use the current context
/// color after using another source, it should retain a reference to
/// the source or use cairo_save()/cairo_restore() prior to changing
/// the source. Note that the default source contains an internal
/// marker to indicate that it is to be substituted with the current
/// context source color when rendered to a surface. Querying the
/// default source pattern will reveal a solid black color, however
/// this is not representative of the color that will actually be
/// used. Similarly, setting a solid black color will render black, not
/// the current context source when the glyph is painted to a surface.
///
/// Other non-default settings on @cr include a font size of 1.0 (given that
/// it is set up to be in font space), and font options corresponding to
/// @scaled_font.
///
/// The @extents argument is preset to have <literal>x_bearing</literal>,
/// <literal>width</literal>, and <literal>y_advance</literal> of zero,
/// <literal>y_bearing</literal> set to <literal>-font_extents.ascent</literal>,
/// <literal>height</literal> to <literal>font_extents.ascent+font_extents.descent</literal>,
/// and <literal>x_advance</literal> to <literal>font_extents.max_x_advance</literal>.
/// The only field user needs to set in majority of cases is
/// <literal>x_advance</literal>.
/// If the <literal>width</literal> field is zero upon the callback returning
/// (which is its preset value), the glyph extents are automatically computed
/// based on the drawings done to @cr.  This is in most cases exactly what the
/// desired behavior is.  However, if for any reason the callback sets the
/// extents, it must be ink extents, and include the extents of all drawing
/// done to @cr in the callback.
///
/// Where both color and non-color callbacks has been set using
/// cairo_user_font_face_set_render_color_glyph_func(), and
/// cairo_user_font_face_set_render_glyph_func(), the color glyph
/// callback may return %CAIRO_STATUS_USER_FONT_NOT_IMPLEMENTED if the
/// glyph is not a color glyph. This is the only case in which the
/// %CAIRO_STATUS_USER_FONT_NOT_IMPLEMENTED may be returned from a
/// render callback.
///
/// Returns: %CAIRO_STATUS_SUCCESS upon success,
/// %CAIRO_STATUS_USER_FONT_NOT_IMPLEMENTED if fallback options should be tried,
/// or %CAIRO_STATUS_USER_FONT_ERROR or any other error status on error.
///
/// Since: 1.8
typedef cairo_user_scaled_font_render_glyph_func_t = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int32 Function(ffi.Pointer<cairo_scaled_font_t>, ffi.Uint64,
            ffi.Pointer<cairo_t>, ffi.Pointer<cairo_text_extents_t>)>>;

/// cairo_user_scaled_font_text_to_glyphs_func_t:
/// @scaled_font: the scaled-font being created
/// @utf8: a string of text encoded in UTF-8
/// @utf8_len: length of @utf8 in bytes
/// @glyphs: pointer to array of glyphs to fill, in font space
/// @num_glyphs: pointer to number of glyphs
/// @clusters: pointer to array of cluster mapping information to fill, or %NULL
/// @num_clusters: pointer to number of clusters
/// @cluster_flags: pointer to location to store cluster flags corresponding to the
/// output @clusters
///
/// #cairo_user_scaled_font_text_to_glyphs_func_t is the type of function which
/// is called to convert input text to an array of glyphs.  This is used by the
/// cairo_show_text() operation.
///
/// Using this callback the user-font has full control on glyphs and their
/// positions.  That means, it allows for features like ligatures and kerning,
/// as well as complex <firstterm>shaping</firstterm> required for scripts like
/// Arabic and Indic.
///
/// The @num_glyphs argument is preset to the number of glyph entries available
/// in the @glyphs buffer. If the @glyphs buffer is %NULL, the value of
/// @num_glyphs will be zero.  If the provided glyph array is too short for
/// the conversion (or for convenience), a new glyph array may be allocated
/// using cairo_glyph_allocate() and placed in @glyphs.  Upon return,
/// @num_glyphs should contain the number of generated glyphs.  If the value
/// @glyphs points at has changed after the call, the caller will free the
/// allocated glyph array using cairo_glyph_free().  The caller will also free
/// the original value of @glyphs, so the callback shouldn't do so.
/// The callback should populate the glyph indices and positions (in font space)
/// assuming that the text is to be shown at the origin.
///
/// If @clusters is not %NULL, @num_clusters and @cluster_flags are also
/// non-%NULL, and cluster mapping should be computed. The semantics of how
/// cluster array allocation works is similar to the glyph array.  That is,
/// if @clusters initially points to a non-%NULL value, that array may be used
/// as a cluster buffer, and @num_clusters points to the number of cluster
/// entries available there.  If the provided cluster array is too short for
/// the conversion (or for convenience), a new cluster array may be allocated
/// using cairo_text_cluster_allocate() and placed in @clusters.  In this case,
/// the original value of @clusters will still be freed by the caller.  Upon
/// return, @num_clusters should contain the number of generated clusters.
/// If the value @clusters points at has changed after the call, the caller
/// will free the allocated cluster array using cairo_text_cluster_free().
///
/// The callback is optional.  If @num_glyphs is negative upon
/// the callback returning or if the return value
/// is %CAIRO_STATUS_USER_FONT_NOT_IMPLEMENTED, the unicode_to_glyph callback
/// is tried.  See #cairo_user_scaled_font_unicode_to_glyph_func_t.
///
/// Note: While cairo does not impose any limitation on glyph indices,
/// some applications may assume that a glyph index fits in a 16-bit
/// unsigned integer.  As such, it is advised that user-fonts keep their
/// glyphs in the 0 to 65535 range.  Furthermore, some applications may
/// assume that glyph 0 is a special glyph-not-found glyph.  User-fonts
/// are advised to use glyph 0 for such purposes and do not use that
/// glyph value for other purposes.
///
/// Returns: %CAIRO_STATUS_SUCCESS upon success,
/// %CAIRO_STATUS_USER_FONT_NOT_IMPLEMENTED if fallback options should be tried,
/// or %CAIRO_STATUS_USER_FONT_ERROR or any other error status on error.
///
/// Since: 1.8
typedef cairo_user_scaled_font_text_to_glyphs_func_t = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int32 Function(
            ffi.Pointer<cairo_scaled_font_t>,
            ffi.Pointer<ffi.Int8>,
            ffi.Int32,
            ffi.Pointer<ffi.Pointer<cairo_glyph_t>>,
            ffi.Pointer<ffi.Int32>,
            ffi.Pointer<ffi.Pointer<cairo_text_cluster_t>>,
            ffi.Pointer<ffi.Int32>,
            ffi.Pointer<ffi.Int32>)>>;

/// cairo_user_scaled_font_unicode_to_glyph_func_t:
/// @scaled_font: the scaled-font being created
/// @unicode: input unicode character code-point
/// @glyph_index: output glyph index
///
/// #cairo_user_scaled_font_unicode_to_glyph_func_t is the type of function which
/// is called to convert an input Unicode character to a single glyph.
/// This is used by the cairo_show_text() operation.
///
/// This callback is used to provide the same functionality as the
/// text_to_glyphs callback does (see #cairo_user_scaled_font_text_to_glyphs_func_t)
/// but has much less control on the output,
/// in exchange for increased ease of use.  The inherent assumption to using
/// this callback is that each character maps to one glyph, and that the
/// mapping is context independent.  It also assumes that glyphs are positioned
/// according to their advance width.  These mean no ligatures, kerning, or
/// complex scripts can be implemented using this callback.
///
/// The callback is optional, and only used if text_to_glyphs callback is not
/// set or fails to return glyphs.  If this callback is not set or if it returns
/// %CAIRO_STATUS_USER_FONT_NOT_IMPLEMENTED, an identity mapping from Unicode
/// code-points to glyph indices is assumed.
///
/// Note: While cairo does not impose any limitation on glyph indices,
/// some applications may assume that a glyph index fits in a 16-bit
/// unsigned integer.  As such, it is advised that user-fonts keep their
/// glyphs in the 0 to 65535 range.  Furthermore, some applications may
/// assume that glyph 0 is a special glyph-not-found glyph.  User-fonts
/// are advised to use glyph 0 for such purposes and do not use that
/// glyph value for other purposes.
///
/// Returns: %CAIRO_STATUS_SUCCESS upon success,
/// %CAIRO_STATUS_USER_FONT_NOT_IMPLEMENTED if fallback options should be tried,
/// or %CAIRO_STATUS_USER_FONT_ERROR or any other error status on error.
///
/// Since: 1.8
typedef cairo_user_scaled_font_unicode_to_glyph_func_t = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int32 Function(ffi.Pointer<cairo_scaled_font_t>, ffi.Uint64,
            ffi.Pointer<ffi.Uint64>)>>;

/// cairo_write_func_t:
/// @closure: the output closure
/// @data: the buffer containing the data to write
/// @length: the amount of data to write
///
/// #cairo_write_func_t is the type of function which is called when a
/// backend needs to write data to an output stream.  It is passed the
/// closure which was specified by the user at the time the write
/// function was registered, the data to write and the length of the
/// data in bytes.  The write function should return
/// %CAIRO_STATUS_SUCCESS if all the data was successfully written,
/// %CAIRO_STATUS_WRITE_ERROR otherwise.
///
/// Returns: the status code of the write operation
///
/// Since: 1.0
typedef cairo_write_func_t = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int32 Function(
            ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Uint8>, ffi.Uint32)>>;

class div_t extends ffi.Struct {
  @ffi.Int32()
  external int quot;

  @ffi.Int32()
  external int rem;
}

class drand48_data extends ffi.Struct {
  @ffi.Array.multi([3])
  external ffi.Array<ffi.Uint16> __x;

  @ffi.Array.multi([3])
  external ffi.Array<ffi.Uint16> __old_x;

  @ffi.Uint16()
  external int __c;

  @ffi.Uint16()
  external int __init;

  @ffi.Uint64()
  external int __a;
}

class fd_set extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<__fd_mask> __fds_bits;
}

typedef fpos_t = __fpos_t;

abstract class idtype_t {
  static const int P_ALL = 0;
  static const int P_PID = 1;
  static const int P_PGID = 2;
}

class ldiv_t extends ffi.Struct {
  @ffi.Int64()
  external int quot;

  @ffi.Int64()
  external int rem;
}

class lldiv_t extends ffi.Struct {
  @ffi.Int64()
  external int quot;

  @ffi.Int64()
  external int rem;
}

typedef locale_t = __locale_t;

const int math_errhandling = 3;

class pthread_attr_t extends ffi.Union {
  @ffi.Array.multi([56])
  external ffi.Array<ffi.Int8> __size;

  @ffi.Int64()
  external int __align;
}

class pthread_barrier_t extends ffi.Union {
  @ffi.Array.multi([32])
  external ffi.Array<ffi.Int8> __size;

  @ffi.Int64()
  external int __align;
}

class pthread_barrierattr_t extends ffi.Union {
  @ffi.Array.multi([4])
  external ffi.Array<ffi.Int8> __size;

  @ffi.Int32()
  external int __align;
}

class pthread_cond_t extends ffi.Union {
  external __pthread_cond_s __data;

  @ffi.Array.multi([48])
  external ffi.Array<ffi.Int8> __size;

  @ffi.Int64()
  external int __align;
}

class pthread_condattr_t extends ffi.Union {
  @ffi.Array.multi([4])
  external ffi.Array<ffi.Int8> __size;

  @ffi.Int32()
  external int __align;
}

class pthread_mutex_t extends ffi.Union {
  external __pthread_mutex_s __data;

  @ffi.Array.multi([40])
  external ffi.Array<ffi.Int8> __size;

  @ffi.Int64()
  external int __align;
}

class pthread_mutexattr_t extends ffi.Union {
  @ffi.Array.multi([4])
  external ffi.Array<ffi.Int8> __size;

  @ffi.Int32()
  external int __align;
}

class pthread_rwlock_t extends ffi.Union {
  external __pthread_rwlock_arch_t __data;

  @ffi.Array.multi([56])
  external ffi.Array<ffi.Int8> __size;

  @ffi.Int64()
  external int __align;
}

class pthread_rwlockattr_t extends ffi.Union {
  @ffi.Array.multi([8])
  external ffi.Array<ffi.Int8> __size;

  @ffi.Int64()
  external int __align;
}

class random_data extends ffi.Struct {
  external ffi.Pointer<ffi.Int32> fptr;

  external ffi.Pointer<ffi.Int32> rptr;

  external ffi.Pointer<ffi.Int32> state;

  @ffi.Int32()
  external int rand_type;

  @ffi.Int32()
  external int rand_deg;

  @ffi.Int32()
  external int rand_sep;

  external ffi.Pointer<ffi.Int32> end_ptr;
}

typedef size_t = ffi.Uint64;

class timespec extends ffi.Struct {
  @__time_t()
  external int tv_sec;

  @__syscall_slong_t()
  external int tv_nsec;
}

class timeval extends ffi.Struct {
  @__time_t()
  external int tv_sec;

  @__suseconds_t()
  external int tv_usec;
}

typedef wchar_t = ffi.Int32;
